
MCU_Ind_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b18  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e918  0800e918  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800e918  0800e918  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e918  0800e918  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e918  0800e918  0001e918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e91c  0800e91c  0001e91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800e920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000098  0800e9b8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  0800e9b8  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e8b8  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e5  00000000  00000000  0003e979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00042260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  000434b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b741  00000000  00000000  00044550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181c3  00000000  00000000  0005fc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bc9  00000000  00000000  00077e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010aa1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ecc  00000000  00000000  0010aa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bde8 	.word	0x0800bde8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	0800bde8 	.word	0x0800bde8

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2201      	movs	r2, #1
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f007 fa39 	bl	8007600 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fe0e 	bl	8000db4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f007 fcb5 	bl	8007b18 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fdfe 	bl	8000db4 <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000164 	.word	0x20000164
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000218:	2302      	movs	r3, #2
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f007 ff7e 	bl	8008128 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <SPI_RW>:
}
//Функция приема/передачи данных по SPI
//Принимает данные для передачи ведомому устройству
//Возвращает данные с ведомого устройства
uint8_t SPI_RW(uint8_t data)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
//
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)TxBuffer, (uint8_t*)RxBuffer, 1, 100);
//
//	return RxBuffer[0];

	SPI_tx_buf[0] = data;
 800024a:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <SPI_RW+0x44>)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	7013      	strb	r3, [r2, #0]

	CSM_L;
 8000250:	2200      	movs	r2, #0
 8000252:	2110      	movs	r1, #16
 8000254:	480c      	ldr	r0, [pc, #48]	; (8000288 <SPI_RW+0x48>)
 8000256:	f008 f8eb 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 800025a:	2301      	movs	r3, #1
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <SPI_RW+0x4c>)
 800025e:	4909      	ldr	r1, [pc, #36]	; (8000284 <SPI_RW+0x44>)
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <SPI_RW+0x50>)
 8000262:	f009 fe13 	bl	8009e8c <HAL_SPI_TransmitReceive_IT>
    while(!flag_output_spi1) {;}
 8000266:	bf00      	nop
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <SPI_RW+0x54>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0fb      	beq.n	8000268 <SPI_RW+0x28>
    flag_output_spi1 = 0;
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <SPI_RW+0x54>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]

    return SPI_rx_buf[0];
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <SPI_RW+0x4c>)
 8000278:	781b      	ldrb	r3, [r3, #0]
}
 800027a:	4618      	mov	r0, r3
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000120 	.word	0x20000120
 8000288:	40010800 	.word	0x40010800
 800028c:	2000011c 	.word	0x2000011c
 8000290:	20000200 	.word	0x20000200
 8000294:	200000b4 	.word	0x200000b4

08000298 <Get_ADC1>:
	return Value;
}
//Функция получения необработанных данных с АЦП канала измерения яркости освещения
//Возвращает значение с канала АЦП
uint16_t Get_ADC1(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
	uint16_t ADC_value = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start(&hadc1);
 80002a2:	4808      	ldr	r0, [pc, #32]	; (80002c4 <Get_ADC1+0x2c>)
 80002a4:	f007 fa84 	bl	80077b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80002a8:	2164      	movs	r1, #100	; 0x64
 80002aa:	4806      	ldr	r0, [pc, #24]	; (80002c4 <Get_ADC1+0x2c>)
 80002ac:	f007 fb2e 	bl	800790c <HAL_ADC_PollForConversion>
	ADC_value = HAL_ADC_GetValue(&hadc1);
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <Get_ADC1+0x2c>)
 80002b2:	f007 fc25 	bl	8007b00 <HAL_ADC_GetValue>
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]

	return ADC_value;
 80002ba:	88fb      	ldrh	r3, [r7, #6]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000164 	.word	0x20000164

080002c8 <BackLight>:
}
*/
//Фукция регулировки дисплея
//Принимает данные с АЦП(датчик освещенности)
void BackLight(uint16_t data)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 80002d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d6:	88fb      	ldrh	r3, [r7, #6]
 80002d8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <Rising>:
//Фукция отрисовки символа нарастающего фронта
//Принимает координаты отрисовки
void Rising(uint16_t a, uint16_t b)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af02      	add	r7, sp, #8
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	80bb      	strh	r3, [r7, #4]
	//---------------Стирание линий---------------
	ST7735_DrawLine(123, a, 126, a, ST7735_BLACK);
 80002f4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80002f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002fc:	2200      	movs	r2, #0
 80002fe:	9200      	str	r2, [sp, #0]
 8000300:	227e      	movs	r2, #126	; 0x7e
 8000302:	207b      	movs	r0, #123	; 0x7b
 8000304:	f006 fda8 	bl	8006e58 <ST7735_DrawLine>
	ST7735_DrawLine(126, a, 134, b, ST7735_BLACK);
 8000308:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800030c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	2286      	movs	r2, #134	; 0x86
 8000316:	207e      	movs	r0, #126	; 0x7e
 8000318:	f006 fd9e 	bl	8006e58 <ST7735_DrawLine>
	ST7735_DrawLine(134, b, 137, b, ST7735_BLACK);
 800031c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000320:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	2289      	movs	r2, #137	; 0x89
 800032a:	2086      	movs	r0, #134	; 0x86
 800032c:	f006 fd94 	bl	8006e58 <ST7735_DrawLine>
	//--------------------------------------------

	ST7735_DrawLine(123, b, 126, b, ST7735_RED);
 8000330:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000334:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000338:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	227e      	movs	r2, #126	; 0x7e
 8000340:	207b      	movs	r0, #123	; 0x7b
 8000342:	f006 fd89 	bl	8006e58 <ST7735_DrawLine>
	ST7735_DrawLine(126, b, 134, a, ST7735_RED);
 8000346:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800034a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800034e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000352:	9200      	str	r2, [sp, #0]
 8000354:	2286      	movs	r2, #134	; 0x86
 8000356:	207e      	movs	r0, #126	; 0x7e
 8000358:	f006 fd7e 	bl	8006e58 <ST7735_DrawLine>
	ST7735_DrawLine(134, a, 137, a, ST7735_RED);
 800035c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000364:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000368:	9200      	str	r2, [sp, #0]
 800036a:	2289      	movs	r2, #137	; 0x89
 800036c:	2086      	movs	r0, #134	; 0x86
 800036e:	f006 fd73 	bl	8006e58 <ST7735_DrawLine>
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <Faling>:
//Фукция отрисовки символа спадающего фронта
//Принимает координаты отрисовки
void Faling(uint16_t a, uint16_t b)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b084      	sub	sp, #16
 800037e:	af02      	add	r7, sp, #8
 8000380:	4603      	mov	r3, r0
 8000382:	460a      	mov	r2, r1
 8000384:	80fb      	strh	r3, [r7, #6]
 8000386:	4613      	mov	r3, r2
 8000388:	80bb      	strh	r3, [r7, #4]
	//---------------Стирание линий---------------
	ST7735_DrawLine(123, a, 126, a, ST7735_BLACK);
 800038a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800038e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000392:	2200      	movs	r2, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	227e      	movs	r2, #126	; 0x7e
 8000398:	207b      	movs	r0, #123	; 0x7b
 800039a:	f006 fd5d 	bl	8006e58 <ST7735_DrawLine>
	ST7735_DrawLine(126, a, 134, b, ST7735_BLACK);
 800039e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80003a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003a6:	2200      	movs	r2, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	2286      	movs	r2, #134	; 0x86
 80003ac:	207e      	movs	r0, #126	; 0x7e
 80003ae:	f006 fd53 	bl	8006e58 <ST7735_DrawLine>
	ST7735_DrawLine(134, b, 137, b, ST7735_BLACK);
 80003b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80003b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	9200      	str	r2, [sp, #0]
 80003be:	2289      	movs	r2, #137	; 0x89
 80003c0:	2086      	movs	r0, #134	; 0x86
 80003c2:	f006 fd49 	bl	8006e58 <ST7735_DrawLine>
	//--------------------------------------------

	ST7735_DrawLine(123, b, 126, b, ST7735_BLUE);
 80003c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80003ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003ce:	221f      	movs	r2, #31
 80003d0:	9200      	str	r2, [sp, #0]
 80003d2:	227e      	movs	r2, #126	; 0x7e
 80003d4:	207b      	movs	r0, #123	; 0x7b
 80003d6:	f006 fd3f 	bl	8006e58 <ST7735_DrawLine>
	ST7735_DrawLine(126, b, 134, a, ST7735_BLUE);
 80003da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80003de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003e2:	221f      	movs	r2, #31
 80003e4:	9200      	str	r2, [sp, #0]
 80003e6:	2286      	movs	r2, #134	; 0x86
 80003e8:	207e      	movs	r0, #126	; 0x7e
 80003ea:	f006 fd35 	bl	8006e58 <ST7735_DrawLine>
	ST7735_DrawLine(134, a, 137, a, ST7735_BLUE);
 80003ee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80003f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003f6:	221f      	movs	r2, #31
 80003f8:	9200      	str	r2, [sp, #0]
 80003fa:	2289      	movs	r2, #137	; 0x89
 80003fc:	2086      	movs	r0, #134	; 0x86
 80003fe:	f006 fd2b 	bl	8006e58 <ST7735_DrawLine>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000420:	4b43      	ldr	r3, [pc, #268]	; (8000530 <MX_GPIO_Init+0x124>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a42      	ldr	r2, [pc, #264]	; (8000530 <MX_GPIO_Init+0x124>)
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b40      	ldr	r3, [pc, #256]	; (8000530 <MX_GPIO_Init+0x124>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0320 	and.w	r3, r3, #32
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b3d      	ldr	r3, [pc, #244]	; (8000530 <MX_GPIO_Init+0x124>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a3c      	ldr	r2, [pc, #240]	; (8000530 <MX_GPIO_Init+0x124>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b3a      	ldr	r3, [pc, #232]	; (8000530 <MX_GPIO_Init+0x124>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	4b37      	ldr	r3, [pc, #220]	; (8000530 <MX_GPIO_Init+0x124>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a36      	ldr	r2, [pc, #216]	; (8000530 <MX_GPIO_Init+0x124>)
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b34      	ldr	r3, [pc, #208]	; (8000530 <MX_GPIO_Init+0x124>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS__M_GPIO_Port, CS__M_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2110      	movs	r1, #16
 800046c:	4831      	ldr	r0, [pc, #196]	; (8000534 <MX_GPIO_Init+0x128>)
 800046e:	f007 ffdf 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS__F_Pin|WP__F_Pin|CS__L_Pin|RST_L_Pin
 8000472:	2200      	movs	r2, #0
 8000474:	f241 01f3 	movw	r1, #4339	; 0x10f3
 8000478:	482f      	ldr	r0, [pc, #188]	; (8000538 <MX_GPIO_Init+0x12c>)
 800047a:	f007 ffd9 	bl	8008430 <HAL_GPIO_WritePin>
                          |DC_L_Pin|ERR_Pin|OK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__M_Pin;
 800047e:	2310      	movs	r3, #16
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048a:	2303      	movs	r3, #3
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS__M_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4827      	ldr	r0, [pc, #156]	; (8000534 <MX_GPIO_Init+0x128>)
 8000496:	f007 fe47 	bl	8008128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS__F_Pin|WP__F_Pin|CS__L_Pin|RST_L_Pin
 800049a:	f241 03f3 	movw	r3, #4339	; 0x10f3
 800049e:	613b      	str	r3, [r7, #16]
                          |DC_L_Pin|ERR_Pin|OK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	4821      	ldr	r0, [pc, #132]	; (8000538 <MX_GPIO_Init+0x12c>)
 80004b4:	f007 fe38 	bl	8008128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLAG_MSG_Pin;
 80004b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLAG_MSG_GPIO_Port, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	481a      	ldr	r0, [pc, #104]	; (8000538 <MX_GPIO_Init+0x12c>)
 80004ce:	f007 fe2b 	bl	8008128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT4_Pin;
 80004d2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_GPIO_Init+0x130>)
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <MX_GPIO_Init+0x128>)
 80004e8:	f007 fe1e 	bl	8008128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT3_Pin;
 80004ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <MX_GPIO_Init+0x134>)
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT3_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <MX_GPIO_Init+0x128>)
 8000502:	f007 fe11 	bl	8008128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2017      	movs	r0, #23
 800050c:	f007 fd5f 	bl	8007fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000510:	2017      	movs	r0, #23
 8000512:	f007 fd78 	bl	8008006 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	2028      	movs	r0, #40	; 0x28
 800051c:	f007 fd57 	bl	8007fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000520:	2028      	movs	r0, #40	; 0x28
 8000522:	f007 fd70 	bl	8008006 <HAL_NVIC_EnableIRQ>

}
 8000526:	bf00      	nop
 8000528:	3720      	adds	r7, #32
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	40010800 	.word	0x40010800
 8000538:	40010c00 	.word	0x40010c00
 800053c:	10210000 	.word	0x10210000
 8000540:	10110000 	.word	0x10110000

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f006 ffd4 	bl	80074f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 fb02 	bl	8000b54 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f7ff ff5c 	bl	800040c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000554:	f7ff fdfa 	bl	800014c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000558:	f006 f8da 	bl	8006710 <MX_SPI1_Init>
  MX_SPI2_Init();
 800055c:	f006 f90e 	bl	800677c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000560:	f006 fed6 	bl	8007310 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000564:	f006 fe82 	bl	800726c <MX_TIM1_Init>
  MX_RTC_Init();
 8000568:	f006 f864 	bl	8006634 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  	ST7735_Init();
 800056c:	f006 fb0e 	bl	8006b8c <ST7735_Init>
	ST7735_SetRotation(r);
 8000570:	4b9b      	ldr	r3, [pc, #620]	; (80007e0 <main+0x29c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f006 fd0d 	bl	8006f94 <ST7735_SetRotation>
	loading();
 800057a:	f000 fc21 	bl	8000dc0 <loading>
	//Init_Card();
	//HAL_TIM_Base_Start_IT(&htim1);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	4898      	ldr	r0, [pc, #608]	; (80007e4 <main+0x2a0>)
 8000582:	f00a f8f1 	bl	800a768 <HAL_TIM_PWM_Start>
	time = 200;
 8000586:	4b98      	ldr	r3, [pc, #608]	; (80007e8 <main+0x2a4>)
 8000588:	22c8      	movs	r2, #200	; 0xc8
 800058a:	601a      	str	r2, [r3, #0]
	HAL_Delay(4750);
 800058c:	f241 208e 	movw	r0, #4750	; 0x128e
 8000590:	f007 f812 	bl	80075b8 <HAL_Delay>
	Menu_Main();
 8000594:	f004 fae2 	bl	8004b5c <Menu_Main>
	HAL_TIM_Base_Start_IT(&htim1);
 8000598:	4894      	ldr	r0, [pc, #592]	; (80007ec <main+0x2a8>)
 800059a:	f00a f843 	bl	800a624 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	BackLight(Get_ADC1());		//BackLight((4095 - Get_ADC1()));
 800059e:	f7ff fe7b 	bl	8000298 <Get_ADC1>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe8f 	bl	80002c8 <BackLight>
    	DataUpdate();			//Подумать про обновление дисплея
 80005aa:	f000 fd63 	bl	8001074 <DataUpdate>
    	if(Number_Menu == 1)	//Главное меню
 80005ae:	4b90      	ldr	r3, [pc, #576]	; (80007f0 <main+0x2ac>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d133      	bne.n	800061e <main+0xda>
    	{
    		if(idMenu[0])
 80005b6:	4b8f      	ldr	r3, [pc, #572]	; (80007f4 <main+0x2b0>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d004      	beq.n	80005c8 <main+0x84>
    		{
    			Menu_Main();
 80005be:	f004 facd 	bl	8004b5c <Menu_Main>
    			idMenu[0] = 0;
 80005c2:	4b8c      	ldr	r3, [pc, #560]	; (80007f4 <main+0x2b0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
    		}
    		if(DOWN)
 80005c8:	4b8b      	ldr	r3, [pc, #556]	; (80007f8 <main+0x2b4>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d010      	beq.n	80005f2 <main+0xae>
    		{
    			choice = Main_Menu(DOWN, UP, time);
 80005d0:	4b89      	ldr	r3, [pc, #548]	; (80007f8 <main+0x2b4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4a89      	ldr	r2, [pc, #548]	; (80007fc <main+0x2b8>)
 80005d6:	7811      	ldrb	r1, [r2, #0]
 80005d8:	4a83      	ldr	r2, [pc, #524]	; (80007e8 <main+0x2a4>)
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fd5d 	bl	800109c <Main_Menu>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b86      	ldr	r3, [pc, #536]	; (8000800 <main+0x2bc>)
 80005e8:	701a      	strb	r2, [r3, #0]
    			DOWN = 0;
 80005ea:	4b83      	ldr	r3, [pc, #524]	; (80007f8 <main+0x2b4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	e1b9      	b.n	8000966 <main+0x422>
    		}
    		else if(UP)
 80005f2:	4b82      	ldr	r3, [pc, #520]	; (80007fc <main+0x2b8>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	f000 81b5 	beq.w	8000966 <main+0x422>
    		{
    			choice = Main_Menu(DOWN, UP, time);
 80005fc:	4b7e      	ldr	r3, [pc, #504]	; (80007f8 <main+0x2b4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4a7e      	ldr	r2, [pc, #504]	; (80007fc <main+0x2b8>)
 8000602:	7811      	ldrb	r1, [r2, #0]
 8000604:	4a78      	ldr	r2, [pc, #480]	; (80007e8 <main+0x2a4>)
 8000606:	6812      	ldr	r2, [r2, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fd47 	bl	800109c <Main_Menu>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b7b      	ldr	r3, [pc, #492]	; (8000800 <main+0x2bc>)
 8000614:	701a      	strb	r2, [r3, #0]
    			UP = 0;
 8000616:	4b79      	ldr	r3, [pc, #484]	; (80007fc <main+0x2b8>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	e1a3      	b.n	8000966 <main+0x422>
    		}
    	}
    	else if(Number_Menu == 2)	//Подменю: "Выводы базового блока"
 800061e:	4b74      	ldr	r3, [pc, #464]	; (80007f0 <main+0x2ac>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d133      	bne.n	800068e <main+0x14a>
    	{
    		if(idMenu[1])
 8000626:	4b73      	ldr	r3, [pc, #460]	; (80007f4 <main+0x2b0>)
 8000628:	785b      	ldrb	r3, [r3, #1]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d004      	beq.n	8000638 <main+0xf4>
    		{
    			Menu_Output();
 800062e:	f004 f963 	bl	80048f8 <Menu_Output>
    			idMenu[1] = 0;
 8000632:	4b70      	ldr	r3, [pc, #448]	; (80007f4 <main+0x2b0>)
 8000634:	2200      	movs	r2, #0
 8000636:	705a      	strb	r2, [r3, #1]
    		}
    		if(DOWN)
 8000638:	4b6f      	ldr	r3, [pc, #444]	; (80007f8 <main+0x2b4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d010      	beq.n	8000662 <main+0x11e>
    		{
    			choice = One_Menu(DOWN, UP, time);
 8000640:	4b6d      	ldr	r3, [pc, #436]	; (80007f8 <main+0x2b4>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4a6d      	ldr	r2, [pc, #436]	; (80007fc <main+0x2b8>)
 8000646:	7811      	ldrb	r1, [r2, #0]
 8000648:	4a67      	ldr	r2, [pc, #412]	; (80007e8 <main+0x2a4>)
 800064a:	6812      	ldr	r2, [r2, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fde5 	bl	800121c <One_Menu>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b6a      	ldr	r3, [pc, #424]	; (8000800 <main+0x2bc>)
 8000658:	701a      	strb	r2, [r3, #0]
    			DOWN = 0;
 800065a:	4b67      	ldr	r3, [pc, #412]	; (80007f8 <main+0x2b4>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e181      	b.n	8000966 <main+0x422>
    		}
    		else if(UP)
 8000662:	4b66      	ldr	r3, [pc, #408]	; (80007fc <main+0x2b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	f000 817d 	beq.w	8000966 <main+0x422>
    		{
    			choice = One_Menu(DOWN, UP, time);
 800066c:	4b62      	ldr	r3, [pc, #392]	; (80007f8 <main+0x2b4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4a62      	ldr	r2, [pc, #392]	; (80007fc <main+0x2b8>)
 8000672:	7811      	ldrb	r1, [r2, #0]
 8000674:	4a5c      	ldr	r2, [pc, #368]	; (80007e8 <main+0x2a4>)
 8000676:	6812      	ldr	r2, [r2, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fdcf 	bl	800121c <One_Menu>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b5f      	ldr	r3, [pc, #380]	; (8000800 <main+0x2bc>)
 8000684:	701a      	strb	r2, [r3, #0]
    			UP = 0;
 8000686:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <main+0x2b8>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	e16b      	b.n	8000966 <main+0x422>
    		}
    	}
    	else if(Number_Menu == 3)	//Подменю: "Подключенные блоки"
 800068e:	4b58      	ldr	r3, [pc, #352]	; (80007f0 <main+0x2ac>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d133      	bne.n	80006fe <main+0x1ba>
    	{
    		if(idMenu[2])
 8000696:	4b57      	ldr	r3, [pc, #348]	; (80007f4 <main+0x2b0>)
 8000698:	789b      	ldrb	r3, [r3, #2]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d004      	beq.n	80006a8 <main+0x164>
    		{
    			Menu_Blocks();
 800069e:	f004 f9a1 	bl	80049e4 <Menu_Blocks>
    			idMenu[2] = 0;
 80006a2:	4b54      	ldr	r3, [pc, #336]	; (80007f4 <main+0x2b0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	709a      	strb	r2, [r3, #2]
    		}
    		if(DOWN)
 80006a8:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <main+0x2b4>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d010      	beq.n	80006d2 <main+0x18e>
    		{
    			choice = Two_Menu(DOWN, UP, time);
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <main+0x2b4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4a51      	ldr	r2, [pc, #324]	; (80007fc <main+0x2b8>)
 80006b6:	7811      	ldrb	r1, [r2, #0]
 80006b8:	4a4b      	ldr	r2, [pc, #300]	; (80007e8 <main+0x2a4>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f851 	bl	8001764 <Two_Menu>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <main+0x2bc>)
 80006c8:	701a      	strb	r2, [r3, #0]
    			DOWN = 0;
 80006ca:	4b4b      	ldr	r3, [pc, #300]	; (80007f8 <main+0x2b4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e149      	b.n	8000966 <main+0x422>
    		}
    		else if(UP)
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <main+0x2b8>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 8145 	beq.w	8000966 <main+0x422>
    		{
    			choice = Two_Menu(DOWN, UP, time);
 80006dc:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <main+0x2b4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4a46      	ldr	r2, [pc, #280]	; (80007fc <main+0x2b8>)
 80006e2:	7811      	ldrb	r1, [r2, #0]
 80006e4:	4a40      	ldr	r2, [pc, #256]	; (80007e8 <main+0x2a4>)
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f83b 	bl	8001764 <Two_Menu>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b43      	ldr	r3, [pc, #268]	; (8000800 <main+0x2bc>)
 80006f4:	701a      	strb	r2, [r3, #0]
    			UP = 0;
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <main+0x2b8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	e133      	b.n	8000966 <main+0x422>
    		}
    	}
    	else if(Number_Menu == 4)	//Подменю: "Аналоговые входы"
 80006fe:	4b3c      	ldr	r3, [pc, #240]	; (80007f0 <main+0x2ac>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d133      	bne.n	800076e <main+0x22a>
    	{
    		if(idMenu[3])
 8000706:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <main+0x2b0>)
 8000708:	78db      	ldrb	r3, [r3, #3]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x1d4>
    		{
    			Menu_Analog();
 800070e:	f004 facd 	bl	8004cac <Menu_Analog>
    			idMenu[3] = 0;
 8000712:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <main+0x2b0>)
 8000714:	2200      	movs	r2, #0
 8000716:	70da      	strb	r2, [r3, #3]
    		}
    		if(DOWN)
 8000718:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <main+0x2b4>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d010      	beq.n	8000742 <main+0x1fe>
    		{
    			choice = Three_Menu(DOWN, UP, time);
 8000720:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <main+0x2b4>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4a35      	ldr	r2, [pc, #212]	; (80007fc <main+0x2b8>)
 8000726:	7811      	ldrb	r1, [r2, #0]
 8000728:	4a2f      	ldr	r2, [pc, #188]	; (80007e8 <main+0x2a4>)
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f9f5 	bl	8001b1c <Three_Menu>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <main+0x2bc>)
 8000738:	701a      	strb	r2, [r3, #0]
    			DOWN = 0;
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <main+0x2b4>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e111      	b.n	8000966 <main+0x422>
    		}
    		else if(UP)
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <main+0x2b8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	f000 810d 	beq.w	8000966 <main+0x422>
    		{
    			choice = Three_Menu(DOWN, UP, time);
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <main+0x2b4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <main+0x2b8>)
 8000752:	7811      	ldrb	r1, [r2, #0]
 8000754:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <main+0x2a4>)
 8000756:	6812      	ldr	r2, [r2, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f9df 	bl	8001b1c <Three_Menu>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <main+0x2bc>)
 8000764:	701a      	strb	r2, [r3, #0]
    			UP = 0;
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <main+0x2b8>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e0fb      	b.n	8000966 <main+0x422>
    		}
    	}
    	else if(Number_Menu == 5)	//Подменю: "Цифровые входы"
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <main+0x2ac>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b05      	cmp	r3, #5
 8000774:	d146      	bne.n	8000804 <main+0x2c0>
    	{
    		if(idMenu[4])
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <main+0x2b0>)
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <main+0x244>
    		{
    			Menu_Digital();
 800077e:	f004 fc73 	bl	8005068 <Menu_Digital>
    			idMenu[4] = 0;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <main+0x2b0>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
    		}
    		if(DOWN)
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <main+0x2b4>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d010      	beq.n	80007b2 <main+0x26e>
    		{
    			choice = Four_Menu(DOWN, UP, time);
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <main+0x2b4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4a19      	ldr	r2, [pc, #100]	; (80007fc <main+0x2b8>)
 8000796:	7811      	ldrb	r1, [r2, #0]
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <main+0x2a4>)
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f001 ff55 	bl	800264c <Four_Menu>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <main+0x2bc>)
 80007a8:	701a      	strb	r2, [r3, #0]
    			DOWN = 0;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <main+0x2b4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e0d9      	b.n	8000966 <main+0x422>
    		}
    		else if(UP)
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <main+0x2b8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f000 80d5 	beq.w	8000966 <main+0x422>
    		{
    			choice = Four_Menu(DOWN, UP, time);
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <main+0x2b4>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <main+0x2b8>)
 80007c2:	7811      	ldrb	r1, [r2, #0]
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <main+0x2a4>)
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 ff3f 	bl	800264c <Four_Menu>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <main+0x2bc>)
 80007d4:	701a      	strb	r2, [r3, #0]
    			UP = 0;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <main+0x2b8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e0c3      	b.n	8000966 <main+0x422>
 80007de:	bf00      	nop
 80007e0:	20000018 	.word	0x20000018
 80007e4:	200002a0 	.word	0x200002a0
 80007e8:	200000bc 	.word	0x200000bc
 80007ec:	20000258 	.word	0x20000258
 80007f0:	20000019 	.word	0x20000019
 80007f4:	200000c4 	.word	0x200000c4
 80007f8:	200000b5 	.word	0x200000b5
 80007fc:	200000b6 	.word	0x200000b6
 8000800:	200000c0 	.word	0x200000c0
    		}
    	}
    	else if(Number_Menu == 6)	//Подменю: "Открытый коллектор"
 8000804:	4b92      	ldr	r3, [pc, #584]	; (8000a50 <main+0x50c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b06      	cmp	r3, #6
 800080a:	d133      	bne.n	8000874 <main+0x330>
    	{
    		if(idMenu[5])
 800080c:	4b91      	ldr	r3, [pc, #580]	; (8000a54 <main+0x510>)
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <main+0x2da>
    		{
    			Menu_OpenDrain();
 8000814:	f004 fdc0 	bl	8005398 <Menu_OpenDrain>
    			idMenu[5] = 0;
 8000818:	4b8e      	ldr	r3, [pc, #568]	; (8000a54 <main+0x510>)
 800081a:	2200      	movs	r2, #0
 800081c:	715a      	strb	r2, [r3, #5]
    		}
    		if(DOWN)
 800081e:	4b8e      	ldr	r3, [pc, #568]	; (8000a58 <main+0x514>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d010      	beq.n	8000848 <main+0x304>
    		{
    			choice = Five_Menu(DOWN, UP, time);
 8000826:	4b8c      	ldr	r3, [pc, #560]	; (8000a58 <main+0x514>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4a8c      	ldr	r2, [pc, #560]	; (8000a5c <main+0x518>)
 800082c:	7811      	ldrb	r1, [r2, #0]
 800082e:	4a8c      	ldr	r2, [pc, #560]	; (8000a60 <main+0x51c>)
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fca2 	bl	800317c <Five_Menu>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	4b89      	ldr	r3, [pc, #548]	; (8000a64 <main+0x520>)
 800083e:	701a      	strb	r2, [r3, #0]
    			DOWN = 0;
 8000840:	4b85      	ldr	r3, [pc, #532]	; (8000a58 <main+0x514>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	e08e      	b.n	8000966 <main+0x422>
    		}
    		else if(UP)
 8000848:	4b84      	ldr	r3, [pc, #528]	; (8000a5c <main+0x518>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	f000 808a 	beq.w	8000966 <main+0x422>
    		{
    			choice = Five_Menu(DOWN, UP, time);
 8000852:	4b81      	ldr	r3, [pc, #516]	; (8000a58 <main+0x514>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4a81      	ldr	r2, [pc, #516]	; (8000a5c <main+0x518>)
 8000858:	7811      	ldrb	r1, [r2, #0]
 800085a:	4a81      	ldr	r2, [pc, #516]	; (8000a60 <main+0x51c>)
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fc8c 	bl	800317c <Five_Menu>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b7e      	ldr	r3, [pc, #504]	; (8000a64 <main+0x520>)
 800086a:	701a      	strb	r2, [r3, #0]
    			UP = 0;
 800086c:	4b7b      	ldr	r3, [pc, #492]	; (8000a5c <main+0x518>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
 8000872:	e078      	b.n	8000966 <main+0x422>
    		}
    	}
    	else if(Number_Menu == 7)	//Подменю: "1-Wire"
 8000874:	4b76      	ldr	r3, [pc, #472]	; (8000a50 <main+0x50c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b07      	cmp	r3, #7
 800087a:	d132      	bne.n	80008e2 <main+0x39e>
    	{
    		if(idMenu[6])
 800087c:	4b75      	ldr	r3, [pc, #468]	; (8000a54 <main+0x510>)
 800087e:	799b      	ldrb	r3, [r3, #6]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d004      	beq.n	800088e <main+0x34a>
    		{
    			Menu_1Wire();
 8000884:	f004 ff66 	bl	8005754 <Menu_1Wire>
    			idMenu[6] = 0;
 8000888:	4b72      	ldr	r3, [pc, #456]	; (8000a54 <main+0x510>)
 800088a:	2200      	movs	r2, #0
 800088c:	719a      	strb	r2, [r3, #6]
    		}
    		if(DOWN)
 800088e:	4b72      	ldr	r3, [pc, #456]	; (8000a58 <main+0x514>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d010      	beq.n	80008b8 <main+0x374>
    		{
    			choice = Six_Menu(DOWN, UP, time);
 8000896:	4b70      	ldr	r3, [pc, #448]	; (8000a58 <main+0x514>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4a70      	ldr	r2, [pc, #448]	; (8000a5c <main+0x518>)
 800089c:	7811      	ldrb	r1, [r2, #0]
 800089e:	4a70      	ldr	r2, [pc, #448]	; (8000a60 <main+0x51c>)
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fa02 	bl	8003cac <Six_Menu>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b6d      	ldr	r3, [pc, #436]	; (8000a64 <main+0x520>)
 80008ae:	701a      	strb	r2, [r3, #0]
    			DOWN = 0;
 80008b0:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <main+0x514>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	e056      	b.n	8000966 <main+0x422>
    		}
    		else if(UP)
 80008b8:	4b68      	ldr	r3, [pc, #416]	; (8000a5c <main+0x518>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d052      	beq.n	8000966 <main+0x422>
    		{
    			choice = Six_Menu(DOWN, UP, time);
 80008c0:	4b65      	ldr	r3, [pc, #404]	; (8000a58 <main+0x514>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4a65      	ldr	r2, [pc, #404]	; (8000a5c <main+0x518>)
 80008c6:	7811      	ldrb	r1, [r2, #0]
 80008c8:	4a65      	ldr	r2, [pc, #404]	; (8000a60 <main+0x51c>)
 80008ca:	6812      	ldr	r2, [r2, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f9ed 	bl	8003cac <Six_Menu>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b63      	ldr	r3, [pc, #396]	; (8000a64 <main+0x520>)
 80008d8:	701a      	strb	r2, [r3, #0]
    			UP = 0;
 80008da:	4b60      	ldr	r3, [pc, #384]	; (8000a5c <main+0x518>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e041      	b.n	8000966 <main+0x422>
    		}
    	}
    	else if(Number_Menu == 8)	//Подменю: "PWM"
 80008e2:	4b5b      	ldr	r3, [pc, #364]	; (8000a50 <main+0x50c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b08      	cmp	r3, #8
 80008e8:	d132      	bne.n	8000950 <main+0x40c>
    	{
    		if(idMenu[7])
 80008ea:	4b5a      	ldr	r3, [pc, #360]	; (8000a54 <main+0x510>)
 80008ec:	79db      	ldrb	r3, [r3, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d004      	beq.n	80008fc <main+0x3b8>
    		{
    			Menu_PWM();
 80008f2:	f004 ffc7 	bl	8005884 <Menu_PWM>
    			idMenu[7] = 0;
 80008f6:	4b57      	ldr	r3, [pc, #348]	; (8000a54 <main+0x510>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	71da      	strb	r2, [r3, #7]
    		}
    		if(DOWN)
 80008fc:	4b56      	ldr	r3, [pc, #344]	; (8000a58 <main+0x514>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d010      	beq.n	8000926 <main+0x3e2>
    		{
    			choice = Seven_Menu(DOWN, UP, time);
 8000904:	4b54      	ldr	r3, [pc, #336]	; (8000a58 <main+0x514>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4a54      	ldr	r2, [pc, #336]	; (8000a5c <main+0x518>)
 800090a:	7811      	ldrb	r1, [r2, #0]
 800090c:	4a54      	ldr	r2, [pc, #336]	; (8000a60 <main+0x51c>)
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fa6d 	bl	8003df0 <Seven_Menu>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b52      	ldr	r3, [pc, #328]	; (8000a64 <main+0x520>)
 800091c:	701a      	strb	r2, [r3, #0]
    			DOWN = 0;
 800091e:	4b4e      	ldr	r3, [pc, #312]	; (8000a58 <main+0x514>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e01f      	b.n	8000966 <main+0x422>
    		}
    		else if(UP)
 8000926:	4b4d      	ldr	r3, [pc, #308]	; (8000a5c <main+0x518>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d01b      	beq.n	8000966 <main+0x422>
    		{
    			choice = Seven_Menu(DOWN, UP, time);
 800092e:	4b4a      	ldr	r3, [pc, #296]	; (8000a58 <main+0x514>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4a4a      	ldr	r2, [pc, #296]	; (8000a5c <main+0x518>)
 8000934:	7811      	ldrb	r1, [r2, #0]
 8000936:	4a4a      	ldr	r2, [pc, #296]	; (8000a60 <main+0x51c>)
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fa58 	bl	8003df0 <Seven_Menu>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <main+0x520>)
 8000946:	701a      	strb	r2, [r3, #0]
    			UP = 0;
 8000948:	4b44      	ldr	r3, [pc, #272]	; (8000a5c <main+0x518>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e00a      	b.n	8000966 <main+0x422>
    		}
    	}
    	else if(Number_Menu == 9)	//Подменю: "RELAY"
 8000950:	4b3f      	ldr	r3, [pc, #252]	; (8000a50 <main+0x50c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b09      	cmp	r3, #9
 8000956:	d106      	bne.n	8000966 <main+0x422>
    	{
    		if(idMenu[8])
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <main+0x510>)
 800095a:	7a1b      	ldrb	r3, [r3, #8]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <main+0x422>
    		{
    			idMenu[8] = 0;
 8000960:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <main+0x510>)
 8000962:	2200      	movs	r2, #0
 8000964:	721a      	strb	r2, [r3, #8]
    		}
    	}
    	if(ENTER)
 8000966:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <main+0x524>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d054      	beq.n	8000a18 <main+0x4d4>
    	{
    		Number_Menu = Item_Selection(choice);
 800096e:	4b3d      	ldr	r3, [pc, #244]	; (8000a64 <main+0x520>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fc1c 	bl	80041b0 <Item_Selection>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <main+0x50c>)
 800097e:	701a      	strb	r2, [r3, #0]
    		if((Number_Menu >= 13) && (Number_Menu <= 20))
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <main+0x50c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b0c      	cmp	r3, #12
 8000986:	d908      	bls.n	800099a <main+0x456>
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <main+0x50c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b14      	cmp	r3, #20
 800098e:	d804      	bhi.n	800099a <main+0x456>
    		{
    			Visible_Analog();
 8000990:	f005 f9f8 	bl	8005d84 <Visible_Analog>
    			Number_Menu = 4;
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <main+0x50c>)
 8000996:	2204      	movs	r2, #4
 8000998:	701a      	strb	r2, [r3, #0]
    		}
    		if((Number_Menu >= 21) && (Number_Menu <= 28))
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <main+0x50c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b14      	cmp	r3, #20
 80009a0:	d909      	bls.n	80009b6 <main+0x472>
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <main+0x50c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b1c      	cmp	r3, #28
 80009a8:	d805      	bhi.n	80009b6 <main+0x472>
    		{
    			Visible_Digital();
 80009aa:	f005 fb21 	bl	8005ff0 <Visible_Digital>
    			Number_Menu = 5;
 80009ae:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <main+0x50c>)
 80009b0:	2205      	movs	r2, #5
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e028      	b.n	8000a08 <main+0x4c4>
    		}
    		else if((Number_Menu >= 29) && (Number_Menu <= 32))
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <main+0x50c>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b1c      	cmp	r3, #28
 80009bc:	d909      	bls.n	80009d2 <main+0x48e>
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <main+0x50c>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b20      	cmp	r3, #32
 80009c4:	d805      	bhi.n	80009d2 <main+0x48e>
    		{
    			Visible_PWM();
 80009c6:	f005 fc05 	bl	80061d4 <Visible_PWM>
    			Number_Menu = 8;
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <main+0x50c>)
 80009cc:	2208      	movs	r2, #8
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	e01a      	b.n	8000a08 <main+0x4c4>
    		}
    		else if((Number_Menu >= 33) && (Number_Menu <= 34))
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <main+0x50c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b20      	cmp	r3, #32
 80009d8:	d909      	bls.n	80009ee <main+0x4aa>
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <main+0x50c>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b22      	cmp	r3, #34	; 0x22
 80009e0:	d805      	bhi.n	80009ee <main+0x4aa>
    		{
    			Visible_1Wire();
 80009e2:	f005 fc99 	bl	8006318 <Visible_1Wire>
    			Number_Menu = 7;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <main+0x50c>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e00c      	b.n	8000a08 <main+0x4c4>
    		}
    		else if((Number_Menu >= 35) && (Number_Menu <= 42))
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <main+0x50c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b22      	cmp	r3, #34	; 0x22
 80009f4:	d908      	bls.n	8000a08 <main+0x4c4>
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <main+0x50c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b2a      	cmp	r3, #42	; 0x2a
 80009fc:	d804      	bhi.n	8000a08 <main+0x4c4>
    		{
    			Visible_OpenDrain();
 80009fe:	f005 fce3 	bl	80063c8 <Visible_OpenDrain>
    			Number_Menu = 6;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <main+0x50c>)
 8000a04:	2206      	movs	r2, #6
 8000a06:	701a      	strb	r2, [r3, #0]
    		}
    		HAL_Delay(time);
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <main+0x51c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f006 fdd3 	bl	80075b8 <HAL_Delay>
    		ENTER = 0;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <main+0x524>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
    	}
    	if(BACK)
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <main+0x528>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f43f adbe 	beq.w	800059e <main+0x5a>
    	{
    		if(Number_Menu == 4)
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <main+0x50c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	d106      	bne.n	8000a38 <main+0x4f4>
    		{
    			Number_Menu = 2;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <main+0x50c>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	701a      	strb	r2, [r3, #0]
    			idMenu[1] = 1;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <main+0x510>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	705a      	strb	r2, [r3, #1]
 8000a36:	e025      	b.n	8000a84 <main+0x540>
    		}
    		else if(Number_Menu == 2)
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <main+0x50c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d117      	bne.n	8000a70 <main+0x52c>
    		{
    			Number_Menu = 1;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <main+0x50c>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
    			idMenu[0] = 1;
 8000a46:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <main+0x510>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e01a      	b.n	8000a84 <main+0x540>
 8000a4e:	bf00      	nop
 8000a50:	20000019 	.word	0x20000019
 8000a54:	200000c4 	.word	0x200000c4
 8000a58:	200000b5 	.word	0x200000b5
 8000a5c:	200000b6 	.word	0x200000b6
 8000a60:	200000bc 	.word	0x200000bc
 8000a64:	200000c0 	.word	0x200000c0
 8000a68:	200000b7 	.word	0x200000b7
 8000a6c:	200000b8 	.word	0x200000b8
    		}
    		else if(Number_Menu == 3)
 8000a70:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <main+0x600>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d105      	bne.n	8000a84 <main+0x540>
    		{
    			Number_Menu = 1;
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <main+0x600>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
    			idMenu[0] = 1;
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <main+0x604>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
    		}
    		if(Number_Menu == 1)
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <main+0x600>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d102      	bne.n	8000a92 <main+0x54e>
    		{
    			idMenu[0] = 1;
 8000a8c:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <main+0x604>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
    		}
    		if(Number_Menu == 5)
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <main+0x600>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	d105      	bne.n	8000aa6 <main+0x562>
    		{
    			Number_Menu = 2;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <main+0x600>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	701a      	strb	r2, [r3, #0]
    			idMenu[1] = 1;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <main+0x604>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	705a      	strb	r2, [r3, #1]
    		}
    		if(Number_Menu == 6)
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <main+0x600>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d105      	bne.n	8000aba <main+0x576>
    		{
    			Number_Menu = 2;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <main+0x600>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	701a      	strb	r2, [r3, #0]
    			idMenu[1] = 1;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <main+0x604>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	705a      	strb	r2, [r3, #1]
    		}
    		if(Number_Menu == 7)
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <main+0x600>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	d105      	bne.n	8000ace <main+0x58a>
    		{
    			Number_Menu = 2;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <main+0x600>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	701a      	strb	r2, [r3, #0]
    			idMenu[1] = 1;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <main+0x604>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	705a      	strb	r2, [r3, #1]
    		}
    		if(Number_Menu == 8)
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <main+0x600>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d105      	bne.n	8000ae2 <main+0x59e>
    		{
    			Number_Menu = 2;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <main+0x600>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	701a      	strb	r2, [r3, #0]
    			idMenu[1] = 1;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <main+0x604>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	705a      	strb	r2, [r3, #1]
    		}
    		if(Number_Menu == 9)
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <main+0x600>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b09      	cmp	r3, #9
 8000ae8:	d105      	bne.n	8000af6 <main+0x5b2>
    		{
    			Number_Menu = 3;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <main+0x600>)
 8000aec:	2203      	movs	r2, #3
 8000aee:	701a      	strb	r2, [r3, #0]
    			idMenu[2] = 1;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <main+0x604>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	709a      	strb	r2, [r3, #2]
    		}
    		if(Number_Menu == 10)
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <main+0x600>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b0a      	cmp	r3, #10
 8000afc:	d105      	bne.n	8000b0a <main+0x5c6>
    		{
    			Number_Menu = 3;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <main+0x600>)
 8000b00:	2203      	movs	r2, #3
 8000b02:	701a      	strb	r2, [r3, #0]
    			idMenu[2] = 1;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <main+0x604>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	709a      	strb	r2, [r3, #2]
    		}
    		if(Number_Menu == 11)
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <main+0x600>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b0b      	cmp	r3, #11
 8000b10:	d105      	bne.n	8000b1e <main+0x5da>
    		{
    			Number_Menu = 3;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <main+0x600>)
 8000b14:	2203      	movs	r2, #3
 8000b16:	701a      	strb	r2, [r3, #0]
    			idMenu[2] = 1;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <main+0x604>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	709a      	strb	r2, [r3, #2]
    		}
    		if(Number_Menu == 12)
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <main+0x600>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b0c      	cmp	r3, #12
 8000b24:	d105      	bne.n	8000b32 <main+0x5ee>
    		{
    			Number_Menu = 3;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <main+0x600>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	701a      	strb	r2, [r3, #0]
    			idMenu[2] = 1;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <main+0x604>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	709a      	strb	r2, [r3, #2]
    		}
    		HAL_Delay(time);
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <main+0x608>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 fd3e 	bl	80075b8 <HAL_Delay>
    		BACK = 0;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <main+0x60c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
    	BackLight(Get_ADC1());		//BackLight((4095 - Get_ADC1()));
 8000b42:	e52c      	b.n	800059e <main+0x5a>
 8000b44:	20000019 	.word	0x20000019
 8000b48:	200000c4 	.word	0x200000c4
 8000b4c:	200000bc 	.word	0x200000bc
 8000b50:	200000b8 	.word	0x200000b8

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5e:	2228      	movs	r2, #40	; 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f00a fca8 	bl	800b4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b84:	2309      	movs	r3, #9
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b92:	2301      	movs	r3, #1
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 fc7a 	bl	80084a8 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bba:	f000 f8fb 	bl	8000db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f007 fee4 	bl	80089a8 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000be6:	f000 f8e5 	bl	8000db4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000bea:	2303      	movs	r3, #3
 8000bec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f008 f859 	bl	8008cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000c08:	f000 f8d4 	bl	8000db4 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3750      	adds	r7, #80	; 0x50
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9)
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c24:	d10f      	bne.n	8000c46 <HAL_GPIO_EXTI_Callback+0x32>
	{
		if((GPIOA->IDR & GPIO_PIN_9) != 1)
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d046      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
		{
			if((GPIOA->IDR & GPIO_PIN_9) != 1)
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d040      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
				DOWN = 1;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e03c      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
		}
	}
	else if (GPIO_Pin == GPIO_PIN_8)
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c4c:	d10f      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0x5a>
	{
		if((GPIOA->IDR & GPIO_PIN_8) != 1)
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d032      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
		{
			if((GPIOA->IDR & GPIO_PIN_8) != 1)
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d02c      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
				UP = 1;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e028      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
		}
	}
	else if (GPIO_Pin == GPIO_PIN_10)
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c74:	d10f      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0x82>
	{
		if((GPIOA->IDR & GPIO_PIN_10) != 1)
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d01e      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
		{
			if((GPIOA->IDR & GPIO_PIN_10) != 1)
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d018      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
				ENTER = 1;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_GPIO_EXTI_Callback+0xc8>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e014      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
		}
	}
	else if (GPIO_Pin == GPIO_PIN_11)
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c9c:	d10f      	bne.n	8000cbe <HAL_GPIO_EXTI_Callback+0xaa>
	{
		if((GPIOA->IDR & GPIO_PIN_11) != 1)
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d00a      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
		{
			if((GPIOA->IDR & GPIO_PIN_11) != 1)
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d004      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
				BACK = 1;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0xac>
		}
	}
	else
	{
		__NOP();
 8000cbe:	bf00      	nop
	}
	What_Time = 0;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	200000b5 	.word	0x200000b5
 8000cd8:	200000b6 	.word	0x200000b6
 8000cdc:	200000b7 	.word	0x200000b7
 8000ce0:	200000b8 	.word	0x200000b8
 8000ce4:	200000d0 	.word	0x200000d0

08000ce8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d130      	bne.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x74>
    {
		What_Time++;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d04:	801a      	strh	r2, [r3, #0]
		What_Date++;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d10:	801a      	strh	r2, [r3, #0]

		if(What_Date == 60)	//Запрос данных каждую 1 минуту
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	2b3c      	cmp	r3, #60	; 0x3c
 8000d18:	d10a      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x48>
        {
			if(Number_Menu == 1)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x40>
			{
				Str_Time();
 8000d22:	f003 fec5 	bl	8004ab0 <Str_Time>
 8000d26:	e000      	b.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x42>
			}
			else
				__NOP();
 8000d28:	bf00      	nop
			What_Date = 0;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	801a      	strh	r2, [r3, #0]
        }
		if(What_Time == 300)	//Запрос данных каждые 5 минут
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d38:	d110      	bne.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x74>
        {
        	//Возврат на главное меню по истечении времени
			if(Number_Menu > 1)
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d908      	bls.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x6c>
			{
				Menu_Main();
 8000d42:	f003 ff0b 	bl	8004b5c <Menu_Main>
				Number_Menu = 1;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
				//idMenu[0] = 0;
				What_Time = 0;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
 8000d52:	e000      	b.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x6e>
			}
			else
				__NOP();
 8000d54:	bf00      	nop
			What_Time = 0;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	200000d0 	.word	0x200000d0
 8000d6c:	200000d2 	.word	0x200000d2
 8000d70:	20000019 	.word	0x20000019

08000d74 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d10c      	bne.n	8000d9e <HAL_SPI_TxRxCpltCallback+0x2a>
	{
		if(hspi1.TxXferCount == 0)
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d107      	bne.n	8000d9e <HAL_SPI_TxRxCpltCallback+0x2a>
		{
			CSM_H;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2110      	movs	r1, #16
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_SPI_TxRxCpltCallback+0x38>)
 8000d94:	f007 fb4c 	bl	8008430 <HAL_GPIO_WritePin>
			flag_output_spi1 = 1;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000200 	.word	0x20000200
 8000dac:	40010800 	.word	0x40010800
 8000db0:	200000b4 	.word	0x200000b4

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <loading>:

uint8_t Count[4] = {0, 0, 0, 0};	//Массив для хранения кол-ва подключенных блоков(Relay, Digital, Dimming, Interface)

//--------------------------------------Комманды контроллера управления-------------------------------------
void loading(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f006 f82a 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(25, 55, "LOADING...", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <loading+0x48>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	9202      	str	r2, [sp, #8]
 8000dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd6:	9201      	str	r2, [sp, #4]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	9200      	str	r2, [sp, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <loading+0x4c>)
 8000de0:	2137      	movs	r1, #55	; 0x37
 8000de2:	2019      	movs	r0, #25
 8000de4:	f005 ff38 	bl	8006c58 <ST7735_DrawString>
  	BackLight(0);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fa6d 	bl	80002c8 <BackLight>
  	HAL_Delay(250);
 8000dee:	20fa      	movs	r0, #250	; 0xfa
 8000df0:	f006 fbe2 	bl	80075b8 <HAL_Delay>
  	BackLight(Get_ADC1());
 8000df4:	f7ff fa50 	bl	8000298 <Get_ADC1>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fa64 	bl	80002c8 <BackLight>
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	0800be00 	.word	0x0800be00

08000e10 <Send_READ_Status_Outputs>:
//Фукция получения данных от управляющего контроллера по spi
//Принимает массивы переменных статуса входов/выходов
void Send_READ_Status_Outputs(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f006 f802 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(3, 0, "DEV", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8000e1c:	4b78      	ldr	r3, [pc, #480]	; (8001000 <Send_READ_Status_Outputs+0x1f0>)
 8000e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e22:	9202      	str	r2, [sp, #8]
 8000e24:	221f      	movs	r2, #31
 8000e26:	9201      	str	r2, [sp, #4]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	9200      	str	r2, [sp, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a75      	ldr	r2, [pc, #468]	; (8001004 <Send_READ_Status_Outputs+0x1f4>)
 8000e30:	2100      	movs	r1, #0
 8000e32:	2003      	movs	r0, #3
 8000e34:	f005 ff10 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(36, 0, "ELECTRONICS", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000e38:	4b71      	ldr	r3, [pc, #452]	; (8001000 <Send_READ_Status_Outputs+0x1f0>)
 8000e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3e:	9202      	str	r2, [sp, #8]
 8000e40:	2200      	movs	r2, #0
 8000e42:	9201      	str	r2, [sp, #4]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	9200      	str	r2, [sp, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a6f      	ldr	r2, [pc, #444]	; (8001008 <Send_READ_Status_Outputs+0x1f8>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2024      	movs	r0, #36	; 0x24
 8000e50:	f005 ff02 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(26, 60, "LOADING...", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8000e54:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <Send_READ_Status_Outputs+0x1f0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	9202      	str	r2, [sp, #8]
 8000e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5e:	9201      	str	r2, [sp, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a69      	ldr	r2, [pc, #420]	; (800100c <Send_READ_Status_Outputs+0x1fc>)
 8000e68:	213c      	movs	r1, #60	; 0x3c
 8000e6a:	201a      	movs	r0, #26
 8000e6c:	f005 fef4 	bl	8006c58 <ST7735_DrawString>

	uint8_t i = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	71fb      	strb	r3, [r7, #7]
	int8_t j = -1;
 8000e74:	23ff      	movs	r3, #255	; 0xff
 8000e76:	71bb      	strb	r3, [r7, #6]

	SPI_tx_buf[0] = MCU_OUTPUT;
 8000e78:	4b65      	ldr	r3, [pc, #404]	; (8001010 <Send_READ_Status_Outputs+0x200>)
 8000e7a:	22c0      	movs	r2, #192	; 0xc0
 8000e7c:	701a      	strb	r2, [r3, #0]
	CSM_L;
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	4864      	ldr	r0, [pc, #400]	; (8001014 <Send_READ_Status_Outputs+0x204>)
 8000e84:	f007 fad4 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4a63      	ldr	r2, [pc, #396]	; (8001018 <Send_READ_Status_Outputs+0x208>)
 8000e8c:	4960      	ldr	r1, [pc, #384]	; (8001010 <Send_READ_Status_Outputs+0x200>)
 8000e8e:	4863      	ldr	r0, [pc, #396]	; (800101c <Send_READ_Status_Outputs+0x20c>)
 8000e90:	f008 fffc 	bl	8009e8c <HAL_SPI_TransmitReceive_IT>
    while(!flag_output_spi1) {;}
 8000e94:	bf00      	nop
 8000e96:	4b62      	ldr	r3, [pc, #392]	; (8001020 <Send_READ_Status_Outputs+0x210>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0fb      	beq.n	8000e96 <Send_READ_Status_Outputs+0x86>
    flag_output_spi1 = 0;
 8000e9e:	4b60      	ldr	r3, [pc, #384]	; (8001020 <Send_READ_Status_Outputs+0x210>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]

	SPI_tx_buf[0] = MCU_NOP;
 8000ea4:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <Send_READ_Status_Outputs+0x200>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]

	while(1)
    {
		CSM_L;
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2110      	movs	r1, #16
 8000eae:	4859      	ldr	r0, [pc, #356]	; (8001014 <Send_READ_Status_Outputs+0x204>)
 8000eb0:	f007 fabe 	bl	8008430 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)SPI_tx_buf, (uint8_t *)SPI_rx_buf, 1);
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	4a58      	ldr	r2, [pc, #352]	; (8001018 <Send_READ_Status_Outputs+0x208>)
 8000eb8:	4955      	ldr	r1, [pc, #340]	; (8001010 <Send_READ_Status_Outputs+0x200>)
 8000eba:	4858      	ldr	r0, [pc, #352]	; (800101c <Send_READ_Status_Outputs+0x20c>)
 8000ebc:	f008 ffe6 	bl	8009e8c <HAL_SPI_TransmitReceive_IT>
		while(!flag_output_spi1) {;}
 8000ec0:	bf00      	nop
 8000ec2:	4b57      	ldr	r3, [pc, #348]	; (8001020 <Send_READ_Status_Outputs+0x210>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0fb      	beq.n	8000ec2 <Send_READ_Status_Outputs+0xb2>
		flag_output_spi1 = 0;
 8000eca:	4b55      	ldr	r3, [pc, #340]	; (8001020 <Send_READ_Status_Outputs+0x210>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
    	if(i == 0)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d125      	bne.n	8000f22 <Send_READ_Status_Outputs+0x112>
    	{
    		if(j != -1)
 8000ed6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ede:	d014      	beq.n	8000f0a <Send_READ_Status_Outputs+0xfa>
    		{
    			Status_AIN[j] = SPI_rx_buf[0];
 8000ee0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <Send_READ_Status_Outputs+0x208>)
 8000ee6:	7811      	ldrb	r1, [r2, #0]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <Send_READ_Status_Outputs+0x214>)
 8000eea:	54d1      	strb	r1, [r2, r3]
    			j++;
 8000eec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	71bb      	strb	r3, [r7, #6]
				if(j > 7)
 8000ef8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	dd04      	ble.n	8000f0a <Send_READ_Status_Outputs+0xfa>
				{
					j = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	71bb      	strb	r3, [r7, #6]
					i++;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	3301      	adds	r3, #1
 8000f08:	71fb      	strb	r3, [r7, #7]
				}
    		}
    		if(j == -1)
 8000f0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f12:	d169      	bne.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
    			j++;
 8000f14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	71bb      	strb	r3, [r7, #6]
 8000f20:	e062      	b.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
    	}
    	else if(i == 1)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d115      	bne.n	8000f54 <Send_READ_Status_Outputs+0x144>
    	{
    		Status_DIN[j] = SPI_rx_buf[0];
 8000f28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f2c:	4a3a      	ldr	r2, [pc, #232]	; (8001018 <Send_READ_Status_Outputs+0x208>)
 8000f2e:	7811      	ldrb	r1, [r2, #0]
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <Send_READ_Status_Outputs+0x218>)
 8000f32:	54d1      	strb	r1, [r2, r3]
			j++;
 8000f34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	71bb      	strb	r3, [r7, #6]
			if(j > 7)
 8000f40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	dd4f      	ble.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
			{
				j = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	71bb      	strb	r3, [r7, #6]
				i++;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	e049      	b.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
			}
    	}
    	else if(i == 2)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d115      	bne.n	8000f86 <Send_READ_Status_Outputs+0x176>
    	{
    		Status_PWM[j] = SPI_rx_buf[0];
 8000f5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <Send_READ_Status_Outputs+0x208>)
 8000f60:	7811      	ldrb	r1, [r2, #0]
 8000f62:	4a32      	ldr	r2, [pc, #200]	; (800102c <Send_READ_Status_Outputs+0x21c>)
 8000f64:	54d1      	strb	r1, [r2, r3]
			j++;
 8000f66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	71bb      	strb	r3, [r7, #6]
			if(j > 7)
 8000f72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	dd36      	ble.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
			{
				j = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71bb      	strb	r3, [r7, #6]
				i++;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	3301      	adds	r3, #1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	e030      	b.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
			}
    	}
    	else if(i == 3)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d115      	bne.n	8000fb8 <Send_READ_Status_Outputs+0x1a8>
    	{
    		Status_OCD[j] = SPI_rx_buf[0];
 8000f8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <Send_READ_Status_Outputs+0x208>)
 8000f92:	7811      	ldrb	r1, [r2, #0]
 8000f94:	4a26      	ldr	r2, [pc, #152]	; (8001030 <Send_READ_Status_Outputs+0x220>)
 8000f96:	54d1      	strb	r1, [r2, r3]
			j++;
 8000f98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	71bb      	strb	r3, [r7, #6]
			if(j > 7)
 8000fa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	dd1d      	ble.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
			{
				j = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	71bb      	strb	r3, [r7, #6]
				i++;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e017      	b.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
			}
    	}
    	else if(i == 4)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d114      	bne.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
    	{
    		Status_1WR[j] = SPI_rx_buf[0];
 8000fbe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <Send_READ_Status_Outputs+0x208>)
 8000fc4:	7811      	ldrb	r1, [r2, #0]
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <Send_READ_Status_Outputs+0x224>)
 8000fc8:	54d1      	strb	r1, [r2, r3]
			j++;
 8000fca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	71bb      	strb	r3, [r7, #6]
			if(j > 7)
 8000fd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	dd04      	ble.n	8000fe8 <Send_READ_Status_Outputs+0x1d8>
			{
				j = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71bb      	strb	r3, [r7, #6]
				i++;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	71fb      	strb	r3, [r7, #7]
			}
    	}
		if(i > 4)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d803      	bhi.n	8000ff6 <Send_READ_Status_Outputs+0x1e6>
		{
			break;
		}
		HAL_Delay(125);
 8000fee:	207d      	movs	r0, #125	; 0x7d
 8000ff0:	f006 fae2 	bl	80075b8 <HAL_Delay>
		CSM_L;
 8000ff4:	e759      	b.n	8000eaa <Send_READ_Status_Outputs+0x9a>
			break;
 8000ff6:	bf00      	nop
    }
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000008 	.word	0x20000008
 8001004:	0800be0c 	.word	0x0800be0c
 8001008:	0800be10 	.word	0x0800be10
 800100c:	0800be00 	.word	0x0800be00
 8001010:	20000120 	.word	0x20000120
 8001014:	40010800 	.word	0x40010800
 8001018:	2000011c 	.word	0x2000011c
 800101c:	20000200 	.word	0x20000200
 8001020:	200000b4 	.word	0x200000b4
 8001024:	20000128 	.word	0x20000128
 8001028:	20000130 	.word	0x20000130
 800102c:	20000138 	.word	0x20000138
 8001030:	20000140 	.word	0x20000140
 8001034:	20000148 	.word	0x20000148

08001038 <Data_Block>:
//Фукция получения данных от управляющего контроллера по spi
//Возвращает кол-во подключенных типовых блоков
uint8_t Data_Block(uint8_t CMD)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]

	CSM_L;
 8001046:	2200      	movs	r2, #0
 8001048:	2110      	movs	r1, #16
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <Data_Block+0x38>)
 800104c:	f007 f9f0 	bl	8008430 <HAL_GPIO_WritePin>
		Data = SPI_RW(CMD);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f8f4 	bl	8000240 <SPI_RW>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
	CSM_H;
 800105c:	2201      	movs	r2, #1
 800105e:	2110      	movs	r1, #16
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <Data_Block+0x38>)
 8001062:	f007 f9e5 	bl	8008430 <HAL_GPIO_WritePin>

	return Data;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40010800 	.word	0x40010800

08001074 <DataUpdate>:
//Фукция обновления данных о состоянии входов/выходов
void DataUpdate(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	if((GPIOB->IDR & GPIO_PIN_10) == 0)
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <DataUpdate+0x24>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d107      	bne.n	8001094 <DataUpdate+0x20>
	{
		Send_READ_Status_Outputs();
 8001084:	f7ff fec4 	bl	8000e10 <Send_READ_Status_Outputs>
		HAL_Delay(2000);
 8001088:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800108c:	f006 fa94 	bl	80075b8 <HAL_Delay>
		Menu_Main();
 8001090:	f003 fd64 	bl	8004b5c <Menu_Main>
	}
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010c00 	.word	0x40010c00

0800109c <Main_Menu>:
//Функция обработки действий главного меню
//Принимает флаги нажатия кнопок "Вниз";"Вверх";
//Принимает переменную времени задержки обработки прерываний
//Возвращает выбранную позицию в списке меню
uint8_t Main_Menu(uint8_t DOWN, uint8_t UP, uint32_t time)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	4603      	mov	r3, r0
 80010a4:	603a      	str	r2, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	460b      	mov	r3, r1
 80010aa:	71bb      	strb	r3, [r7, #6]
	step_DOWN = DOWN;
 80010ac:	4a51      	ldr	r2, [pc, #324]	; (80011f4 <Main_Menu+0x158>)
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	7013      	strb	r3, [r2, #0]
	step_UP = UP;
 80010b2:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <Main_Menu+0x15c>)
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	7013      	strb	r3, [r2, #0]
	if((step_DOWN) || (step_UP))
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <Main_Menu+0x158>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <Main_Menu+0x2e>
 80010c0:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <Main_Menu+0x15c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 808f 	beq.w	80011e8 <Main_Menu+0x14c>
	{
		if(cnt1 == 1)
 80010ca:	4b4c      	ldr	r3, [pc, #304]	; (80011fc <Main_Menu+0x160>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d143      	bne.n	800115a <Main_Menu+0xbe>
		{
			ST7735_DrawString(3, 0, "DEV", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80010d2:	4b4b      	ldr	r3, [pc, #300]	; (8001200 <Main_Menu+0x164>)
 80010d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d8:	9202      	str	r2, [sp, #8]
 80010da:	221f      	movs	r2, #31
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a47      	ldr	r2, [pc, #284]	; (8001204 <Main_Menu+0x168>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	2003      	movs	r0, #3
 80010ea:	f005 fdb5 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(36, 0, "ELECTRONICS", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80010ee:	4b44      	ldr	r3, [pc, #272]	; (8001200 <Main_Menu+0x164>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	9202      	str	r2, [sp, #8]
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a41      	ldr	r2, [pc, #260]	; (8001208 <Main_Menu+0x16c>)
 8001102:	2100      	movs	r1, #0
 8001104:	2024      	movs	r0, #36	; 0x24
 8001106:	f005 fda7 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(30, 36, "OUTPUT", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 800110a:	4b40      	ldr	r3, [pc, #256]	; (800120c <Main_Menu+0x170>)
 800110c:	2200      	movs	r2, #0
 800110e:	9202      	str	r2, [sp, #8]
 8001110:	221f      	movs	r2, #31
 8001112:	9201      	str	r2, [sp, #4]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a3d      	ldr	r2, [pc, #244]	; (8001210 <Main_Menu+0x174>)
 800111c:	2124      	movs	r1, #36	; 0x24
 800111e:	201e      	movs	r0, #30
 8001120:	f005 fd9a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(30, 75, "BLOCKS", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <Main_Menu+0x170>)
 8001126:	2200      	movs	r2, #0
 8001128:	9202      	str	r2, [sp, #8]
 800112a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112e:	9201      	str	r2, [sp, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	9200      	str	r2, [sp, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a37      	ldr	r2, [pc, #220]	; (8001214 <Main_Menu+0x178>)
 8001138:	214b      	movs	r1, #75	; 0x4b
 800113a:	201e      	movs	r0, #30
 800113c:	f005 fd8c 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f006 fa39 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <Main_Menu+0x158>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
			cnt1 = 2;
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <Main_Menu+0x160>)
 800114e:	2202      	movs	r2, #2
 8001150:	701a      	strb	r2, [r3, #0]
			Check = 1;
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <Main_Menu+0x17c>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e046      	b.n	80011e8 <Main_Menu+0x14c>
		}
		else if(cnt1 == 2)
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <Main_Menu+0x160>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d142      	bne.n	80011e8 <Main_Menu+0x14c>
		{
			ST7735_DrawString(3, 0, "DEV", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <Main_Menu+0x164>)
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	9202      	str	r2, [sp, #8]
 800116a:	221f      	movs	r2, #31
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	9200      	str	r2, [sp, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a23      	ldr	r2, [pc, #140]	; (8001204 <Main_Menu+0x168>)
 8001176:	2100      	movs	r1, #0
 8001178:	2003      	movs	r0, #3
 800117a:	f005 fd6d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(36, 0, "ELECTRONICS", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <Main_Menu+0x164>)
 8001180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001184:	9202      	str	r2, [sp, #8]
 8001186:	2200      	movs	r2, #0
 8001188:	9201      	str	r2, [sp, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	9200      	str	r2, [sp, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <Main_Menu+0x16c>)
 8001192:	2100      	movs	r1, #0
 8001194:	2024      	movs	r0, #36	; 0x24
 8001196:	f005 fd5f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(30, 36, "OUTPUT", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <Main_Menu+0x170>)
 800119c:	2200      	movs	r2, #0
 800119e:	9202      	str	r2, [sp, #8]
 80011a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a4:	9201      	str	r2, [sp, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	9200      	str	r2, [sp, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a18      	ldr	r2, [pc, #96]	; (8001210 <Main_Menu+0x174>)
 80011ae:	2124      	movs	r1, #36	; 0x24
 80011b0:	201e      	movs	r0, #30
 80011b2:	f005 fd51 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(30, 75, "BLOCKS", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <Main_Menu+0x170>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	9202      	str	r2, [sp, #8]
 80011bc:	221f      	movs	r2, #31
 80011be:	9201      	str	r2, [sp, #4]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	9200      	str	r2, [sp, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <Main_Menu+0x178>)
 80011c8:	214b      	movs	r1, #75	; 0x4b
 80011ca:	201e      	movs	r0, #30
 80011cc:	f005 fd44 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f006 f9f1 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <Main_Menu+0x158>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
			cnt1 = 1;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <Main_Menu+0x160>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
			Check = 2;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <Main_Menu+0x17c>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	701a      	strb	r2, [r3, #0]
		}
	}
	return Check;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <Main_Menu+0x17c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000121 	.word	0x20000121
 80011f8:	20000122 	.word	0x20000122
 80011fc:	2000001a 	.word	0x2000001a
 8001200:	20000008 	.word	0x20000008
 8001204:	0800be0c 	.word	0x0800be0c
 8001208:	0800be10 	.word	0x0800be10
 800120c:	20000010 	.word	0x20000010
 8001210:	0800be1c 	.word	0x0800be1c
 8001214:	0800be24 	.word	0x0800be24
 8001218:	20000123 	.word	0x20000123

0800121c <One_Menu>:
//Функция обработки действий подменю: "Выводы базового блока"
//Принимает флаги нажатия кнопок "Вниз";"Вверх";
//Принимает переменную времени задержки обработки прерываний
//Возвращает выбранную позицию в списке меню
uint8_t One_Menu(uint8_t DOWN, uint8_t UP, uint32_t time)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af04      	add	r7, sp, #16
 8001222:	4603      	mov	r3, r0
 8001224:	603a      	str	r2, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	460b      	mov	r3, r1
 800122a:	71bb      	strb	r3, [r7, #6]
	step_DOWN = DOWN;
 800122c:	4a7a      	ldr	r2, [pc, #488]	; (8001418 <One_Menu+0x1fc>)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	7013      	strb	r3, [r2, #0]
	step_UP = UP;
 8001232:	4a7a      	ldr	r2, [pc, #488]	; (800141c <One_Menu+0x200>)
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	7013      	strb	r3, [r2, #0]
	if((step_DOWN) || (step_UP))
 8001238:	4b77      	ldr	r3, [pc, #476]	; (8001418 <One_Menu+0x1fc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d104      	bne.n	800124a <One_Menu+0x2e>
 8001240:	4b76      	ldr	r3, [pc, #472]	; (800141c <One_Menu+0x200>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 826f 	beq.w	8001728 <One_Menu+0x50c>
	{
		if(((cnt1 == 1) && (step_DOWN == 1)) || ((cnt2 == 1) && step_UP == 1))
 800124a:	4b75      	ldr	r3, [pc, #468]	; (8001420 <One_Menu+0x204>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d103      	bne.n	800125a <One_Menu+0x3e>
 8001252:	4b71      	ldr	r3, [pc, #452]	; (8001418 <One_Menu+0x1fc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d007      	beq.n	800126a <One_Menu+0x4e>
 800125a:	4b72      	ldr	r3, [pc, #456]	; (8001424 <One_Menu+0x208>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d166      	bne.n	8001330 <One_Menu+0x114>
 8001262:	4b6e      	ldr	r3, [pc, #440]	; (800141c <One_Menu+0x200>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d162      	bne.n	8001330 <One_Menu+0x114>
		{
			ST7735_DrawString(42, 0, "OUTPUTS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <One_Menu+0x20c>)
 800126c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001270:	9202      	str	r2, [sp, #8]
 8001272:	221f      	movs	r2, #31
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	9200      	str	r2, [sp, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6b      	ldr	r2, [pc, #428]	; (800142c <One_Menu+0x210>)
 800127e:	2100      	movs	r1, #0
 8001280:	202a      	movs	r0, #42	; 0x2a
 8001282:	f005 fce9 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- ANALOG", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 8001286:	4b68      	ldr	r3, [pc, #416]	; (8001428 <One_Menu+0x20c>)
 8001288:	2200      	movs	r2, #0
 800128a:	9202      	str	r2, [sp, #8]
 800128c:	221f      	movs	r2, #31
 800128e:	9201      	str	r2, [sp, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a66      	ldr	r2, [pc, #408]	; (8001430 <One_Menu+0x214>)
 8001298:	211e      	movs	r1, #30
 800129a:	2000      	movs	r0, #0
 800129c:	f005 fcdc 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 48, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80012a0:	4b61      	ldr	r3, [pc, #388]	; (8001428 <One_Menu+0x20c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	9202      	str	r2, [sp, #8]
 80012a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012aa:	9201      	str	r2, [sp, #4]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	9200      	str	r2, [sp, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a60      	ldr	r2, [pc, #384]	; (8001434 <One_Menu+0x218>)
 80012b4:	2130      	movs	r1, #48	; 0x30
 80012b6:	2000      	movs	r0, #0
 80012b8:	f005 fcce 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 66, "- OPEN DRAIN", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80012bc:	4b5a      	ldr	r3, [pc, #360]	; (8001428 <One_Menu+0x20c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	9202      	str	r2, [sp, #8]
 80012c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c6:	9201      	str	r2, [sp, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a5a      	ldr	r2, [pc, #360]	; (8001438 <One_Menu+0x21c>)
 80012d0:	2142      	movs	r1, #66	; 0x42
 80012d2:	2000      	movs	r0, #0
 80012d4:	f005 fcc0 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 84, "- 1-WIRE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80012d8:	4b53      	ldr	r3, [pc, #332]	; (8001428 <One_Menu+0x20c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	9202      	str	r2, [sp, #8]
 80012de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a54      	ldr	r2, [pc, #336]	; (800143c <One_Menu+0x220>)
 80012ec:	2154      	movs	r1, #84	; 0x54
 80012ee:	2000      	movs	r0, #0
 80012f0:	f005 fcb2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 102, "- PWM", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <One_Menu+0x20c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	9202      	str	r2, [sp, #8]
 80012fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	9200      	str	r2, [sp, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a4e      	ldr	r2, [pc, #312]	; (8001440 <One_Menu+0x224>)
 8001308:	2166      	movs	r1, #102	; 0x66
 800130a:	2000      	movs	r0, #0
 800130c:	f005 fca4 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	f006 f951 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001316:	4b40      	ldr	r3, [pc, #256]	; (8001418 <One_Menu+0x1fc>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
			cnt1 = 2;
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <One_Menu+0x204>)
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
			cnt2 = 5;
 8001322:	4b40      	ldr	r3, [pc, #256]	; (8001424 <One_Menu+0x208>)
 8001324:	2205      	movs	r2, #5
 8001326:	701a      	strb	r2, [r3, #0]
			Check = 3;
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <One_Menu+0x228>)
 800132a:	2203      	movs	r2, #3
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e1fb      	b.n	8001728 <One_Menu+0x50c>
		}
		else if(((cnt1 == 2) && (step_DOWN == 1)) || ((cnt2 == 2) && step_UP == 1))
 8001330:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <One_Menu+0x204>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d103      	bne.n	8001340 <One_Menu+0x124>
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <One_Menu+0x1fc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d007      	beq.n	8001350 <One_Menu+0x134>
 8001340:	4b38      	ldr	r3, [pc, #224]	; (8001424 <One_Menu+0x208>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d17f      	bne.n	8001448 <One_Menu+0x22c>
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <One_Menu+0x200>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d17b      	bne.n	8001448 <One_Menu+0x22c>
		{
			ST7735_DrawString(42, 0, "OUTPUTS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <One_Menu+0x20c>)
 8001352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001356:	9202      	str	r2, [sp, #8]
 8001358:	221f      	movs	r2, #31
 800135a:	9201      	str	r2, [sp, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a32      	ldr	r2, [pc, #200]	; (800142c <One_Menu+0x210>)
 8001364:	2100      	movs	r1, #0
 8001366:	202a      	movs	r0, #42	; 0x2a
 8001368:	f005 fc76 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- ANALOG", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <One_Menu+0x20c>)
 800136e:	2200      	movs	r2, #0
 8001370:	9202      	str	r2, [sp, #8]
 8001372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <One_Menu+0x214>)
 8001380:	211e      	movs	r1, #30
 8001382:	2000      	movs	r0, #0
 8001384:	f005 fc68 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 48, "- DIGITAL", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <One_Menu+0x20c>)
 800138a:	2200      	movs	r2, #0
 800138c:	9202      	str	r2, [sp, #8]
 800138e:	221f      	movs	r2, #31
 8001390:	9201      	str	r2, [sp, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a26      	ldr	r2, [pc, #152]	; (8001434 <One_Menu+0x218>)
 800139a:	2130      	movs	r1, #48	; 0x30
 800139c:	2000      	movs	r0, #0
 800139e:	f005 fc5b 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 66, "- OPEN DRAIN", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <One_Menu+0x20c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	9202      	str	r2, [sp, #8]
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	9201      	str	r2, [sp, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a20      	ldr	r2, [pc, #128]	; (8001438 <One_Menu+0x21c>)
 80013b6:	2142      	movs	r1, #66	; 0x42
 80013b8:	2000      	movs	r0, #0
 80013ba:	f005 fc4d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 84, "- 1-WIRE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <One_Menu+0x20c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	9202      	str	r2, [sp, #8]
 80013c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1a      	ldr	r2, [pc, #104]	; (800143c <One_Menu+0x220>)
 80013d2:	2154      	movs	r1, #84	; 0x54
 80013d4:	2000      	movs	r0, #0
 80013d6:	f005 fc3f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 102, "- PWM", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <One_Menu+0x20c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	9202      	str	r2, [sp, #8]
 80013e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	9200      	str	r2, [sp, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <One_Menu+0x224>)
 80013ee:	2166      	movs	r1, #102	; 0x66
 80013f0:	2000      	movs	r0, #0
 80013f2:	f005 fc31 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80013f6:	6838      	ldr	r0, [r7, #0]
 80013f8:	f006 f8de 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <One_Menu+0x1fc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
			cnt1 = 3;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <One_Menu+0x204>)
 8001404:	2203      	movs	r2, #3
 8001406:	701a      	strb	r2, [r3, #0]
			cnt2 = 1;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <One_Menu+0x208>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
			Check = 4;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <One_Menu+0x228>)
 8001410:	2204      	movs	r2, #4
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e188      	b.n	8001728 <One_Menu+0x50c>
 8001416:	bf00      	nop
 8001418:	20000121 	.word	0x20000121
 800141c:	20000122 	.word	0x20000122
 8001420:	2000001a 	.word	0x2000001a
 8001424:	2000001b 	.word	0x2000001b
 8001428:	20000008 	.word	0x20000008
 800142c:	0800be2c 	.word	0x0800be2c
 8001430:	0800be34 	.word	0x0800be34
 8001434:	0800be40 	.word	0x0800be40
 8001438:	0800be4c 	.word	0x0800be4c
 800143c:	0800be5c 	.word	0x0800be5c
 8001440:	0800be68 	.word	0x0800be68
 8001444:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 3) && (step_DOWN == 1)) || ((cnt2 == 3) && step_UP == 1))
 8001448:	4b72      	ldr	r3, [pc, #456]	; (8001614 <One_Menu+0x3f8>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d103      	bne.n	8001458 <One_Menu+0x23c>
 8001450:	4b71      	ldr	r3, [pc, #452]	; (8001618 <One_Menu+0x3fc>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d007      	beq.n	8001468 <One_Menu+0x24c>
 8001458:	4b70      	ldr	r3, [pc, #448]	; (800161c <One_Menu+0x400>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d166      	bne.n	800152e <One_Menu+0x312>
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <One_Menu+0x404>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d162      	bne.n	800152e <One_Menu+0x312>
		{
			ST7735_DrawString(42, 0, "OUTPUTS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001468:	4b6e      	ldr	r3, [pc, #440]	; (8001624 <One_Menu+0x408>)
 800146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146e:	9202      	str	r2, [sp, #8]
 8001470:	221f      	movs	r2, #31
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	9200      	str	r2, [sp, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6b      	ldr	r2, [pc, #428]	; (8001628 <One_Menu+0x40c>)
 800147c:	2100      	movs	r1, #0
 800147e:	202a      	movs	r0, #42	; 0x2a
 8001480:	f005 fbea 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- ANALOG", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001484:	4b67      	ldr	r3, [pc, #412]	; (8001624 <One_Menu+0x408>)
 8001486:	2200      	movs	r2, #0
 8001488:	9202      	str	r2, [sp, #8]
 800148a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148e:	9201      	str	r2, [sp, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	9200      	str	r2, [sp, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a65      	ldr	r2, [pc, #404]	; (800162c <One_Menu+0x410>)
 8001498:	211e      	movs	r1, #30
 800149a:	2000      	movs	r0, #0
 800149c:	f005 fbdc 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 48, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80014a0:	4b60      	ldr	r3, [pc, #384]	; (8001624 <One_Menu+0x408>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	9202      	str	r2, [sp, #8]
 80014a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a5f      	ldr	r2, [pc, #380]	; (8001630 <One_Menu+0x414>)
 80014b4:	2130      	movs	r1, #48	; 0x30
 80014b6:	2000      	movs	r0, #0
 80014b8:	f005 fbce 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 66, "- OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 80014bc:	4b59      	ldr	r3, [pc, #356]	; (8001624 <One_Menu+0x408>)
 80014be:	2200      	movs	r2, #0
 80014c0:	9202      	str	r2, [sp, #8]
 80014c2:	221f      	movs	r2, #31
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a59      	ldr	r2, [pc, #356]	; (8001634 <One_Menu+0x418>)
 80014ce:	2142      	movs	r1, #66	; 0x42
 80014d0:	2000      	movs	r0, #0
 80014d2:	f005 fbc1 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 84, "- 1-WIRE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80014d6:	4b53      	ldr	r3, [pc, #332]	; (8001624 <One_Menu+0x408>)
 80014d8:	2200      	movs	r2, #0
 80014da:	9202      	str	r2, [sp, #8]
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	9201      	str	r2, [sp, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	9200      	str	r2, [sp, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a53      	ldr	r2, [pc, #332]	; (8001638 <One_Menu+0x41c>)
 80014ea:	2154      	movs	r1, #84	; 0x54
 80014ec:	2000      	movs	r0, #0
 80014ee:	f005 fbb3 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 102, "- PWM", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80014f2:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <One_Menu+0x408>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	9202      	str	r2, [sp, #8]
 80014f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fc:	9201      	str	r2, [sp, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a4d      	ldr	r2, [pc, #308]	; (800163c <One_Menu+0x420>)
 8001506:	2166      	movs	r1, #102	; 0x66
 8001508:	2000      	movs	r0, #0
 800150a:	f005 fba5 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f006 f852 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <One_Menu+0x3fc>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
			cnt1 = 4;
 800151a:	4b3e      	ldr	r3, [pc, #248]	; (8001614 <One_Menu+0x3f8>)
 800151c:	2204      	movs	r2, #4
 800151e:	701a      	strb	r2, [r3, #0]
			cnt2 = 2;
 8001520:	4b3e      	ldr	r3, [pc, #248]	; (800161c <One_Menu+0x400>)
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
			Check = 5;
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <One_Menu+0x424>)
 8001528:	2205      	movs	r2, #5
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	e0fc      	b.n	8001728 <One_Menu+0x50c>
		}
		else if(((cnt1 == 4) && (step_DOWN == 1)) || ((cnt2 == 4) && step_UP == 1))
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <One_Menu+0x3f8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d103      	bne.n	800153e <One_Menu+0x322>
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <One_Menu+0x3fc>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d007      	beq.n	800154e <One_Menu+0x332>
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <One_Menu+0x400>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d17e      	bne.n	8001644 <One_Menu+0x428>
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <One_Menu+0x404>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d17a      	bne.n	8001644 <One_Menu+0x428>
		{
			ST7735_DrawString(42, 0, "OUTPUTS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <One_Menu+0x408>)
 8001550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001554:	9202      	str	r2, [sp, #8]
 8001556:	221f      	movs	r2, #31
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a31      	ldr	r2, [pc, #196]	; (8001628 <One_Menu+0x40c>)
 8001562:	2100      	movs	r1, #0
 8001564:	202a      	movs	r0, #42	; 0x2a
 8001566:	f005 fb77 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- ANALOG", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <One_Menu+0x408>)
 800156c:	2200      	movs	r2, #0
 800156e:	9202      	str	r2, [sp, #8]
 8001570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001574:	9201      	str	r2, [sp, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	9200      	str	r2, [sp, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a2b      	ldr	r2, [pc, #172]	; (800162c <One_Menu+0x410>)
 800157e:	211e      	movs	r1, #30
 8001580:	2000      	movs	r0, #0
 8001582:	f005 fb69 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 48, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <One_Menu+0x408>)
 8001588:	2200      	movs	r2, #0
 800158a:	9202      	str	r2, [sp, #8]
 800158c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001590:	9201      	str	r2, [sp, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	9200      	str	r2, [sp, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a25      	ldr	r2, [pc, #148]	; (8001630 <One_Menu+0x414>)
 800159a:	2130      	movs	r1, #48	; 0x30
 800159c:	2000      	movs	r0, #0
 800159e:	f005 fb5b 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 66, "- OPEN DRAIN", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <One_Menu+0x408>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	9202      	str	r2, [sp, #8]
 80015a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ac:	9201      	str	r2, [sp, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	9200      	str	r2, [sp, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <One_Menu+0x418>)
 80015b6:	2142      	movs	r1, #66	; 0x42
 80015b8:	2000      	movs	r0, #0
 80015ba:	f005 fb4d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 84, "- 1-WIRE", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <One_Menu+0x408>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	9202      	str	r2, [sp, #8]
 80015c4:	221f      	movs	r2, #31
 80015c6:	9201      	str	r2, [sp, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1a      	ldr	r2, [pc, #104]	; (8001638 <One_Menu+0x41c>)
 80015d0:	2154      	movs	r1, #84	; 0x54
 80015d2:	2000      	movs	r0, #0
 80015d4:	f005 fb40 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 102, "- PWM", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <One_Menu+0x408>)
 80015da:	2200      	movs	r2, #0
 80015dc:	9202      	str	r2, [sp, #8]
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	9200      	str	r2, [sp, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <One_Menu+0x420>)
 80015ec:	2166      	movs	r1, #102	; 0x66
 80015ee:	2000      	movs	r0, #0
 80015f0:	f005 fb32 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f005 ffdf 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <One_Menu+0x3fc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
			cnt1 = 5;
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <One_Menu+0x3f8>)
 8001602:	2205      	movs	r2, #5
 8001604:	701a      	strb	r2, [r3, #0]
			cnt2 = 3;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <One_Menu+0x400>)
 8001608:	2203      	movs	r2, #3
 800160a:	701a      	strb	r2, [r3, #0]
			Check = 6;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <One_Menu+0x424>)
 800160e:	2206      	movs	r2, #6
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e089      	b.n	8001728 <One_Menu+0x50c>
 8001614:	2000001a 	.word	0x2000001a
 8001618:	20000121 	.word	0x20000121
 800161c:	2000001b 	.word	0x2000001b
 8001620:	20000122 	.word	0x20000122
 8001624:	20000008 	.word	0x20000008
 8001628:	0800be2c 	.word	0x0800be2c
 800162c:	0800be34 	.word	0x0800be34
 8001630:	0800be40 	.word	0x0800be40
 8001634:	0800be4c 	.word	0x0800be4c
 8001638:	0800be5c 	.word	0x0800be5c
 800163c:	0800be68 	.word	0x0800be68
 8001640:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 5) && (step_DOWN == 1)) || ((cnt2 == 5) && step_UP == 1))
 8001644:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <One_Menu+0x518>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b05      	cmp	r3, #5
 800164a:	d103      	bne.n	8001654 <One_Menu+0x438>
 800164c:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <One_Menu+0x51c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d007      	beq.n	8001664 <One_Menu+0x448>
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <One_Menu+0x520>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d165      	bne.n	8001728 <One_Menu+0x50c>
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <One_Menu+0x524>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d161      	bne.n	8001728 <One_Menu+0x50c>
		{
			ST7735_DrawString(42, 0, "OUTPUTS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <One_Menu+0x528>)
 8001666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166a:	9202      	str	r2, [sp, #8]
 800166c:	221f      	movs	r2, #31
 800166e:	9201      	str	r2, [sp, #4]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	9200      	str	r2, [sp, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a34      	ldr	r2, [pc, #208]	; (8001748 <One_Menu+0x52c>)
 8001678:	2100      	movs	r1, #0
 800167a:	202a      	movs	r0, #42	; 0x2a
 800167c:	f005 faec 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- ANALOG", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <One_Menu+0x528>)
 8001682:	2200      	movs	r2, #0
 8001684:	9202      	str	r2, [sp, #8]
 8001686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168a:	9201      	str	r2, [sp, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	9200      	str	r2, [sp, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2e      	ldr	r2, [pc, #184]	; (800174c <One_Menu+0x530>)
 8001694:	211e      	movs	r1, #30
 8001696:	2000      	movs	r0, #0
 8001698:	f005 fade 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 48, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <One_Menu+0x528>)
 800169e:	2200      	movs	r2, #0
 80016a0:	9202      	str	r2, [sp, #8]
 80016a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a6:	9201      	str	r2, [sp, #4]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a28      	ldr	r2, [pc, #160]	; (8001750 <One_Menu+0x534>)
 80016b0:	2130      	movs	r1, #48	; 0x30
 80016b2:	2000      	movs	r0, #0
 80016b4:	f005 fad0 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 66, "- OPEN DRAIN", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <One_Menu+0x528>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	9202      	str	r2, [sp, #8]
 80016be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c2:	9201      	str	r2, [sp, #4]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	9200      	str	r2, [sp, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a22      	ldr	r2, [pc, #136]	; (8001754 <One_Menu+0x538>)
 80016cc:	2142      	movs	r1, #66	; 0x42
 80016ce:	2000      	movs	r0, #0
 80016d0:	f005 fac2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 84, "- 1-WIRE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <One_Menu+0x528>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	9202      	str	r2, [sp, #8]
 80016da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016de:	9201      	str	r2, [sp, #4]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	9200      	str	r2, [sp, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <One_Menu+0x53c>)
 80016e8:	2154      	movs	r1, #84	; 0x54
 80016ea:	2000      	movs	r0, #0
 80016ec:	f005 fab4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 102, "- PWM", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <One_Menu+0x528>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	9202      	str	r2, [sp, #8]
 80016f6:	221f      	movs	r2, #31
 80016f8:	9201      	str	r2, [sp, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <One_Menu+0x540>)
 8001702:	2166      	movs	r1, #102	; 0x66
 8001704:	2000      	movs	r0, #0
 8001706:	f005 faa7 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 800170a:	6838      	ldr	r0, [r7, #0]
 800170c:	f005 ff54 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <One_Menu+0x51c>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
			cnt1 = 1;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <One_Menu+0x518>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
			cnt2 = 4;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <One_Menu+0x520>)
 800171e:	2204      	movs	r2, #4
 8001720:	701a      	strb	r2, [r3, #0]
			Check = 7;
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <One_Menu+0x544>)
 8001724:	2207      	movs	r2, #7
 8001726:	701a      	strb	r2, [r3, #0]
		}
	}
	return Check;
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <One_Menu+0x544>)
 800172a:	781b      	ldrb	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000001a 	.word	0x2000001a
 8001738:	20000121 	.word	0x20000121
 800173c:	2000001b 	.word	0x2000001b
 8001740:	20000122 	.word	0x20000122
 8001744:	20000008 	.word	0x20000008
 8001748:	0800be2c 	.word	0x0800be2c
 800174c:	0800be34 	.word	0x0800be34
 8001750:	0800be40 	.word	0x0800be40
 8001754:	0800be4c 	.word	0x0800be4c
 8001758:	0800be5c 	.word	0x0800be5c
 800175c:	0800be68 	.word	0x0800be68
 8001760:	20000123 	.word	0x20000123

08001764 <Two_Menu>:
//Функция обработки действий подменю: "Подключенные блоки"
//Принимает флаги нажатия кнопок "Вниз";"Вверх";
//Принимает переменную времени задержки обработки прерываний
//Возвращает выбранную позицию в списке меню
uint8_t Two_Menu(uint8_t DOWN, uint8_t UP, uint32_t time)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af04      	add	r7, sp, #16
 800176a:	4603      	mov	r3, r0
 800176c:	603a      	str	r2, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	460b      	mov	r3, r1
 8001772:	71bb      	strb	r3, [r7, #6]
	step_DOWN = DOWN;
 8001774:	4a9e      	ldr	r2, [pc, #632]	; (80019f0 <Two_Menu+0x28c>)
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	7013      	strb	r3, [r2, #0]
	step_UP = UP;
 800177a:	4a9e      	ldr	r2, [pc, #632]	; (80019f4 <Two_Menu+0x290>)
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	7013      	strb	r3, [r2, #0]
	if((step_DOWN) || (step_UP))
 8001780:	4b9b      	ldr	r3, [pc, #620]	; (80019f0 <Two_Menu+0x28c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d104      	bne.n	8001792 <Two_Menu+0x2e>
 8001788:	4b9a      	ldr	r3, [pc, #616]	; (80019f4 <Two_Menu+0x290>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 81a9 	beq.w	8001ae4 <Two_Menu+0x380>
	{
		if(((cnt1 == 1) && (step_DOWN == 1)) || ((cnt2 == 1) && step_UP == 1))
 8001792:	4b99      	ldr	r3, [pc, #612]	; (80019f8 <Two_Menu+0x294>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d103      	bne.n	80017a2 <Two_Menu+0x3e>
 800179a:	4b95      	ldr	r3, [pc, #596]	; (80019f0 <Two_Menu+0x28c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d007      	beq.n	80017b2 <Two_Menu+0x4e>
 80017a2:	4b96      	ldr	r3, [pc, #600]	; (80019fc <Two_Menu+0x298>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d158      	bne.n	800185c <Two_Menu+0xf8>
 80017aa:	4b92      	ldr	r3, [pc, #584]	; (80019f4 <Two_Menu+0x290>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d154      	bne.n	800185c <Two_Menu+0xf8>
		{
			ST7735_DrawString(48, 0, "BLOCKS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80017b2:	4b93      	ldr	r3, [pc, #588]	; (8001a00 <Two_Menu+0x29c>)
 80017b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b8:	9202      	str	r2, [sp, #8]
 80017ba:	221f      	movs	r2, #31
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	9200      	str	r2, [sp, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a8f      	ldr	r2, [pc, #572]	; (8001a04 <Two_Menu+0x2a0>)
 80017c6:	2100      	movs	r1, #0
 80017c8:	2030      	movs	r0, #48	; 0x30
 80017ca:	f005 fa45 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 36, "- RELAY", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 80017ce:	4b8c      	ldr	r3, [pc, #560]	; (8001a00 <Two_Menu+0x29c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	9202      	str	r2, [sp, #8]
 80017d4:	221f      	movs	r2, #31
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a8a      	ldr	r2, [pc, #552]	; (8001a08 <Two_Menu+0x2a4>)
 80017e0:	2124      	movs	r1, #36	; 0x24
 80017e2:	2000      	movs	r0, #0
 80017e4:	f005 fa38 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 54, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80017e8:	4b85      	ldr	r3, [pc, #532]	; (8001a00 <Two_Menu+0x29c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	9202      	str	r2, [sp, #8]
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f2:	9201      	str	r2, [sp, #4]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a84      	ldr	r2, [pc, #528]	; (8001a0c <Two_Menu+0x2a8>)
 80017fc:	2136      	movs	r1, #54	; 0x36
 80017fe:	2000      	movs	r0, #0
 8001800:	f005 fa2a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 72, "- DIMMING", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001804:	4b7e      	ldr	r3, [pc, #504]	; (8001a00 <Two_Menu+0x29c>)
 8001806:	2200      	movs	r2, #0
 8001808:	9202      	str	r2, [sp, #8]
 800180a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	9200      	str	r2, [sp, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7e      	ldr	r2, [pc, #504]	; (8001a10 <Two_Menu+0x2ac>)
 8001818:	2148      	movs	r1, #72	; 0x48
 800181a:	2000      	movs	r0, #0
 800181c:	f005 fa1c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- INTERFACE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001820:	4b77      	ldr	r3, [pc, #476]	; (8001a00 <Two_Menu+0x29c>)
 8001822:	2200      	movs	r2, #0
 8001824:	9202      	str	r2, [sp, #8]
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	9201      	str	r2, [sp, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a78      	ldr	r2, [pc, #480]	; (8001a14 <Two_Menu+0x2b0>)
 8001834:	215a      	movs	r1, #90	; 0x5a
 8001836:	2000      	movs	r0, #0
 8001838:	f005 fa0e 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 800183c:	6838      	ldr	r0, [r7, #0]
 800183e:	f005 febb 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001842:	4b6b      	ldr	r3, [pc, #428]	; (80019f0 <Two_Menu+0x28c>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
			cnt1 = 2;
 8001848:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <Two_Menu+0x294>)
 800184a:	2202      	movs	r2, #2
 800184c:	701a      	strb	r2, [r3, #0]
			cnt2 = 4;
 800184e:	4b6b      	ldr	r3, [pc, #428]	; (80019fc <Two_Menu+0x298>)
 8001850:	2204      	movs	r2, #4
 8001852:	701a      	strb	r2, [r3, #0]
			Check = 8;
 8001854:	4b70      	ldr	r3, [pc, #448]	; (8001a18 <Two_Menu+0x2b4>)
 8001856:	2208      	movs	r2, #8
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e143      	b.n	8001ae4 <Two_Menu+0x380>
		}
		else if(((cnt1 == 2) && (step_DOWN == 1)) || ((cnt2 == 2) && step_UP == 1))
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <Two_Menu+0x294>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d103      	bne.n	800186c <Two_Menu+0x108>
 8001864:	4b62      	ldr	r3, [pc, #392]	; (80019f0 <Two_Menu+0x28c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d007      	beq.n	800187c <Two_Menu+0x118>
 800186c:	4b63      	ldr	r3, [pc, #396]	; (80019fc <Two_Menu+0x298>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d158      	bne.n	8001926 <Two_Menu+0x1c2>
 8001874:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <Two_Menu+0x290>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d154      	bne.n	8001926 <Two_Menu+0x1c2>
		{
			ST7735_DrawString(48, 0, "BLOCKS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800187c:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <Two_Menu+0x29c>)
 800187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001882:	9202      	str	r2, [sp, #8]
 8001884:	221f      	movs	r2, #31
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	9200      	str	r2, [sp, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <Two_Menu+0x2a0>)
 8001890:	2100      	movs	r1, #0
 8001892:	2030      	movs	r0, #48	; 0x30
 8001894:	f005 f9e0 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 36, "- RELAY", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001898:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <Two_Menu+0x29c>)
 800189a:	2200      	movs	r2, #0
 800189c:	9202      	str	r2, [sp, #8]
 800189e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018a2:	9201      	str	r2, [sp, #4]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	9200      	str	r2, [sp, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a57      	ldr	r2, [pc, #348]	; (8001a08 <Two_Menu+0x2a4>)
 80018ac:	2124      	movs	r1, #36	; 0x24
 80018ae:	2000      	movs	r0, #0
 80018b0:	f005 f9d2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 54, "- DIGITAL", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 80018b4:	4b52      	ldr	r3, [pc, #328]	; (8001a00 <Two_Menu+0x29c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	9202      	str	r2, [sp, #8]
 80018ba:	221f      	movs	r2, #31
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	9200      	str	r2, [sp, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a51      	ldr	r2, [pc, #324]	; (8001a0c <Two_Menu+0x2a8>)
 80018c6:	2136      	movs	r1, #54	; 0x36
 80018c8:	2000      	movs	r0, #0
 80018ca:	f005 f9c5 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 72, "- DIMMING", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80018ce:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <Two_Menu+0x29c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	9202      	str	r2, [sp, #8]
 80018d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d8:	9201      	str	r2, [sp, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	9200      	str	r2, [sp, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a4b      	ldr	r2, [pc, #300]	; (8001a10 <Two_Menu+0x2ac>)
 80018e2:	2148      	movs	r1, #72	; 0x48
 80018e4:	2000      	movs	r0, #0
 80018e6:	f005 f9b7 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- INTERFACE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80018ea:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <Two_Menu+0x29c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	9202      	str	r2, [sp, #8]
 80018f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f4:	9201      	str	r2, [sp, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	9200      	str	r2, [sp, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a45      	ldr	r2, [pc, #276]	; (8001a14 <Two_Menu+0x2b0>)
 80018fe:	215a      	movs	r1, #90	; 0x5a
 8001900:	2000      	movs	r0, #0
 8001902:	f005 f9a9 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8001906:	6838      	ldr	r0, [r7, #0]
 8001908:	f005 fe56 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <Two_Menu+0x28c>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
			cnt1 = 3;
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <Two_Menu+0x294>)
 8001914:	2203      	movs	r2, #3
 8001916:	701a      	strb	r2, [r3, #0]
			cnt2 = 1;
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <Two_Menu+0x298>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
			Check = 9;
 800191e:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <Two_Menu+0x2b4>)
 8001920:	2209      	movs	r2, #9
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e0de      	b.n	8001ae4 <Two_Menu+0x380>
		}
		else if(((cnt1 == 3) && (step_DOWN == 1)) || ((cnt2 == 3) && step_UP == 1))
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <Two_Menu+0x294>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d103      	bne.n	8001936 <Two_Menu+0x1d2>
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <Two_Menu+0x28c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d007      	beq.n	8001946 <Two_Menu+0x1e2>
 8001936:	4b31      	ldr	r3, [pc, #196]	; (80019fc <Two_Menu+0x298>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d16e      	bne.n	8001a1c <Two_Menu+0x2b8>
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <Two_Menu+0x290>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d16a      	bne.n	8001a1c <Two_Menu+0x2b8>
		{
			ST7735_DrawString(48, 0, "BLOCKS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001946:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <Two_Menu+0x29c>)
 8001948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194c:	9202      	str	r2, [sp, #8]
 800194e:	221f      	movs	r2, #31
 8001950:	9201      	str	r2, [sp, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2a      	ldr	r2, [pc, #168]	; (8001a04 <Two_Menu+0x2a0>)
 800195a:	2100      	movs	r1, #0
 800195c:	2030      	movs	r0, #48	; 0x30
 800195e:	f005 f97b 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 36, "- RELAY", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <Two_Menu+0x29c>)
 8001964:	2200      	movs	r2, #0
 8001966:	9202      	str	r2, [sp, #8]
 8001968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800196c:	9201      	str	r2, [sp, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	9200      	str	r2, [sp, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <Two_Menu+0x2a4>)
 8001976:	2124      	movs	r1, #36	; 0x24
 8001978:	2000      	movs	r0, #0
 800197a:	f005 f96d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 54, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <Two_Menu+0x29c>)
 8001980:	2200      	movs	r2, #0
 8001982:	9202      	str	r2, [sp, #8]
 8001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001988:	9201      	str	r2, [sp, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	9200      	str	r2, [sp, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <Two_Menu+0x2a8>)
 8001992:	2136      	movs	r1, #54	; 0x36
 8001994:	2000      	movs	r0, #0
 8001996:	f005 f95f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 72, "- DIMMING", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <Two_Menu+0x29c>)
 800199c:	2200      	movs	r2, #0
 800199e:	9202      	str	r2, [sp, #8]
 80019a0:	221f      	movs	r2, #31
 80019a2:	9201      	str	r2, [sp, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	9200      	str	r2, [sp, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <Two_Menu+0x2ac>)
 80019ac:	2148      	movs	r1, #72	; 0x48
 80019ae:	2000      	movs	r0, #0
 80019b0:	f005 f952 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- INTERFACE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <Two_Menu+0x29c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	9202      	str	r2, [sp, #8]
 80019ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019be:	9201      	str	r2, [sp, #4]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <Two_Menu+0x2b0>)
 80019c8:	215a      	movs	r1, #90	; 0x5a
 80019ca:	2000      	movs	r0, #0
 80019cc:	f005 f944 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80019d0:	6838      	ldr	r0, [r7, #0]
 80019d2:	f005 fdf1 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <Two_Menu+0x28c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
			cnt1 = 4;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <Two_Menu+0x294>)
 80019de:	2204      	movs	r2, #4
 80019e0:	701a      	strb	r2, [r3, #0]
			cnt2 = 2;
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <Two_Menu+0x298>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	701a      	strb	r2, [r3, #0]
			Check = 10;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <Two_Menu+0x2b4>)
 80019ea:	220a      	movs	r2, #10
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	e079      	b.n	8001ae4 <Two_Menu+0x380>
 80019f0:	20000121 	.word	0x20000121
 80019f4:	20000122 	.word	0x20000122
 80019f8:	2000001a 	.word	0x2000001a
 80019fc:	2000001b 	.word	0x2000001b
 8001a00:	20000008 	.word	0x20000008
 8001a04:	0800be24 	.word	0x0800be24
 8001a08:	0800be70 	.word	0x0800be70
 8001a0c:	0800be40 	.word	0x0800be40
 8001a10:	0800be78 	.word	0x0800be78
 8001a14:	0800be84 	.word	0x0800be84
 8001a18:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 4) && (step_DOWN == 1)) || ((cnt2 == 4) && step_UP == 1))
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <Two_Menu+0x38c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d103      	bne.n	8001a2c <Two_Menu+0x2c8>
 8001a24:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <Two_Menu+0x390>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d007      	beq.n	8001a3c <Two_Menu+0x2d8>
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <Two_Menu+0x394>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d157      	bne.n	8001ae4 <Two_Menu+0x380>
 8001a34:	4b31      	ldr	r3, [pc, #196]	; (8001afc <Two_Menu+0x398>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d153      	bne.n	8001ae4 <Two_Menu+0x380>
		{
			ST7735_DrawString(48, 0, "BLOCKS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <Two_Menu+0x39c>)
 8001a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a42:	9202      	str	r2, [sp, #8]
 8001a44:	221f      	movs	r2, #31
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	9200      	str	r2, [sp, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <Two_Menu+0x3a0>)
 8001a50:	2100      	movs	r1, #0
 8001a52:	2030      	movs	r0, #48	; 0x30
 8001a54:	f005 f900 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 36, "- RELAY", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <Two_Menu+0x39c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	9202      	str	r2, [sp, #8]
 8001a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	9200      	str	r2, [sp, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <Two_Menu+0x3a4>)
 8001a6c:	2124      	movs	r1, #36	; 0x24
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f005 f8f2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 54, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <Two_Menu+0x39c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	9202      	str	r2, [sp, #8]
 8001a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7e:	9201      	str	r2, [sp, #4]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	9200      	str	r2, [sp, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <Two_Menu+0x3a8>)
 8001a88:	2136      	movs	r1, #54	; 0x36
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f005 f8e4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 72, "- DIMMING", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <Two_Menu+0x39c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	9202      	str	r2, [sp, #8]
 8001a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9a:	9201      	str	r2, [sp, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	9200      	str	r2, [sp, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <Two_Menu+0x3ac>)
 8001aa4:	2148      	movs	r1, #72	; 0x48
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f005 f8d6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- INTERFACE", Font_11x18, ST7735_BLUE, ST7735_BLACK);
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <Two_Menu+0x39c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	9202      	str	r2, [sp, #8]
 8001ab2:	221f      	movs	r2, #31
 8001ab4:	9201      	str	r2, [sp, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	9200      	str	r2, [sp, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <Two_Menu+0x3b0>)
 8001abe:	215a      	movs	r1, #90	; 0x5a
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f005 f8c9 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f005 fd76 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <Two_Menu+0x390>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
			cnt1 = 1;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <Two_Menu+0x38c>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
			cnt2 = 3;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <Two_Menu+0x394>)
 8001ada:	2203      	movs	r2, #3
 8001adc:	701a      	strb	r2, [r3, #0]
			Check = 11;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <Two_Menu+0x3b4>)
 8001ae0:	220b      	movs	r2, #11
 8001ae2:	701a      	strb	r2, [r3, #0]
		}
	}
	return Check;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <Two_Menu+0x3b4>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000001a 	.word	0x2000001a
 8001af4:	20000121 	.word	0x20000121
 8001af8:	2000001b 	.word	0x2000001b
 8001afc:	20000122 	.word	0x20000122
 8001b00:	20000008 	.word	0x20000008
 8001b04:	0800be24 	.word	0x0800be24
 8001b08:	0800be70 	.word	0x0800be70
 8001b0c:	0800be40 	.word	0x0800be40
 8001b10:	0800be78 	.word	0x0800be78
 8001b14:	0800be84 	.word	0x0800be84
 8001b18:	20000123 	.word	0x20000123

08001b1c <Three_Menu>:
//Функция обработки действий подменю: "Аналоговые входы"
//Принимает флаги нажатия кнопок "Вниз";"Вверх";
//Принимает переменную времени задержки обработки прерываний
//Возвращает выбранную позицию в списке меню
uint8_t Three_Menu(uint8_t DOWN, uint8_t UP, uint32_t time)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af04      	add	r7, sp, #16
 8001b22:	4603      	mov	r3, r0
 8001b24:	603a      	str	r2, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	71bb      	strb	r3, [r7, #6]
	step_DOWN = DOWN;
 8001b2c:	4aa7      	ldr	r2, [pc, #668]	; (8001dcc <Three_Menu+0x2b0>)
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	7013      	strb	r3, [r2, #0]
	step_UP = UP;
 8001b32:	4aa7      	ldr	r2, [pc, #668]	; (8001dd0 <Three_Menu+0x2b4>)
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	7013      	strb	r3, [r2, #0]
	if((step_DOWN) || (step_UP))
 8001b38:	4ba4      	ldr	r3, [pc, #656]	; (8001dcc <Three_Menu+0x2b0>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <Three_Menu+0x2e>
 8001b40:	4ba3      	ldr	r3, [pc, #652]	; (8001dd0 <Three_Menu+0x2b4>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 855a 	beq.w	80025fe <Three_Menu+0xae2>
	{
		if(((cnt1 == 1) && (step_DOWN == 1)) || ((cnt2 == 1) && step_UP == 1))
 8001b4a:	4ba2      	ldr	r3, [pc, #648]	; (8001dd4 <Three_Menu+0x2b8>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d103      	bne.n	8001b5a <Three_Menu+0x3e>
 8001b52:	4b9e      	ldr	r3, [pc, #632]	; (8001dcc <Three_Menu+0x2b0>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d009      	beq.n	8001b6e <Three_Menu+0x52>
 8001b5a:	4b9f      	ldr	r3, [pc, #636]	; (8001dd8 <Three_Menu+0x2bc>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	f040 8093 	bne.w	8001c8a <Three_Menu+0x16e>
 8001b64:	4b9a      	ldr	r3, [pc, #616]	; (8001dd0 <Three_Menu+0x2b4>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	f040 808e 	bne.w	8001c8a <Three_Menu+0x16e>
		{
			ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001b6e:	4b9b      	ldr	r3, [pc, #620]	; (8001ddc <Three_Menu+0x2c0>)
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	9202      	str	r2, [sp, #8]
 8001b76:	221f      	movs	r2, #31
 8001b78:	9201      	str	r2, [sp, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	9200      	str	r2, [sp, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a97      	ldr	r2, [pc, #604]	; (8001de0 <Three_Menu+0x2c4>)
 8001b82:	2100      	movs	r1, #0
 8001b84:	2030      	movs	r0, #48	; 0x30
 8001b86:	f005 f867 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8001b8a:	4b96      	ldr	r3, [pc, #600]	; (8001de4 <Three_Menu+0x2c8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	9202      	str	r2, [sp, #8]
 8001b90:	221f      	movs	r2, #31
 8001b92:	9201      	str	r2, [sp, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	9200      	str	r2, [sp, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a93      	ldr	r2, [pc, #588]	; (8001de8 <Three_Menu+0x2cc>)
 8001b9c:	211e      	movs	r1, #30
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f005 f85a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ba4:	4b8f      	ldr	r3, [pc, #572]	; (8001de4 <Three_Menu+0x2c8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	9202      	str	r2, [sp, #8]
 8001baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bae:	9201      	str	r2, [sp, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	9200      	str	r2, [sp, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a8d      	ldr	r2, [pc, #564]	; (8001dec <Three_Menu+0x2d0>)
 8001bb8:	2128      	movs	r1, #40	; 0x28
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f005 f84c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bc0:	4b88      	ldr	r3, [pc, #544]	; (8001de4 <Three_Menu+0x2c8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	9202      	str	r2, [sp, #8]
 8001bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bca:	9201      	str	r2, [sp, #4]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	9200      	str	r2, [sp, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a87      	ldr	r2, [pc, #540]	; (8001df0 <Three_Menu+0x2d4>)
 8001bd4:	2132      	movs	r1, #50	; 0x32
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f005 f83e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bdc:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <Three_Menu+0x2c8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	9202      	str	r2, [sp, #8]
 8001be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be6:	9201      	str	r2, [sp, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	9200      	str	r2, [sp, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a81      	ldr	r2, [pc, #516]	; (8001df4 <Three_Menu+0x2d8>)
 8001bf0:	213c      	movs	r1, #60	; 0x3c
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f005 f830 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bf8:	4b7a      	ldr	r3, [pc, #488]	; (8001de4 <Three_Menu+0x2c8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	9202      	str	r2, [sp, #8]
 8001bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c02:	9201      	str	r2, [sp, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	9200      	str	r2, [sp, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7b      	ldr	r2, [pc, #492]	; (8001df8 <Three_Menu+0x2dc>)
 8001c0c:	2146      	movs	r1, #70	; 0x46
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f005 f822 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c14:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <Three_Menu+0x2c8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	9202      	str	r2, [sp, #8]
 8001c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1e:	9201      	str	r2, [sp, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	9200      	str	r2, [sp, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <Three_Menu+0x2e0>)
 8001c28:	2150      	movs	r1, #80	; 0x50
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f005 f814 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c30:	4b6c      	ldr	r3, [pc, #432]	; (8001de4 <Three_Menu+0x2c8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	9202      	str	r2, [sp, #8]
 8001c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3a:	9201      	str	r2, [sp, #4]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	9200      	str	r2, [sp, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6f      	ldr	r2, [pc, #444]	; (8001e00 <Three_Menu+0x2e4>)
 8001c44:	215a      	movs	r1, #90	; 0x5a
 8001c46:	2000      	movs	r0, #0
 8001c48:	f005 f806 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c4c:	4b65      	ldr	r3, [pc, #404]	; (8001de4 <Three_Menu+0x2c8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	9202      	str	r2, [sp, #8]
 8001c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c56:	9201      	str	r2, [sp, #4]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <Three_Menu+0x2e8>)
 8001c60:	2164      	movs	r1, #100	; 0x64
 8001c62:	2000      	movs	r0, #0
 8001c64:	f004 fff8 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8001c68:	6838      	ldr	r0, [r7, #0]
 8001c6a:	f005 fca5 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001c6e:	4b57      	ldr	r3, [pc, #348]	; (8001dcc <Three_Menu+0x2b0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
			cnt1 = 2;
 8001c74:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <Three_Menu+0x2b8>)
 8001c76:	2202      	movs	r2, #2
 8001c78:	701a      	strb	r2, [r3, #0]
			cnt2 = 8;
 8001c7a:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <Three_Menu+0x2bc>)
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	701a      	strb	r2, [r3, #0]
			Check = 12;
 8001c80:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <Three_Menu+0x2ec>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	f000 bcba 	b.w	80025fe <Three_Menu+0xae2>
		}
		else if(((cnt1 == 2) && (step_DOWN == 1)) || ((cnt2 == 2) && step_UP == 1))
 8001c8a:	4b52      	ldr	r3, [pc, #328]	; (8001dd4 <Three_Menu+0x2b8>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d103      	bne.n	8001c9a <Three_Menu+0x17e>
 8001c92:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <Three_Menu+0x2b0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d009      	beq.n	8001cae <Three_Menu+0x192>
 8001c9a:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <Three_Menu+0x2bc>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	f040 80b4 	bne.w	8001e0c <Three_Menu+0x2f0>
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <Three_Menu+0x2b4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	f040 80af 	bne.w	8001e0c <Three_Menu+0x2f0>
		{
			ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001cae:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <Three_Menu+0x2c0>)
 8001cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb4:	9202      	str	r2, [sp, #8]
 8001cb6:	221f      	movs	r2, #31
 8001cb8:	9201      	str	r2, [sp, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a47      	ldr	r2, [pc, #284]	; (8001de0 <Three_Menu+0x2c4>)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2030      	movs	r0, #48	; 0x30
 8001cc6:	f004 ffc7 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001cca:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <Three_Menu+0x2c8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	9202      	str	r2, [sp, #8]
 8001cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd4:	9201      	str	r2, [sp, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	9200      	str	r2, [sp, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <Three_Menu+0x2cc>)
 8001cde:	211e      	movs	r1, #30
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f004 ffb9 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <Three_Menu+0x2c8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	9202      	str	r2, [sp, #8]
 8001cec:	221f      	movs	r2, #31
 8001cee:	9201      	str	r2, [sp, #4]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	9200      	str	r2, [sp, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a3d      	ldr	r2, [pc, #244]	; (8001dec <Three_Menu+0x2d0>)
 8001cf8:	2128      	movs	r1, #40	; 0x28
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f004 ffac 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <Three_Menu+0x2c8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	9202      	str	r2, [sp, #8]
 8001d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0a:	9201      	str	r2, [sp, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	9200      	str	r2, [sp, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <Three_Menu+0x2d4>)
 8001d14:	2132      	movs	r1, #50	; 0x32
 8001d16:	2000      	movs	r0, #0
 8001d18:	f004 ff9e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <Three_Menu+0x2c8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	9202      	str	r2, [sp, #8]
 8001d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <Three_Menu+0x2d8>)
 8001d30:	213c      	movs	r1, #60	; 0x3c
 8001d32:	2000      	movs	r0, #0
 8001d34:	f004 ff90 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <Three_Menu+0x2c8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	9202      	str	r2, [sp, #8]
 8001d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d42:	9201      	str	r2, [sp, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	9200      	str	r2, [sp, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <Three_Menu+0x2dc>)
 8001d4c:	2146      	movs	r1, #70	; 0x46
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f004 ff82 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <Three_Menu+0x2c8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	9202      	str	r2, [sp, #8]
 8001d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5e:	9201      	str	r2, [sp, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	9200      	str	r2, [sp, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <Three_Menu+0x2e0>)
 8001d68:	2150      	movs	r1, #80	; 0x50
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f004 ff74 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <Three_Menu+0x2c8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	9202      	str	r2, [sp, #8]
 8001d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7a:	9201      	str	r2, [sp, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <Three_Menu+0x2e4>)
 8001d84:	215a      	movs	r1, #90	; 0x5a
 8001d86:	2000      	movs	r0, #0
 8001d88:	f004 ff66 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <Three_Menu+0x2c8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	9202      	str	r2, [sp, #8]
 8001d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d96:	9201      	str	r2, [sp, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <Three_Menu+0x2e8>)
 8001da0:	2164      	movs	r1, #100	; 0x64
 8001da2:	2000      	movs	r0, #0
 8001da4:	f004 ff58 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8001da8:	6838      	ldr	r0, [r7, #0]
 8001daa:	f005 fc05 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <Three_Menu+0x2b0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
			cnt1 = 3;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <Three_Menu+0x2b8>)
 8001db6:	2203      	movs	r2, #3
 8001db8:	701a      	strb	r2, [r3, #0]
			cnt2 = 1;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <Three_Menu+0x2bc>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
			Check = 13;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <Three_Menu+0x2ec>)
 8001dc2:	220d      	movs	r2, #13
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	f000 bc1a 	b.w	80025fe <Three_Menu+0xae2>
 8001dca:	bf00      	nop
 8001dcc:	20000121 	.word	0x20000121
 8001dd0:	20000122 	.word	0x20000122
 8001dd4:	2000001a 	.word	0x2000001a
 8001dd8:	2000001b 	.word	0x2000001b
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	0800be90 	.word	0x0800be90
 8001de4:	20000000 	.word	0x20000000
 8001de8:	0800be98 	.word	0x0800be98
 8001dec:	0800bea0 	.word	0x0800bea0
 8001df0:	0800bea8 	.word	0x0800bea8
 8001df4:	0800beb0 	.word	0x0800beb0
 8001df8:	0800beb8 	.word	0x0800beb8
 8001dfc:	0800bec0 	.word	0x0800bec0
 8001e00:	0800bec8 	.word	0x0800bec8
 8001e04:	0800bed0 	.word	0x0800bed0
 8001e08:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 3) && (step_DOWN == 1)) || ((cnt2 == 3) && step_UP == 1))
 8001e0c:	4b9e      	ldr	r3, [pc, #632]	; (8002088 <Three_Menu+0x56c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d103      	bne.n	8001e1c <Three_Menu+0x300>
 8001e14:	4b9d      	ldr	r3, [pc, #628]	; (800208c <Three_Menu+0x570>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d009      	beq.n	8001e30 <Three_Menu+0x314>
 8001e1c:	4b9c      	ldr	r3, [pc, #624]	; (8002090 <Three_Menu+0x574>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	f040 8092 	bne.w	8001f4a <Three_Menu+0x42e>
 8001e26:	4b9b      	ldr	r3, [pc, #620]	; (8002094 <Three_Menu+0x578>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	f040 808d 	bne.w	8001f4a <Three_Menu+0x42e>
		{
			ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001e30:	4b99      	ldr	r3, [pc, #612]	; (8002098 <Three_Menu+0x57c>)
 8001e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e36:	9202      	str	r2, [sp, #8]
 8001e38:	221f      	movs	r2, #31
 8001e3a:	9201      	str	r2, [sp, #4]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	9200      	str	r2, [sp, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a96      	ldr	r2, [pc, #600]	; (800209c <Three_Menu+0x580>)
 8001e44:	2100      	movs	r1, #0
 8001e46:	2030      	movs	r0, #48	; 0x30
 8001e48:	f004 ff06 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001e4c:	4b94      	ldr	r3, [pc, #592]	; (80020a0 <Three_Menu+0x584>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	9202      	str	r2, [sp, #8]
 8001e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	9200      	str	r2, [sp, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a91      	ldr	r2, [pc, #580]	; (80020a4 <Three_Menu+0x588>)
 8001e60:	211e      	movs	r1, #30
 8001e62:	2000      	movs	r0, #0
 8001e64:	f004 fef8 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001e68:	4b8d      	ldr	r3, [pc, #564]	; (80020a0 <Three_Menu+0x584>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	9202      	str	r2, [sp, #8]
 8001e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e72:	9201      	str	r2, [sp, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	9200      	str	r2, [sp, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a8b      	ldr	r2, [pc, #556]	; (80020a8 <Three_Menu+0x58c>)
 8001e7c:	2128      	movs	r1, #40	; 0x28
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f004 feea 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8001e84:	4b86      	ldr	r3, [pc, #536]	; (80020a0 <Three_Menu+0x584>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	9202      	str	r2, [sp, #8]
 8001e8a:	221f      	movs	r2, #31
 8001e8c:	9201      	str	r2, [sp, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	9200      	str	r2, [sp, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a85      	ldr	r2, [pc, #532]	; (80020ac <Three_Menu+0x590>)
 8001e96:	2132      	movs	r1, #50	; 0x32
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f004 fedd 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001e9e:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <Three_Menu+0x584>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	9202      	str	r2, [sp, #8]
 8001ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea8:	9201      	str	r2, [sp, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	9200      	str	r2, [sp, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a7f      	ldr	r2, [pc, #508]	; (80020b0 <Three_Menu+0x594>)
 8001eb2:	213c      	movs	r1, #60	; 0x3c
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f004 fecf 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001eba:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <Three_Menu+0x584>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	9202      	str	r2, [sp, #8]
 8001ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec4:	9201      	str	r2, [sp, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	9200      	str	r2, [sp, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a79      	ldr	r2, [pc, #484]	; (80020b4 <Three_Menu+0x598>)
 8001ece:	2146      	movs	r1, #70	; 0x46
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f004 fec1 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <Three_Menu+0x584>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	9202      	str	r2, [sp, #8]
 8001edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee0:	9201      	str	r2, [sp, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	9200      	str	r2, [sp, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a73      	ldr	r2, [pc, #460]	; (80020b8 <Three_Menu+0x59c>)
 8001eea:	2150      	movs	r1, #80	; 0x50
 8001eec:	2000      	movs	r0, #0
 8001eee:	f004 feb3 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ef2:	4b6b      	ldr	r3, [pc, #428]	; (80020a0 <Three_Menu+0x584>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	9202      	str	r2, [sp, #8]
 8001ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efc:	9201      	str	r2, [sp, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	9200      	str	r2, [sp, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <Three_Menu+0x5a0>)
 8001f06:	215a      	movs	r1, #90	; 0x5a
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f004 fea5 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001f0e:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <Three_Menu+0x584>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	9202      	str	r2, [sp, #8]
 8001f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f18:	9201      	str	r2, [sp, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	9200      	str	r2, [sp, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a67      	ldr	r2, [pc, #412]	; (80020c0 <Three_Menu+0x5a4>)
 8001f22:	2164      	movs	r1, #100	; 0x64
 8001f24:	2000      	movs	r0, #0
 8001f26:	f004 fe97 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8001f2a:	6838      	ldr	r0, [r7, #0]
 8001f2c:	f005 fb44 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8001f30:	4b56      	ldr	r3, [pc, #344]	; (800208c <Three_Menu+0x570>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
			cnt1 = 4;
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <Three_Menu+0x56c>)
 8001f38:	2204      	movs	r2, #4
 8001f3a:	701a      	strb	r2, [r3, #0]
			cnt2 = 2;
 8001f3c:	4b54      	ldr	r3, [pc, #336]	; (8002090 <Three_Menu+0x574>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	701a      	strb	r2, [r3, #0]
			Check = 14;
 8001f42:	4b60      	ldr	r3, [pc, #384]	; (80020c4 <Three_Menu+0x5a8>)
 8001f44:	220e      	movs	r2, #14
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e359      	b.n	80025fe <Three_Menu+0xae2>
		}
		else if(((cnt1 == 4) && (step_DOWN == 1)) || ((cnt2 == 4) && step_UP == 1))
 8001f4a:	4b4f      	ldr	r3, [pc, #316]	; (8002088 <Three_Menu+0x56c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d103      	bne.n	8001f5a <Three_Menu+0x43e>
 8001f52:	4b4e      	ldr	r3, [pc, #312]	; (800208c <Three_Menu+0x570>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d009      	beq.n	8001f6e <Three_Menu+0x452>
 8001f5a:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <Three_Menu+0x574>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	f040 80b2 	bne.w	80020c8 <Three_Menu+0x5ac>
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <Three_Menu+0x578>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	f040 80ad 	bne.w	80020c8 <Three_Menu+0x5ac>
		{
			ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <Three_Menu+0x57c>)
 8001f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f74:	9202      	str	r2, [sp, #8]
 8001f76:	221f      	movs	r2, #31
 8001f78:	9201      	str	r2, [sp, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	9200      	str	r2, [sp, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a46      	ldr	r2, [pc, #280]	; (800209c <Three_Menu+0x580>)
 8001f82:	2100      	movs	r1, #0
 8001f84:	2030      	movs	r0, #48	; 0x30
 8001f86:	f004 fe67 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001f8a:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <Three_Menu+0x584>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	9202      	str	r2, [sp, #8]
 8001f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f94:	9201      	str	r2, [sp, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	9200      	str	r2, [sp, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <Three_Menu+0x588>)
 8001f9e:	211e      	movs	r1, #30
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f004 fe59 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <Three_Menu+0x584>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	9202      	str	r2, [sp, #8]
 8001fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <Three_Menu+0x58c>)
 8001fba:	2128      	movs	r1, #40	; 0x28
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f004 fe4b 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <Three_Menu+0x584>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	9202      	str	r2, [sp, #8]
 8001fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fcc:	9201      	str	r2, [sp, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	9200      	str	r2, [sp, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a35      	ldr	r2, [pc, #212]	; (80020ac <Three_Menu+0x590>)
 8001fd6:	2132      	movs	r1, #50	; 0x32
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f004 fe3d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8001fde:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <Three_Menu+0x584>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	9202      	str	r2, [sp, #8]
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	9201      	str	r2, [sp, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	9200      	str	r2, [sp, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a30      	ldr	r2, [pc, #192]	; (80020b0 <Three_Menu+0x594>)
 8001ff0:	213c      	movs	r1, #60	; 0x3c
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f004 fe30 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <Three_Menu+0x584>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	9202      	str	r2, [sp, #8]
 8001ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002002:	9201      	str	r2, [sp, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	9200      	str	r2, [sp, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <Three_Menu+0x598>)
 800200c:	2146      	movs	r1, #70	; 0x46
 800200e:	2000      	movs	r0, #0
 8002010:	f004 fe22 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <Three_Menu+0x584>)
 8002016:	2200      	movs	r2, #0
 8002018:	9202      	str	r2, [sp, #8]
 800201a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201e:	9201      	str	r2, [sp, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	9200      	str	r2, [sp, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <Three_Menu+0x59c>)
 8002028:	2150      	movs	r1, #80	; 0x50
 800202a:	2000      	movs	r0, #0
 800202c:	f004 fe14 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <Three_Menu+0x584>)
 8002032:	2200      	movs	r2, #0
 8002034:	9202      	str	r2, [sp, #8]
 8002036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800203a:	9201      	str	r2, [sp, #4]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	9200      	str	r2, [sp, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <Three_Menu+0x5a0>)
 8002044:	215a      	movs	r1, #90	; 0x5a
 8002046:	2000      	movs	r0, #0
 8002048:	f004 fe06 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <Three_Menu+0x584>)
 800204e:	2200      	movs	r2, #0
 8002050:	9202      	str	r2, [sp, #8]
 8002052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002056:	9201      	str	r2, [sp, #4]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	9200      	str	r2, [sp, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <Three_Menu+0x5a4>)
 8002060:	2164      	movs	r1, #100	; 0x64
 8002062:	2000      	movs	r0, #0
 8002064:	f004 fdf8 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8002068:	6838      	ldr	r0, [r7, #0]
 800206a:	f005 faa5 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <Three_Menu+0x570>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			cnt1 = 5;
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <Three_Menu+0x56c>)
 8002076:	2205      	movs	r2, #5
 8002078:	701a      	strb	r2, [r3, #0]
			cnt2 = 3;
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <Three_Menu+0x574>)
 800207c:	2203      	movs	r2, #3
 800207e:	701a      	strb	r2, [r3, #0]
			Check = 15;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <Three_Menu+0x5a8>)
 8002082:	220f      	movs	r2, #15
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e2ba      	b.n	80025fe <Three_Menu+0xae2>
 8002088:	2000001a 	.word	0x2000001a
 800208c:	20000121 	.word	0x20000121
 8002090:	2000001b 	.word	0x2000001b
 8002094:	20000122 	.word	0x20000122
 8002098:	20000008 	.word	0x20000008
 800209c:	0800be90 	.word	0x0800be90
 80020a0:	20000000 	.word	0x20000000
 80020a4:	0800be98 	.word	0x0800be98
 80020a8:	0800bea0 	.word	0x0800bea0
 80020ac:	0800bea8 	.word	0x0800bea8
 80020b0:	0800beb0 	.word	0x0800beb0
 80020b4:	0800beb8 	.word	0x0800beb8
 80020b8:	0800bec0 	.word	0x0800bec0
 80020bc:	0800bec8 	.word	0x0800bec8
 80020c0:	0800bed0 	.word	0x0800bed0
 80020c4:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 5) && (step_DOWN == 1)) || ((cnt2 == 5) && step_UP == 1))
 80020c8:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <Three_Menu+0x828>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d103      	bne.n	80020d8 <Three_Menu+0x5bc>
 80020d0:	4b9d      	ldr	r3, [pc, #628]	; (8002348 <Three_Menu+0x82c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d009      	beq.n	80020ec <Three_Menu+0x5d0>
 80020d8:	4b9c      	ldr	r3, [pc, #624]	; (800234c <Three_Menu+0x830>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	f040 8092 	bne.w	8002206 <Three_Menu+0x6ea>
 80020e2:	4b9b      	ldr	r3, [pc, #620]	; (8002350 <Three_Menu+0x834>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 808d 	bne.w	8002206 <Three_Menu+0x6ea>
		{
			ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80020ec:	4b99      	ldr	r3, [pc, #612]	; (8002354 <Three_Menu+0x838>)
 80020ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f2:	9202      	str	r2, [sp, #8]
 80020f4:	221f      	movs	r2, #31
 80020f6:	9201      	str	r2, [sp, #4]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	9200      	str	r2, [sp, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a96      	ldr	r2, [pc, #600]	; (8002358 <Three_Menu+0x83c>)
 8002100:	2100      	movs	r1, #0
 8002102:	2030      	movs	r0, #48	; 0x30
 8002104:	f004 fda8 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002108:	4b94      	ldr	r3, [pc, #592]	; (800235c <Three_Menu+0x840>)
 800210a:	2200      	movs	r2, #0
 800210c:	9202      	str	r2, [sp, #8]
 800210e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002112:	9201      	str	r2, [sp, #4]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	9200      	str	r2, [sp, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a91      	ldr	r2, [pc, #580]	; (8002360 <Three_Menu+0x844>)
 800211c:	211e      	movs	r1, #30
 800211e:	2000      	movs	r0, #0
 8002120:	f004 fd9a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002124:	4b8d      	ldr	r3, [pc, #564]	; (800235c <Three_Menu+0x840>)
 8002126:	2200      	movs	r2, #0
 8002128:	9202      	str	r2, [sp, #8]
 800212a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212e:	9201      	str	r2, [sp, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	9200      	str	r2, [sp, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a8b      	ldr	r2, [pc, #556]	; (8002364 <Three_Menu+0x848>)
 8002138:	2128      	movs	r1, #40	; 0x28
 800213a:	2000      	movs	r0, #0
 800213c:	f004 fd8c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002140:	4b86      	ldr	r3, [pc, #536]	; (800235c <Three_Menu+0x840>)
 8002142:	2200      	movs	r2, #0
 8002144:	9202      	str	r2, [sp, #8]
 8002146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214a:	9201      	str	r2, [sp, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	9200      	str	r2, [sp, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a85      	ldr	r2, [pc, #532]	; (8002368 <Three_Menu+0x84c>)
 8002154:	2132      	movs	r1, #50	; 0x32
 8002156:	2000      	movs	r0, #0
 8002158:	f004 fd7e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800215c:	4b7f      	ldr	r3, [pc, #508]	; (800235c <Three_Menu+0x840>)
 800215e:	2200      	movs	r2, #0
 8002160:	9202      	str	r2, [sp, #8]
 8002162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002166:	9201      	str	r2, [sp, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	9200      	str	r2, [sp, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7f      	ldr	r2, [pc, #508]	; (800236c <Three_Menu+0x850>)
 8002170:	213c      	movs	r1, #60	; 0x3c
 8002172:	2000      	movs	r0, #0
 8002174:	f004 fd70 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8002178:	4b78      	ldr	r3, [pc, #480]	; (800235c <Three_Menu+0x840>)
 800217a:	2200      	movs	r2, #0
 800217c:	9202      	str	r2, [sp, #8]
 800217e:	221f      	movs	r2, #31
 8002180:	9201      	str	r2, [sp, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a79      	ldr	r2, [pc, #484]	; (8002370 <Three_Menu+0x854>)
 800218a:	2146      	movs	r1, #70	; 0x46
 800218c:	2000      	movs	r0, #0
 800218e:	f004 fd63 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002192:	4b72      	ldr	r3, [pc, #456]	; (800235c <Three_Menu+0x840>)
 8002194:	2200      	movs	r2, #0
 8002196:	9202      	str	r2, [sp, #8]
 8002198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800219c:	9201      	str	r2, [sp, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	9200      	str	r2, [sp, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a73      	ldr	r2, [pc, #460]	; (8002374 <Three_Menu+0x858>)
 80021a6:	2150      	movs	r1, #80	; 0x50
 80021a8:	2000      	movs	r0, #0
 80021aa:	f004 fd55 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021ae:	4b6b      	ldr	r3, [pc, #428]	; (800235c <Three_Menu+0x840>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	9202      	str	r2, [sp, #8]
 80021b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b8:	9201      	str	r2, [sp, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	9200      	str	r2, [sp, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6d      	ldr	r2, [pc, #436]	; (8002378 <Three_Menu+0x85c>)
 80021c2:	215a      	movs	r1, #90	; 0x5a
 80021c4:	2000      	movs	r0, #0
 80021c6:	f004 fd47 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021ca:	4b64      	ldr	r3, [pc, #400]	; (800235c <Three_Menu+0x840>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	9202      	str	r2, [sp, #8]
 80021d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d4:	9201      	str	r2, [sp, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	9200      	str	r2, [sp, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a67      	ldr	r2, [pc, #412]	; (800237c <Three_Menu+0x860>)
 80021de:	2164      	movs	r1, #100	; 0x64
 80021e0:	2000      	movs	r0, #0
 80021e2:	f004 fd39 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80021e6:	6838      	ldr	r0, [r7, #0]
 80021e8:	f005 f9e6 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80021ec:	4b56      	ldr	r3, [pc, #344]	; (8002348 <Three_Menu+0x82c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
			cnt1 = 6;
 80021f2:	4b54      	ldr	r3, [pc, #336]	; (8002344 <Three_Menu+0x828>)
 80021f4:	2206      	movs	r2, #6
 80021f6:	701a      	strb	r2, [r3, #0]
			cnt2 = 4;
 80021f8:	4b54      	ldr	r3, [pc, #336]	; (800234c <Three_Menu+0x830>)
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
			Check = 16;
 80021fe:	4b60      	ldr	r3, [pc, #384]	; (8002380 <Three_Menu+0x864>)
 8002200:	2210      	movs	r2, #16
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e1fb      	b.n	80025fe <Three_Menu+0xae2>
		}
		else if(((cnt1 == 6) && (step_DOWN == 1)) || ((cnt2 == 6) && step_UP == 1))
 8002206:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <Three_Menu+0x828>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b06      	cmp	r3, #6
 800220c:	d103      	bne.n	8002216 <Three_Menu+0x6fa>
 800220e:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <Three_Menu+0x82c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d009      	beq.n	800222a <Three_Menu+0x70e>
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <Three_Menu+0x830>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b06      	cmp	r3, #6
 800221c:	f040 80b2 	bne.w	8002384 <Three_Menu+0x868>
 8002220:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <Three_Menu+0x834>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	f040 80ad 	bne.w	8002384 <Three_Menu+0x868>
		{
			ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800222a:	4b4a      	ldr	r3, [pc, #296]	; (8002354 <Three_Menu+0x838>)
 800222c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002230:	9202      	str	r2, [sp, #8]
 8002232:	221f      	movs	r2, #31
 8002234:	9201      	str	r2, [sp, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	9200      	str	r2, [sp, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a46      	ldr	r2, [pc, #280]	; (8002358 <Three_Menu+0x83c>)
 800223e:	2100      	movs	r1, #0
 8002240:	2030      	movs	r0, #48	; 0x30
 8002242:	f004 fd09 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002246:	4b45      	ldr	r3, [pc, #276]	; (800235c <Three_Menu+0x840>)
 8002248:	2200      	movs	r2, #0
 800224a:	9202      	str	r2, [sp, #8]
 800224c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002250:	9201      	str	r2, [sp, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a41      	ldr	r2, [pc, #260]	; (8002360 <Three_Menu+0x844>)
 800225a:	211e      	movs	r1, #30
 800225c:	2000      	movs	r0, #0
 800225e:	f004 fcfb 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <Three_Menu+0x840>)
 8002264:	2200      	movs	r2, #0
 8002266:	9202      	str	r2, [sp, #8]
 8002268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226c:	9201      	str	r2, [sp, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	9200      	str	r2, [sp, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a3b      	ldr	r2, [pc, #236]	; (8002364 <Three_Menu+0x848>)
 8002276:	2128      	movs	r1, #40	; 0x28
 8002278:	2000      	movs	r0, #0
 800227a:	f004 fced 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800227e:	4b37      	ldr	r3, [pc, #220]	; (800235c <Three_Menu+0x840>)
 8002280:	2200      	movs	r2, #0
 8002282:	9202      	str	r2, [sp, #8]
 8002284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002288:	9201      	str	r2, [sp, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	9200      	str	r2, [sp, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a35      	ldr	r2, [pc, #212]	; (8002368 <Three_Menu+0x84c>)
 8002292:	2132      	movs	r1, #50	; 0x32
 8002294:	2000      	movs	r0, #0
 8002296:	f004 fcdf 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <Three_Menu+0x840>)
 800229c:	2200      	movs	r2, #0
 800229e:	9202      	str	r2, [sp, #8]
 80022a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a4:	9201      	str	r2, [sp, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	9200      	str	r2, [sp, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2f      	ldr	r2, [pc, #188]	; (800236c <Three_Menu+0x850>)
 80022ae:	213c      	movs	r1, #60	; 0x3c
 80022b0:	2000      	movs	r0, #0
 80022b2:	f004 fcd1 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <Three_Menu+0x840>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	9202      	str	r2, [sp, #8]
 80022bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c0:	9201      	str	r2, [sp, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <Three_Menu+0x854>)
 80022ca:	2146      	movs	r1, #70	; 0x46
 80022cc:	2000      	movs	r0, #0
 80022ce:	f004 fcc3 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <Three_Menu+0x840>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	9202      	str	r2, [sp, #8]
 80022d8:	221f      	movs	r2, #31
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a24      	ldr	r2, [pc, #144]	; (8002374 <Three_Menu+0x858>)
 80022e4:	2150      	movs	r1, #80	; 0x50
 80022e6:	2000      	movs	r0, #0
 80022e8:	f004 fcb6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <Three_Menu+0x840>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f6:	9201      	str	r2, [sp, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	9200      	str	r2, [sp, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <Three_Menu+0x85c>)
 8002300:	215a      	movs	r1, #90	; 0x5a
 8002302:	2000      	movs	r0, #0
 8002304:	f004 fca8 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <Three_Menu+0x840>)
 800230a:	2200      	movs	r2, #0
 800230c:	9202      	str	r2, [sp, #8]
 800230e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	9200      	str	r2, [sp, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a18      	ldr	r2, [pc, #96]	; (800237c <Three_Menu+0x860>)
 800231c:	2164      	movs	r1, #100	; 0x64
 800231e:	2000      	movs	r0, #0
 8002320:	f004 fc9a 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8002324:	6838      	ldr	r0, [r7, #0]
 8002326:	f005 f947 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <Three_Menu+0x82c>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
			cnt1 = 7;
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <Three_Menu+0x828>)
 8002332:	2207      	movs	r2, #7
 8002334:	701a      	strb	r2, [r3, #0]
			cnt2 = 5;
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <Three_Menu+0x830>)
 8002338:	2205      	movs	r2, #5
 800233a:	701a      	strb	r2, [r3, #0]
			Check = 17;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <Three_Menu+0x864>)
 800233e:	2211      	movs	r2, #17
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e15c      	b.n	80025fe <Three_Menu+0xae2>
 8002344:	2000001a 	.word	0x2000001a
 8002348:	20000121 	.word	0x20000121
 800234c:	2000001b 	.word	0x2000001b
 8002350:	20000122 	.word	0x20000122
 8002354:	20000008 	.word	0x20000008
 8002358:	0800be90 	.word	0x0800be90
 800235c:	20000000 	.word	0x20000000
 8002360:	0800be98 	.word	0x0800be98
 8002364:	0800bea0 	.word	0x0800bea0
 8002368:	0800bea8 	.word	0x0800bea8
 800236c:	0800beb0 	.word	0x0800beb0
 8002370:	0800beb8 	.word	0x0800beb8
 8002374:	0800bec0 	.word	0x0800bec0
 8002378:	0800bec8 	.word	0x0800bec8
 800237c:	0800bed0 	.word	0x0800bed0
 8002380:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 7) && (step_DOWN == 1)) || ((cnt2 == 7) && step_UP == 1))
 8002384:	4ba1      	ldr	r3, [pc, #644]	; (800260c <Three_Menu+0xaf0>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b07      	cmp	r3, #7
 800238a:	d103      	bne.n	8002394 <Three_Menu+0x878>
 800238c:	4ba0      	ldr	r3, [pc, #640]	; (8002610 <Three_Menu+0xaf4>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d009      	beq.n	80023a8 <Three_Menu+0x88c>
 8002394:	4b9f      	ldr	r3, [pc, #636]	; (8002614 <Three_Menu+0xaf8>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b07      	cmp	r3, #7
 800239a:	f040 8092 	bne.w	80024c2 <Three_Menu+0x9a6>
 800239e:	4b9e      	ldr	r3, [pc, #632]	; (8002618 <Three_Menu+0xafc>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	f040 808d 	bne.w	80024c2 <Three_Menu+0x9a6>
		{
			ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80023a8:	4b9c      	ldr	r3, [pc, #624]	; (800261c <Three_Menu+0xb00>)
 80023aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ae:	9202      	str	r2, [sp, #8]
 80023b0:	221f      	movs	r2, #31
 80023b2:	9201      	str	r2, [sp, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	9200      	str	r2, [sp, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a99      	ldr	r2, [pc, #612]	; (8002620 <Three_Menu+0xb04>)
 80023bc:	2100      	movs	r1, #0
 80023be:	2030      	movs	r0, #48	; 0x30
 80023c0:	f004 fc4a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80023c4:	4b97      	ldr	r3, [pc, #604]	; (8002624 <Three_Menu+0xb08>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	9202      	str	r2, [sp, #8]
 80023ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ce:	9201      	str	r2, [sp, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	9200      	str	r2, [sp, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a94      	ldr	r2, [pc, #592]	; (8002628 <Three_Menu+0xb0c>)
 80023d8:	211e      	movs	r1, #30
 80023da:	2000      	movs	r0, #0
 80023dc:	f004 fc3c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80023e0:	4b90      	ldr	r3, [pc, #576]	; (8002624 <Three_Menu+0xb08>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	9202      	str	r2, [sp, #8]
 80023e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ea:	9201      	str	r2, [sp, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	9200      	str	r2, [sp, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a8e      	ldr	r2, [pc, #568]	; (800262c <Three_Menu+0xb10>)
 80023f4:	2128      	movs	r1, #40	; 0x28
 80023f6:	2000      	movs	r0, #0
 80023f8:	f004 fc2e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80023fc:	4b89      	ldr	r3, [pc, #548]	; (8002624 <Three_Menu+0xb08>)
 80023fe:	2200      	movs	r2, #0
 8002400:	9202      	str	r2, [sp, #8]
 8002402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002406:	9201      	str	r2, [sp, #4]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	9200      	str	r2, [sp, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a88      	ldr	r2, [pc, #544]	; (8002630 <Three_Menu+0xb14>)
 8002410:	2132      	movs	r1, #50	; 0x32
 8002412:	2000      	movs	r0, #0
 8002414:	f004 fc20 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002418:	4b82      	ldr	r3, [pc, #520]	; (8002624 <Three_Menu+0xb08>)
 800241a:	2200      	movs	r2, #0
 800241c:	9202      	str	r2, [sp, #8]
 800241e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002422:	9201      	str	r2, [sp, #4]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	9200      	str	r2, [sp, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a82      	ldr	r2, [pc, #520]	; (8002634 <Three_Menu+0xb18>)
 800242c:	213c      	movs	r1, #60	; 0x3c
 800242e:	2000      	movs	r0, #0
 8002430:	f004 fc12 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002434:	4b7b      	ldr	r3, [pc, #492]	; (8002624 <Three_Menu+0xb08>)
 8002436:	2200      	movs	r2, #0
 8002438:	9202      	str	r2, [sp, #8]
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7c      	ldr	r2, [pc, #496]	; (8002638 <Three_Menu+0xb1c>)
 8002448:	2146      	movs	r1, #70	; 0x46
 800244a:	2000      	movs	r0, #0
 800244c:	f004 fc04 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002450:	4b74      	ldr	r3, [pc, #464]	; (8002624 <Three_Menu+0xb08>)
 8002452:	2200      	movs	r2, #0
 8002454:	9202      	str	r2, [sp, #8]
 8002456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	9200      	str	r2, [sp, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a76      	ldr	r2, [pc, #472]	; (800263c <Three_Menu+0xb20>)
 8002464:	2150      	movs	r1, #80	; 0x50
 8002466:	2000      	movs	r0, #0
 8002468:	f004 fbf6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 800246c:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <Three_Menu+0xb08>)
 800246e:	2200      	movs	r2, #0
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	221f      	movs	r2, #31
 8002474:	9201      	str	r2, [sp, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	9200      	str	r2, [sp, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a70      	ldr	r2, [pc, #448]	; (8002640 <Three_Menu+0xb24>)
 800247e:	215a      	movs	r1, #90	; 0x5a
 8002480:	2000      	movs	r0, #0
 8002482:	f004 fbe9 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <Three_Menu+0xb08>)
 8002488:	2200      	movs	r2, #0
 800248a:	9202      	str	r2, [sp, #8]
 800248c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002490:	9201      	str	r2, [sp, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	9200      	str	r2, [sp, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6a      	ldr	r2, [pc, #424]	; (8002644 <Three_Menu+0xb28>)
 800249a:	2164      	movs	r1, #100	; 0x64
 800249c:	2000      	movs	r0, #0
 800249e:	f004 fbdb 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80024a2:	6838      	ldr	r0, [r7, #0]
 80024a4:	f005 f888 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <Three_Menu+0xaf4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
			cnt1 = 8;
 80024ae:	4b57      	ldr	r3, [pc, #348]	; (800260c <Three_Menu+0xaf0>)
 80024b0:	2208      	movs	r2, #8
 80024b2:	701a      	strb	r2, [r3, #0]
			cnt2 = 6;
 80024b4:	4b57      	ldr	r3, [pc, #348]	; (8002614 <Three_Menu+0xaf8>)
 80024b6:	2206      	movs	r2, #6
 80024b8:	701a      	strb	r2, [r3, #0]
			Check = 18;
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <Three_Menu+0xb2c>)
 80024bc:	2212      	movs	r2, #18
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e09d      	b.n	80025fe <Three_Menu+0xae2>
		}
		else if(((cnt1 == 8) && (step_DOWN == 1)) || ((cnt2 == 8) && step_UP == 1))
 80024c2:	4b52      	ldr	r3, [pc, #328]	; (800260c <Three_Menu+0xaf0>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d103      	bne.n	80024d2 <Three_Menu+0x9b6>
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <Three_Menu+0xaf4>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d009      	beq.n	80024e6 <Three_Menu+0x9ca>
 80024d2:	4b50      	ldr	r3, [pc, #320]	; (8002614 <Three_Menu+0xaf8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	f040 8091 	bne.w	80025fe <Three_Menu+0xae2>
 80024dc:	4b4e      	ldr	r3, [pc, #312]	; (8002618 <Three_Menu+0xafc>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	f040 808c 	bne.w	80025fe <Three_Menu+0xae2>
		{
			ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80024e6:	4b4d      	ldr	r3, [pc, #308]	; (800261c <Three_Menu+0xb00>)
 80024e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ec:	9202      	str	r2, [sp, #8]
 80024ee:	221f      	movs	r2, #31
 80024f0:	9201      	str	r2, [sp, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	9200      	str	r2, [sp, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a49      	ldr	r2, [pc, #292]	; (8002620 <Three_Menu+0xb04>)
 80024fa:	2100      	movs	r1, #0
 80024fc:	2030      	movs	r0, #48	; 0x30
 80024fe:	f004 fbab 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002502:	4b48      	ldr	r3, [pc, #288]	; (8002624 <Three_Menu+0xb08>)
 8002504:	2200      	movs	r2, #0
 8002506:	9202      	str	r2, [sp, #8]
 8002508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250c:	9201      	str	r2, [sp, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	9200      	str	r2, [sp, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a44      	ldr	r2, [pc, #272]	; (8002628 <Three_Menu+0xb0c>)
 8002516:	211e      	movs	r1, #30
 8002518:	2000      	movs	r0, #0
 800251a:	f004 fb9d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800251e:	4b41      	ldr	r3, [pc, #260]	; (8002624 <Three_Menu+0xb08>)
 8002520:	2200      	movs	r2, #0
 8002522:	9202      	str	r2, [sp, #8]
 8002524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002528:	9201      	str	r2, [sp, #4]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	9200      	str	r2, [sp, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3e      	ldr	r2, [pc, #248]	; (800262c <Three_Menu+0xb10>)
 8002532:	2128      	movs	r1, #40	; 0x28
 8002534:	2000      	movs	r0, #0
 8002536:	f004 fb8f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <Three_Menu+0xb08>)
 800253c:	2200      	movs	r2, #0
 800253e:	9202      	str	r2, [sp, #8]
 8002540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002544:	9201      	str	r2, [sp, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	9200      	str	r2, [sp, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a38      	ldr	r2, [pc, #224]	; (8002630 <Three_Menu+0xb14>)
 800254e:	2132      	movs	r1, #50	; 0x32
 8002550:	2000      	movs	r0, #0
 8002552:	f004 fb81 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <Three_Menu+0xb08>)
 8002558:	2200      	movs	r2, #0
 800255a:	9202      	str	r2, [sp, #8]
 800255c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002560:	9201      	str	r2, [sp, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	9200      	str	r2, [sp, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a32      	ldr	r2, [pc, #200]	; (8002634 <Three_Menu+0xb18>)
 800256a:	213c      	movs	r1, #60	; 0x3c
 800256c:	2000      	movs	r0, #0
 800256e:	f004 fb73 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <Three_Menu+0xb08>)
 8002574:	2200      	movs	r2, #0
 8002576:	9202      	str	r2, [sp, #8]
 8002578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257c:	9201      	str	r2, [sp, #4]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <Three_Menu+0xb1c>)
 8002586:	2146      	movs	r1, #70	; 0x46
 8002588:	2000      	movs	r0, #0
 800258a:	f004 fb65 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <Three_Menu+0xb08>)
 8002590:	2200      	movs	r2, #0
 8002592:	9202      	str	r2, [sp, #8]
 8002594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002598:	9201      	str	r2, [sp, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	9200      	str	r2, [sp, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a26      	ldr	r2, [pc, #152]	; (800263c <Three_Menu+0xb20>)
 80025a2:	2150      	movs	r1, #80	; 0x50
 80025a4:	2000      	movs	r0, #0
 80025a6:	f004 fb57 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <Three_Menu+0xb08>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	9202      	str	r2, [sp, #8]
 80025b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	9200      	str	r2, [sp, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a20      	ldr	r2, [pc, #128]	; (8002640 <Three_Menu+0xb24>)
 80025be:	215a      	movs	r1, #90	; 0x5a
 80025c0:	2000      	movs	r0, #0
 80025c2:	f004 fb49 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <Three_Menu+0xb08>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	9202      	str	r2, [sp, #8]
 80025cc:	221f      	movs	r2, #31
 80025ce:	9201      	str	r2, [sp, #4]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	9200      	str	r2, [sp, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <Three_Menu+0xb28>)
 80025d8:	2164      	movs	r1, #100	; 0x64
 80025da:	2000      	movs	r0, #0
 80025dc:	f004 fb3c 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80025e0:	6838      	ldr	r0, [r7, #0]
 80025e2:	f004 ffe9 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <Three_Menu+0xaf4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
			cnt1 = 1;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <Three_Menu+0xaf0>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
			cnt2 = 7;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <Three_Menu+0xaf8>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	701a      	strb	r2, [r3, #0]
			Check = 19;
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <Three_Menu+0xb2c>)
 80025fa:	2213      	movs	r2, #19
 80025fc:	701a      	strb	r2, [r3, #0]
		}
	}

	return Check;
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <Three_Menu+0xb2c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000001a 	.word	0x2000001a
 8002610:	20000121 	.word	0x20000121
 8002614:	2000001b 	.word	0x2000001b
 8002618:	20000122 	.word	0x20000122
 800261c:	20000008 	.word	0x20000008
 8002620:	0800be90 	.word	0x0800be90
 8002624:	20000000 	.word	0x20000000
 8002628:	0800be98 	.word	0x0800be98
 800262c:	0800bea0 	.word	0x0800bea0
 8002630:	0800bea8 	.word	0x0800bea8
 8002634:	0800beb0 	.word	0x0800beb0
 8002638:	0800beb8 	.word	0x0800beb8
 800263c:	0800bec0 	.word	0x0800bec0
 8002640:	0800bec8 	.word	0x0800bec8
 8002644:	0800bed0 	.word	0x0800bed0
 8002648:	20000123 	.word	0x20000123

0800264c <Four_Menu>:
//Функция обработки действий подменю: "Цифровые входы"
//Принимает флаги нажатия кнопок "Вниз";"Вверх";
//Принимает переменную времени задержки обработки прерываний
//Возвращает выбранную позицию в списке меню
uint8_t Four_Menu(uint8_t DOWN, uint8_t UP, uint32_t time)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af04      	add	r7, sp, #16
 8002652:	4603      	mov	r3, r0
 8002654:	603a      	str	r2, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	460b      	mov	r3, r1
 800265a:	71bb      	strb	r3, [r7, #6]
	step_DOWN = DOWN;
 800265c:	4aa7      	ldr	r2, [pc, #668]	; (80028fc <Four_Menu+0x2b0>)
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	7013      	strb	r3, [r2, #0]
	step_UP = UP;
 8002662:	4aa7      	ldr	r2, [pc, #668]	; (8002900 <Four_Menu+0x2b4>)
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	7013      	strb	r3, [r2, #0]
	if((step_DOWN) || (step_UP))
 8002668:	4ba4      	ldr	r3, [pc, #656]	; (80028fc <Four_Menu+0x2b0>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d104      	bne.n	800267a <Four_Menu+0x2e>
 8002670:	4ba3      	ldr	r3, [pc, #652]	; (8002900 <Four_Menu+0x2b4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 855a 	beq.w	800312e <Four_Menu+0xae2>
	{
		if(((cnt1 == 1) && (step_DOWN == 1)) || ((cnt2 == 1) && step_UP == 1))
 800267a:	4ba2      	ldr	r3, [pc, #648]	; (8002904 <Four_Menu+0x2b8>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d103      	bne.n	800268a <Four_Menu+0x3e>
 8002682:	4b9e      	ldr	r3, [pc, #632]	; (80028fc <Four_Menu+0x2b0>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d009      	beq.n	800269e <Four_Menu+0x52>
 800268a:	4b9f      	ldr	r3, [pc, #636]	; (8002908 <Four_Menu+0x2bc>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	f040 8093 	bne.w	80027ba <Four_Menu+0x16e>
 8002694:	4b9a      	ldr	r3, [pc, #616]	; (8002900 <Four_Menu+0x2b4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	f040 808e 	bne.w	80027ba <Four_Menu+0x16e>
		{
			ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800269e:	4b9b      	ldr	r3, [pc, #620]	; (800290c <Four_Menu+0x2c0>)
 80026a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a4:	9202      	str	r2, [sp, #8]
 80026a6:	221f      	movs	r2, #31
 80026a8:	9201      	str	r2, [sp, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	9200      	str	r2, [sp, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a97      	ldr	r2, [pc, #604]	; (8002910 <Four_Menu+0x2c4>)
 80026b2:	2100      	movs	r1, #0
 80026b4:	202a      	movs	r0, #42	; 0x2a
 80026b6:	f004 facf 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80026ba:	4b96      	ldr	r3, [pc, #600]	; (8002914 <Four_Menu+0x2c8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	9202      	str	r2, [sp, #8]
 80026c0:	221f      	movs	r2, #31
 80026c2:	9201      	str	r2, [sp, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	9200      	str	r2, [sp, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a93      	ldr	r2, [pc, #588]	; (8002918 <Four_Menu+0x2cc>)
 80026cc:	211e      	movs	r1, #30
 80026ce:	2000      	movs	r0, #0
 80026d0:	f004 fac2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80026d4:	4b8f      	ldr	r3, [pc, #572]	; (8002914 <Four_Menu+0x2c8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	9202      	str	r2, [sp, #8]
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	9201      	str	r2, [sp, #4]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	9200      	str	r2, [sp, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a8d      	ldr	r2, [pc, #564]	; (800291c <Four_Menu+0x2d0>)
 80026e8:	2128      	movs	r1, #40	; 0x28
 80026ea:	2000      	movs	r0, #0
 80026ec:	f004 fab4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80026f0:	4b88      	ldr	r3, [pc, #544]	; (8002914 <Four_Menu+0x2c8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	9202      	str	r2, [sp, #8]
 80026f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026fa:	9201      	str	r2, [sp, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	9200      	str	r2, [sp, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a87      	ldr	r2, [pc, #540]	; (8002920 <Four_Menu+0x2d4>)
 8002704:	2132      	movs	r1, #50	; 0x32
 8002706:	2000      	movs	r0, #0
 8002708:	f004 faa6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800270c:	4b81      	ldr	r3, [pc, #516]	; (8002914 <Four_Menu+0x2c8>)
 800270e:	2200      	movs	r2, #0
 8002710:	9202      	str	r2, [sp, #8]
 8002712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002716:	9201      	str	r2, [sp, #4]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	9200      	str	r2, [sp, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a81      	ldr	r2, [pc, #516]	; (8002924 <Four_Menu+0x2d8>)
 8002720:	213c      	movs	r1, #60	; 0x3c
 8002722:	2000      	movs	r0, #0
 8002724:	f004 fa98 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002728:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <Four_Menu+0x2c8>)
 800272a:	2200      	movs	r2, #0
 800272c:	9202      	str	r2, [sp, #8]
 800272e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002732:	9201      	str	r2, [sp, #4]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	9200      	str	r2, [sp, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7b      	ldr	r2, [pc, #492]	; (8002928 <Four_Menu+0x2dc>)
 800273c:	2146      	movs	r1, #70	; 0x46
 800273e:	2000      	movs	r0, #0
 8002740:	f004 fa8a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002744:	4b73      	ldr	r3, [pc, #460]	; (8002914 <Four_Menu+0x2c8>)
 8002746:	2200      	movs	r2, #0
 8002748:	9202      	str	r2, [sp, #8]
 800274a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800274e:	9201      	str	r2, [sp, #4]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	9200      	str	r2, [sp, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a75      	ldr	r2, [pc, #468]	; (800292c <Four_Menu+0x2e0>)
 8002758:	2150      	movs	r1, #80	; 0x50
 800275a:	2000      	movs	r0, #0
 800275c:	f004 fa7c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002760:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <Four_Menu+0x2c8>)
 8002762:	2200      	movs	r2, #0
 8002764:	9202      	str	r2, [sp, #8]
 8002766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276a:	9201      	str	r2, [sp, #4]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	9200      	str	r2, [sp, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6f      	ldr	r2, [pc, #444]	; (8002930 <Four_Menu+0x2e4>)
 8002774:	215a      	movs	r1, #90	; 0x5a
 8002776:	2000      	movs	r0, #0
 8002778:	f004 fa6e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800277c:	4b65      	ldr	r3, [pc, #404]	; (8002914 <Four_Menu+0x2c8>)
 800277e:	2200      	movs	r2, #0
 8002780:	9202      	str	r2, [sp, #8]
 8002782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002786:	9201      	str	r2, [sp, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	9200      	str	r2, [sp, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a69      	ldr	r2, [pc, #420]	; (8002934 <Four_Menu+0x2e8>)
 8002790:	2164      	movs	r1, #100	; 0x64
 8002792:	2000      	movs	r0, #0
 8002794:	f004 fa60 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8002798:	6838      	ldr	r0, [r7, #0]
 800279a:	f004 ff0d 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 800279e:	4b57      	ldr	r3, [pc, #348]	; (80028fc <Four_Menu+0x2b0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
			cnt1 = 2;
 80027a4:	4b57      	ldr	r3, [pc, #348]	; (8002904 <Four_Menu+0x2b8>)
 80027a6:	2202      	movs	r2, #2
 80027a8:	701a      	strb	r2, [r3, #0]
			cnt2 = 8;
 80027aa:	4b57      	ldr	r3, [pc, #348]	; (8002908 <Four_Menu+0x2bc>)
 80027ac:	2208      	movs	r2, #8
 80027ae:	701a      	strb	r2, [r3, #0]
			Check = 20;
 80027b0:	4b61      	ldr	r3, [pc, #388]	; (8002938 <Four_Menu+0x2ec>)
 80027b2:	2214      	movs	r2, #20
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	f000 bcba 	b.w	800312e <Four_Menu+0xae2>
		}
		else if(((cnt1 == 2) && (step_DOWN == 1)) || ((cnt2 == 2) && step_UP == 1))
 80027ba:	4b52      	ldr	r3, [pc, #328]	; (8002904 <Four_Menu+0x2b8>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d103      	bne.n	80027ca <Four_Menu+0x17e>
 80027c2:	4b4e      	ldr	r3, [pc, #312]	; (80028fc <Four_Menu+0x2b0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d009      	beq.n	80027de <Four_Menu+0x192>
 80027ca:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <Four_Menu+0x2bc>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	f040 80b4 	bne.w	800293c <Four_Menu+0x2f0>
 80027d4:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <Four_Menu+0x2b4>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	f040 80af 	bne.w	800293c <Four_Menu+0x2f0>
		{
			ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80027de:	4b4b      	ldr	r3, [pc, #300]	; (800290c <Four_Menu+0x2c0>)
 80027e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e4:	9202      	str	r2, [sp, #8]
 80027e6:	221f      	movs	r2, #31
 80027e8:	9201      	str	r2, [sp, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	9200      	str	r2, [sp, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a47      	ldr	r2, [pc, #284]	; (8002910 <Four_Menu+0x2c4>)
 80027f2:	2100      	movs	r1, #0
 80027f4:	202a      	movs	r0, #42	; 0x2a
 80027f6:	f004 fa2f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80027fa:	4b46      	ldr	r3, [pc, #280]	; (8002914 <Four_Menu+0x2c8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	9202      	str	r2, [sp, #8]
 8002800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002804:	9201      	str	r2, [sp, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a42      	ldr	r2, [pc, #264]	; (8002918 <Four_Menu+0x2cc>)
 800280e:	211e      	movs	r1, #30
 8002810:	2000      	movs	r0, #0
 8002812:	f004 fa21 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8002816:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <Four_Menu+0x2c8>)
 8002818:	2200      	movs	r2, #0
 800281a:	9202      	str	r2, [sp, #8]
 800281c:	221f      	movs	r2, #31
 800281e:	9201      	str	r2, [sp, #4]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	9200      	str	r2, [sp, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a3d      	ldr	r2, [pc, #244]	; (800291c <Four_Menu+0x2d0>)
 8002828:	2128      	movs	r1, #40	; 0x28
 800282a:	2000      	movs	r0, #0
 800282c:	f004 fa14 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002830:	4b38      	ldr	r3, [pc, #224]	; (8002914 <Four_Menu+0x2c8>)
 8002832:	2200      	movs	r2, #0
 8002834:	9202      	str	r2, [sp, #8]
 8002836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283a:	9201      	str	r2, [sp, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	9200      	str	r2, [sp, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a37      	ldr	r2, [pc, #220]	; (8002920 <Four_Menu+0x2d4>)
 8002844:	2132      	movs	r1, #50	; 0x32
 8002846:	2000      	movs	r0, #0
 8002848:	f004 fa06 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <Four_Menu+0x2c8>)
 800284e:	2200      	movs	r2, #0
 8002850:	9202      	str	r2, [sp, #8]
 8002852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002856:	9201      	str	r2, [sp, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	9200      	str	r2, [sp, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a31      	ldr	r2, [pc, #196]	; (8002924 <Four_Menu+0x2d8>)
 8002860:	213c      	movs	r1, #60	; 0x3c
 8002862:	2000      	movs	r0, #0
 8002864:	f004 f9f8 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002868:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <Four_Menu+0x2c8>)
 800286a:	2200      	movs	r2, #0
 800286c:	9202      	str	r2, [sp, #8]
 800286e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002872:	9201      	str	r2, [sp, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	9200      	str	r2, [sp, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2b      	ldr	r2, [pc, #172]	; (8002928 <Four_Menu+0x2dc>)
 800287c:	2146      	movs	r1, #70	; 0x46
 800287e:	2000      	movs	r0, #0
 8002880:	f004 f9ea 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002884:	4b23      	ldr	r3, [pc, #140]	; (8002914 <Four_Menu+0x2c8>)
 8002886:	2200      	movs	r2, #0
 8002888:	9202      	str	r2, [sp, #8]
 800288a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800288e:	9201      	str	r2, [sp, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a25      	ldr	r2, [pc, #148]	; (800292c <Four_Menu+0x2e0>)
 8002898:	2150      	movs	r1, #80	; 0x50
 800289a:	2000      	movs	r0, #0
 800289c:	f004 f9dc 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <Four_Menu+0x2c8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	9202      	str	r2, [sp, #8]
 80028a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028aa:	9201      	str	r2, [sp, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	9200      	str	r2, [sp, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <Four_Menu+0x2e4>)
 80028b4:	215a      	movs	r1, #90	; 0x5a
 80028b6:	2000      	movs	r0, #0
 80028b8:	f004 f9ce 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <Four_Menu+0x2c8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	9202      	str	r2, [sp, #8]
 80028c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c6:	9201      	str	r2, [sp, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	9200      	str	r2, [sp, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a19      	ldr	r2, [pc, #100]	; (8002934 <Four_Menu+0x2e8>)
 80028d0:	2164      	movs	r1, #100	; 0x64
 80028d2:	2000      	movs	r0, #0
 80028d4:	f004 f9c0 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80028d8:	6838      	ldr	r0, [r7, #0]
 80028da:	f004 fe6d 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <Four_Menu+0x2b0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
			cnt1 = 3;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <Four_Menu+0x2b8>)
 80028e6:	2203      	movs	r2, #3
 80028e8:	701a      	strb	r2, [r3, #0]
			cnt2 = 1;
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <Four_Menu+0x2bc>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
			Check = 21;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <Four_Menu+0x2ec>)
 80028f2:	2215      	movs	r2, #21
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	f000 bc1a 	b.w	800312e <Four_Menu+0xae2>
 80028fa:	bf00      	nop
 80028fc:	20000121 	.word	0x20000121
 8002900:	20000122 	.word	0x20000122
 8002904:	2000001a 	.word	0x2000001a
 8002908:	2000001b 	.word	0x2000001b
 800290c:	20000008 	.word	0x20000008
 8002910:	0800bed8 	.word	0x0800bed8
 8002914:	20000000 	.word	0x20000000
 8002918:	0800bee0 	.word	0x0800bee0
 800291c:	0800bee8 	.word	0x0800bee8
 8002920:	0800bef0 	.word	0x0800bef0
 8002924:	0800bef8 	.word	0x0800bef8
 8002928:	0800bf00 	.word	0x0800bf00
 800292c:	0800bf08 	.word	0x0800bf08
 8002930:	0800bf10 	.word	0x0800bf10
 8002934:	0800bf18 	.word	0x0800bf18
 8002938:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 3) && (step_DOWN == 1)) || ((cnt2 == 3) && step_UP == 1))
 800293c:	4b9e      	ldr	r3, [pc, #632]	; (8002bb8 <Four_Menu+0x56c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d103      	bne.n	800294c <Four_Menu+0x300>
 8002944:	4b9d      	ldr	r3, [pc, #628]	; (8002bbc <Four_Menu+0x570>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d009      	beq.n	8002960 <Four_Menu+0x314>
 800294c:	4b9c      	ldr	r3, [pc, #624]	; (8002bc0 <Four_Menu+0x574>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	f040 8092 	bne.w	8002a7a <Four_Menu+0x42e>
 8002956:	4b9b      	ldr	r3, [pc, #620]	; (8002bc4 <Four_Menu+0x578>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	f040 808d 	bne.w	8002a7a <Four_Menu+0x42e>
		{
			ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8002960:	4b99      	ldr	r3, [pc, #612]	; (8002bc8 <Four_Menu+0x57c>)
 8002962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002966:	9202      	str	r2, [sp, #8]
 8002968:	221f      	movs	r2, #31
 800296a:	9201      	str	r2, [sp, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	9200      	str	r2, [sp, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a96      	ldr	r2, [pc, #600]	; (8002bcc <Four_Menu+0x580>)
 8002974:	2100      	movs	r1, #0
 8002976:	202a      	movs	r0, #42	; 0x2a
 8002978:	f004 f96e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800297c:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <Four_Menu+0x584>)
 800297e:	2200      	movs	r2, #0
 8002980:	9202      	str	r2, [sp, #8]
 8002982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	9200      	str	r2, [sp, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a91      	ldr	r2, [pc, #580]	; (8002bd4 <Four_Menu+0x588>)
 8002990:	211e      	movs	r1, #30
 8002992:	2000      	movs	r0, #0
 8002994:	f004 f960 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002998:	4b8d      	ldr	r3, [pc, #564]	; (8002bd0 <Four_Menu+0x584>)
 800299a:	2200      	movs	r2, #0
 800299c:	9202      	str	r2, [sp, #8]
 800299e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a2:	9201      	str	r2, [sp, #4]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	9200      	str	r2, [sp, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a8b      	ldr	r2, [pc, #556]	; (8002bd8 <Four_Menu+0x58c>)
 80029ac:	2128      	movs	r1, #40	; 0x28
 80029ae:	2000      	movs	r0, #0
 80029b0:	f004 f952 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80029b4:	4b86      	ldr	r3, [pc, #536]	; (8002bd0 <Four_Menu+0x584>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	9202      	str	r2, [sp, #8]
 80029ba:	221f      	movs	r2, #31
 80029bc:	9201      	str	r2, [sp, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	9200      	str	r2, [sp, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a85      	ldr	r2, [pc, #532]	; (8002bdc <Four_Menu+0x590>)
 80029c6:	2132      	movs	r1, #50	; 0x32
 80029c8:	2000      	movs	r0, #0
 80029ca:	f004 f945 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80029ce:	4b80      	ldr	r3, [pc, #512]	; (8002bd0 <Four_Menu+0x584>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	9202      	str	r2, [sp, #8]
 80029d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d8:	9201      	str	r2, [sp, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	9200      	str	r2, [sp, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a7f      	ldr	r2, [pc, #508]	; (8002be0 <Four_Menu+0x594>)
 80029e2:	213c      	movs	r1, #60	; 0x3c
 80029e4:	2000      	movs	r0, #0
 80029e6:	f004 f937 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80029ea:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <Four_Menu+0x584>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	9202      	str	r2, [sp, #8]
 80029f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f4:	9201      	str	r2, [sp, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	9200      	str	r2, [sp, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a79      	ldr	r2, [pc, #484]	; (8002be4 <Four_Menu+0x598>)
 80029fe:	2146      	movs	r1, #70	; 0x46
 8002a00:	2000      	movs	r0, #0
 8002a02:	f004 f929 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002a06:	4b72      	ldr	r3, [pc, #456]	; (8002bd0 <Four_Menu+0x584>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	9202      	str	r2, [sp, #8]
 8002a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a10:	9201      	str	r2, [sp, #4]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	9200      	str	r2, [sp, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a73      	ldr	r2, [pc, #460]	; (8002be8 <Four_Menu+0x59c>)
 8002a1a:	2150      	movs	r1, #80	; 0x50
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f004 f91b 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002a22:	4b6b      	ldr	r3, [pc, #428]	; (8002bd0 <Four_Menu+0x584>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	9202      	str	r2, [sp, #8]
 8002a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a2c:	9201      	str	r2, [sp, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	9200      	str	r2, [sp, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6d      	ldr	r2, [pc, #436]	; (8002bec <Four_Menu+0x5a0>)
 8002a36:	215a      	movs	r1, #90	; 0x5a
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f004 f90d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002a3e:	4b64      	ldr	r3, [pc, #400]	; (8002bd0 <Four_Menu+0x584>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	9202      	str	r2, [sp, #8]
 8002a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a48:	9201      	str	r2, [sp, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a67      	ldr	r2, [pc, #412]	; (8002bf0 <Four_Menu+0x5a4>)
 8002a52:	2164      	movs	r1, #100	; 0x64
 8002a54:	2000      	movs	r0, #0
 8002a56:	f004 f8ff 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8002a5a:	6838      	ldr	r0, [r7, #0]
 8002a5c:	f004 fdac 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8002a60:	4b56      	ldr	r3, [pc, #344]	; (8002bbc <Four_Menu+0x570>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
			cnt1 = 4;
 8002a66:	4b54      	ldr	r3, [pc, #336]	; (8002bb8 <Four_Menu+0x56c>)
 8002a68:	2204      	movs	r2, #4
 8002a6a:	701a      	strb	r2, [r3, #0]
			cnt2 = 2;
 8002a6c:	4b54      	ldr	r3, [pc, #336]	; (8002bc0 <Four_Menu+0x574>)
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
			Check = 22;
 8002a72:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <Four_Menu+0x5a8>)
 8002a74:	2216      	movs	r2, #22
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e359      	b.n	800312e <Four_Menu+0xae2>
		}
		else if(((cnt1 == 4) && (step_DOWN == 1)) || ((cnt2 == 4) && step_UP == 1))
 8002a7a:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <Four_Menu+0x56c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d103      	bne.n	8002a8a <Four_Menu+0x43e>
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <Four_Menu+0x570>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d009      	beq.n	8002a9e <Four_Menu+0x452>
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <Four_Menu+0x574>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	f040 80b2 	bne.w	8002bf8 <Four_Menu+0x5ac>
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <Four_Menu+0x578>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 80ad 	bne.w	8002bf8 <Four_Menu+0x5ac>
		{
			ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <Four_Menu+0x57c>)
 8002aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa4:	9202      	str	r2, [sp, #8]
 8002aa6:	221f      	movs	r2, #31
 8002aa8:	9201      	str	r2, [sp, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	9200      	str	r2, [sp, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a46      	ldr	r2, [pc, #280]	; (8002bcc <Four_Menu+0x580>)
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	202a      	movs	r0, #42	; 0x2a
 8002ab6:	f004 f8cf 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002aba:	4b45      	ldr	r3, [pc, #276]	; (8002bd0 <Four_Menu+0x584>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	9202      	str	r2, [sp, #8]
 8002ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac4:	9201      	str	r2, [sp, #4]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	9200      	str	r2, [sp, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a41      	ldr	r2, [pc, #260]	; (8002bd4 <Four_Menu+0x588>)
 8002ace:	211e      	movs	r1, #30
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f004 f8c1 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	; (8002bd0 <Four_Menu+0x584>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	9202      	str	r2, [sp, #8]
 8002adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	9200      	str	r2, [sp, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a3b      	ldr	r2, [pc, #236]	; (8002bd8 <Four_Menu+0x58c>)
 8002aea:	2128      	movs	r1, #40	; 0x28
 8002aec:	2000      	movs	r0, #0
 8002aee:	f004 f8b3 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002af2:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <Four_Menu+0x584>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	9202      	str	r2, [sp, #8]
 8002af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afc:	9201      	str	r2, [sp, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	9200      	str	r2, [sp, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a35      	ldr	r2, [pc, #212]	; (8002bdc <Four_Menu+0x590>)
 8002b06:	2132      	movs	r1, #50	; 0x32
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f004 f8a5 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <Four_Menu+0x584>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	9202      	str	r2, [sp, #8]
 8002b14:	221f      	movs	r2, #31
 8002b16:	9201      	str	r2, [sp, #4]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	9200      	str	r2, [sp, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <Four_Menu+0x594>)
 8002b20:	213c      	movs	r1, #60	; 0x3c
 8002b22:	2000      	movs	r0, #0
 8002b24:	f004 f898 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <Four_Menu+0x584>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	9202      	str	r2, [sp, #8]
 8002b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b32:	9201      	str	r2, [sp, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	9200      	str	r2, [sp, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <Four_Menu+0x598>)
 8002b3c:	2146      	movs	r1, #70	; 0x46
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f004 f88a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002b44:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <Four_Menu+0x584>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	9202      	str	r2, [sp, #8]
 8002b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b4e:	9201      	str	r2, [sp, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	9200      	str	r2, [sp, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a24      	ldr	r2, [pc, #144]	; (8002be8 <Four_Menu+0x59c>)
 8002b58:	2150      	movs	r1, #80	; 0x50
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f004 f87c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <Four_Menu+0x584>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	9202      	str	r2, [sp, #8]
 8002b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6a:	9201      	str	r2, [sp, #4]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	9200      	str	r2, [sp, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <Four_Menu+0x5a0>)
 8002b74:	215a      	movs	r1, #90	; 0x5a
 8002b76:	2000      	movs	r0, #0
 8002b78:	f004 f86e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <Four_Menu+0x584>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	9202      	str	r2, [sp, #8]
 8002b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b86:	9201      	str	r2, [sp, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	9200      	str	r2, [sp, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <Four_Menu+0x5a4>)
 8002b90:	2164      	movs	r1, #100	; 0x64
 8002b92:	2000      	movs	r0, #0
 8002b94:	f004 f860 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8002b98:	6838      	ldr	r0, [r7, #0]
 8002b9a:	f004 fd0d 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <Four_Menu+0x570>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
			cnt1 = 5;
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <Four_Menu+0x56c>)
 8002ba6:	2205      	movs	r2, #5
 8002ba8:	701a      	strb	r2, [r3, #0]
			cnt2 = 3;
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <Four_Menu+0x574>)
 8002bac:	2203      	movs	r2, #3
 8002bae:	701a      	strb	r2, [r3, #0]
			Check = 23;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <Four_Menu+0x5a8>)
 8002bb2:	2217      	movs	r2, #23
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e2ba      	b.n	800312e <Four_Menu+0xae2>
 8002bb8:	2000001a 	.word	0x2000001a
 8002bbc:	20000121 	.word	0x20000121
 8002bc0:	2000001b 	.word	0x2000001b
 8002bc4:	20000122 	.word	0x20000122
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	0800bed8 	.word	0x0800bed8
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	0800bee0 	.word	0x0800bee0
 8002bd8:	0800bee8 	.word	0x0800bee8
 8002bdc:	0800bef0 	.word	0x0800bef0
 8002be0:	0800bef8 	.word	0x0800bef8
 8002be4:	0800bf00 	.word	0x0800bf00
 8002be8:	0800bf08 	.word	0x0800bf08
 8002bec:	0800bf10 	.word	0x0800bf10
 8002bf0:	0800bf18 	.word	0x0800bf18
 8002bf4:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 5) && (step_DOWN == 1)) || ((cnt2 == 5) && step_UP == 1))
 8002bf8:	4b9e      	ldr	r3, [pc, #632]	; (8002e74 <Four_Menu+0x828>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d103      	bne.n	8002c08 <Four_Menu+0x5bc>
 8002c00:	4b9d      	ldr	r3, [pc, #628]	; (8002e78 <Four_Menu+0x82c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d009      	beq.n	8002c1c <Four_Menu+0x5d0>
 8002c08:	4b9c      	ldr	r3, [pc, #624]	; (8002e7c <Four_Menu+0x830>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	f040 8092 	bne.w	8002d36 <Four_Menu+0x6ea>
 8002c12:	4b9b      	ldr	r3, [pc, #620]	; (8002e80 <Four_Menu+0x834>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 808d 	bne.w	8002d36 <Four_Menu+0x6ea>
		{
			ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8002c1c:	4b99      	ldr	r3, [pc, #612]	; (8002e84 <Four_Menu+0x838>)
 8002c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c22:	9202      	str	r2, [sp, #8]
 8002c24:	221f      	movs	r2, #31
 8002c26:	9201      	str	r2, [sp, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	9200      	str	r2, [sp, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a96      	ldr	r2, [pc, #600]	; (8002e88 <Four_Menu+0x83c>)
 8002c30:	2100      	movs	r1, #0
 8002c32:	202a      	movs	r0, #42	; 0x2a
 8002c34:	f004 f810 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c38:	4b94      	ldr	r3, [pc, #592]	; (8002e8c <Four_Menu+0x840>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	9202      	str	r2, [sp, #8]
 8002c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c42:	9201      	str	r2, [sp, #4]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	9200      	str	r2, [sp, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a91      	ldr	r2, [pc, #580]	; (8002e90 <Four_Menu+0x844>)
 8002c4c:	211e      	movs	r1, #30
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f004 f802 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c54:	4b8d      	ldr	r3, [pc, #564]	; (8002e8c <Four_Menu+0x840>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	9202      	str	r2, [sp, #8]
 8002c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5e:	9201      	str	r2, [sp, #4]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	9200      	str	r2, [sp, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a8b      	ldr	r2, [pc, #556]	; (8002e94 <Four_Menu+0x848>)
 8002c68:	2128      	movs	r1, #40	; 0x28
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f003 fff4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c70:	4b86      	ldr	r3, [pc, #536]	; (8002e8c <Four_Menu+0x840>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	9202      	str	r2, [sp, #8]
 8002c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7a:	9201      	str	r2, [sp, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	9200      	str	r2, [sp, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a85      	ldr	r2, [pc, #532]	; (8002e98 <Four_Menu+0x84c>)
 8002c84:	2132      	movs	r1, #50	; 0x32
 8002c86:	2000      	movs	r0, #0
 8002c88:	f003 ffe6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c8c:	4b7f      	ldr	r3, [pc, #508]	; (8002e8c <Four_Menu+0x840>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	9202      	str	r2, [sp, #8]
 8002c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c96:	9201      	str	r2, [sp, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	9200      	str	r2, [sp, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7f      	ldr	r2, [pc, #508]	; (8002e9c <Four_Menu+0x850>)
 8002ca0:	213c      	movs	r1, #60	; 0x3c
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f003 ffd8 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8002ca8:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <Four_Menu+0x840>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	221f      	movs	r2, #31
 8002cb0:	9201      	str	r2, [sp, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	9200      	str	r2, [sp, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a79      	ldr	r2, [pc, #484]	; (8002ea0 <Four_Menu+0x854>)
 8002cba:	2146      	movs	r1, #70	; 0x46
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f003 ffcb 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002cc2:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <Four_Menu+0x840>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	9202      	str	r2, [sp, #8]
 8002cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ccc:	9201      	str	r2, [sp, #4]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	9200      	str	r2, [sp, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a73      	ldr	r2, [pc, #460]	; (8002ea4 <Four_Menu+0x858>)
 8002cd6:	2150      	movs	r1, #80	; 0x50
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f003 ffbd 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002cde:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <Four_Menu+0x840>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	9202      	str	r2, [sp, #8]
 8002ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	9200      	str	r2, [sp, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a6d      	ldr	r2, [pc, #436]	; (8002ea8 <Four_Menu+0x85c>)
 8002cf2:	215a      	movs	r1, #90	; 0x5a
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f003 ffaf 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002cfa:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <Four_Menu+0x840>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	9202      	str	r2, [sp, #8]
 8002d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	9200      	str	r2, [sp, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a67      	ldr	r2, [pc, #412]	; (8002eac <Four_Menu+0x860>)
 8002d0e:	2164      	movs	r1, #100	; 0x64
 8002d10:	2000      	movs	r0, #0
 8002d12:	f003 ffa1 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8002d16:	6838      	ldr	r0, [r7, #0]
 8002d18:	f004 fc4e 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8002d1c:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <Four_Menu+0x82c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
			cnt1 = 6;
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <Four_Menu+0x828>)
 8002d24:	2206      	movs	r2, #6
 8002d26:	701a      	strb	r2, [r3, #0]
			cnt2 = 4;
 8002d28:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <Four_Menu+0x830>)
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	701a      	strb	r2, [r3, #0]
			Check = 24;
 8002d2e:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <Four_Menu+0x864>)
 8002d30:	2218      	movs	r2, #24
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e1fb      	b.n	800312e <Four_Menu+0xae2>
		}
		else if(((cnt1 == 6) && (step_DOWN == 1)) || ((cnt2 == 6) && step_UP == 1))
 8002d36:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <Four_Menu+0x828>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d103      	bne.n	8002d46 <Four_Menu+0x6fa>
 8002d3e:	4b4e      	ldr	r3, [pc, #312]	; (8002e78 <Four_Menu+0x82c>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d009      	beq.n	8002d5a <Four_Menu+0x70e>
 8002d46:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <Four_Menu+0x830>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	f040 80b2 	bne.w	8002eb4 <Four_Menu+0x868>
 8002d50:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <Four_Menu+0x834>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	f040 80ad 	bne.w	8002eb4 <Four_Menu+0x868>
		{
			ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <Four_Menu+0x838>)
 8002d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d60:	9202      	str	r2, [sp, #8]
 8002d62:	221f      	movs	r2, #31
 8002d64:	9201      	str	r2, [sp, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	9200      	str	r2, [sp, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a46      	ldr	r2, [pc, #280]	; (8002e88 <Four_Menu+0x83c>)
 8002d6e:	2100      	movs	r1, #0
 8002d70:	202a      	movs	r0, #42	; 0x2a
 8002d72:	f003 ff71 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002d76:	4b45      	ldr	r3, [pc, #276]	; (8002e8c <Four_Menu+0x840>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	9202      	str	r2, [sp, #8]
 8002d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d80:	9201      	str	r2, [sp, #4]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	9200      	str	r2, [sp, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a41      	ldr	r2, [pc, #260]	; (8002e90 <Four_Menu+0x844>)
 8002d8a:	211e      	movs	r1, #30
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f003 ff63 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002d92:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <Four_Menu+0x840>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	9202      	str	r2, [sp, #8]
 8002d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d9c:	9201      	str	r2, [sp, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	9200      	str	r2, [sp, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <Four_Menu+0x848>)
 8002da6:	2128      	movs	r1, #40	; 0x28
 8002da8:	2000      	movs	r0, #0
 8002daa:	f003 ff55 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <Four_Menu+0x840>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	9202      	str	r2, [sp, #8]
 8002db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002db8:	9201      	str	r2, [sp, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	9200      	str	r2, [sp, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <Four_Menu+0x84c>)
 8002dc2:	2132      	movs	r1, #50	; 0x32
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f003 ff47 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002dca:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <Four_Menu+0x840>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	9202      	str	r2, [sp, #8]
 8002dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd4:	9201      	str	r2, [sp, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	9200      	str	r2, [sp, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <Four_Menu+0x850>)
 8002dde:	213c      	movs	r1, #60	; 0x3c
 8002de0:	2000      	movs	r0, #0
 8002de2:	f003 ff39 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002de6:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <Four_Menu+0x840>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	9202      	str	r2, [sp, #8]
 8002dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df0:	9201      	str	r2, [sp, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	9200      	str	r2, [sp, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <Four_Menu+0x854>)
 8002dfa:	2146      	movs	r1, #70	; 0x46
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f003 ff2b 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <Four_Menu+0x840>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	9202      	str	r2, [sp, #8]
 8002e08:	221f      	movs	r2, #31
 8002e0a:	9201      	str	r2, [sp, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <Four_Menu+0x858>)
 8002e14:	2150      	movs	r1, #80	; 0x50
 8002e16:	2000      	movs	r0, #0
 8002e18:	f003 ff1e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <Four_Menu+0x840>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	9202      	str	r2, [sp, #8]
 8002e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e26:	9201      	str	r2, [sp, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	9200      	str	r2, [sp, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <Four_Menu+0x85c>)
 8002e30:	215a      	movs	r1, #90	; 0x5a
 8002e32:	2000      	movs	r0, #0
 8002e34:	f003 ff10 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <Four_Menu+0x840>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	9202      	str	r2, [sp, #8]
 8002e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e42:	9201      	str	r2, [sp, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	9200      	str	r2, [sp, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <Four_Menu+0x860>)
 8002e4c:	2164      	movs	r1, #100	; 0x64
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f003 ff02 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8002e54:	6838      	ldr	r0, [r7, #0]
 8002e56:	f004 fbaf 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <Four_Menu+0x82c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
			cnt1 = 7;
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <Four_Menu+0x828>)
 8002e62:	2207      	movs	r2, #7
 8002e64:	701a      	strb	r2, [r3, #0]
			cnt2 = 5;
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <Four_Menu+0x830>)
 8002e68:	2205      	movs	r2, #5
 8002e6a:	701a      	strb	r2, [r3, #0]
			Check = 25;
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <Four_Menu+0x864>)
 8002e6e:	2219      	movs	r2, #25
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e15c      	b.n	800312e <Four_Menu+0xae2>
 8002e74:	2000001a 	.word	0x2000001a
 8002e78:	20000121 	.word	0x20000121
 8002e7c:	2000001b 	.word	0x2000001b
 8002e80:	20000122 	.word	0x20000122
 8002e84:	20000008 	.word	0x20000008
 8002e88:	0800bed8 	.word	0x0800bed8
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	0800bee0 	.word	0x0800bee0
 8002e94:	0800bee8 	.word	0x0800bee8
 8002e98:	0800bef0 	.word	0x0800bef0
 8002e9c:	0800bef8 	.word	0x0800bef8
 8002ea0:	0800bf00 	.word	0x0800bf00
 8002ea4:	0800bf08 	.word	0x0800bf08
 8002ea8:	0800bf10 	.word	0x0800bf10
 8002eac:	0800bf18 	.word	0x0800bf18
 8002eb0:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 7) && (step_DOWN == 1)) || ((cnt2 == 7) && step_UP == 1))
 8002eb4:	4ba1      	ldr	r3, [pc, #644]	; (800313c <Four_Menu+0xaf0>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d103      	bne.n	8002ec4 <Four_Menu+0x878>
 8002ebc:	4ba0      	ldr	r3, [pc, #640]	; (8003140 <Four_Menu+0xaf4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d009      	beq.n	8002ed8 <Four_Menu+0x88c>
 8002ec4:	4b9f      	ldr	r3, [pc, #636]	; (8003144 <Four_Menu+0xaf8>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b07      	cmp	r3, #7
 8002eca:	f040 8092 	bne.w	8002ff2 <Four_Menu+0x9a6>
 8002ece:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <Four_Menu+0xafc>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	f040 808d 	bne.w	8002ff2 <Four_Menu+0x9a6>
		{
			ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8002ed8:	4b9c      	ldr	r3, [pc, #624]	; (800314c <Four_Menu+0xb00>)
 8002eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ede:	9202      	str	r2, [sp, #8]
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	9201      	str	r2, [sp, #4]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	9200      	str	r2, [sp, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a99      	ldr	r2, [pc, #612]	; (8003150 <Four_Menu+0xb04>)
 8002eec:	2100      	movs	r1, #0
 8002eee:	202a      	movs	r0, #42	; 0x2a
 8002ef0:	f003 feb2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002ef4:	4b97      	ldr	r3, [pc, #604]	; (8003154 <Four_Menu+0xb08>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	9202      	str	r2, [sp, #8]
 8002efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efe:	9201      	str	r2, [sp, #4]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	9200      	str	r2, [sp, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a94      	ldr	r2, [pc, #592]	; (8003158 <Four_Menu+0xb0c>)
 8002f08:	211e      	movs	r1, #30
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f003 fea4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f10:	4b90      	ldr	r3, [pc, #576]	; (8003154 <Four_Menu+0xb08>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	9202      	str	r2, [sp, #8]
 8002f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f1a:	9201      	str	r2, [sp, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	9200      	str	r2, [sp, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a8e      	ldr	r2, [pc, #568]	; (800315c <Four_Menu+0xb10>)
 8002f24:	2128      	movs	r1, #40	; 0x28
 8002f26:	2000      	movs	r0, #0
 8002f28:	f003 fe96 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f2c:	4b89      	ldr	r3, [pc, #548]	; (8003154 <Four_Menu+0xb08>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	9202      	str	r2, [sp, #8]
 8002f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f36:	9201      	str	r2, [sp, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	9200      	str	r2, [sp, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a88      	ldr	r2, [pc, #544]	; (8003160 <Four_Menu+0xb14>)
 8002f40:	2132      	movs	r1, #50	; 0x32
 8002f42:	2000      	movs	r0, #0
 8002f44:	f003 fe88 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f48:	4b82      	ldr	r3, [pc, #520]	; (8003154 <Four_Menu+0xb08>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	9202      	str	r2, [sp, #8]
 8002f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	9200      	str	r2, [sp, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a82      	ldr	r2, [pc, #520]	; (8003164 <Four_Menu+0xb18>)
 8002f5c:	213c      	movs	r1, #60	; 0x3c
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f003 fe7a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f64:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <Four_Menu+0xb08>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	9202      	str	r2, [sp, #8]
 8002f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	9200      	str	r2, [sp, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7c      	ldr	r2, [pc, #496]	; (8003168 <Four_Menu+0xb1c>)
 8002f78:	2146      	movs	r1, #70	; 0x46
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f003 fe6c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f80:	4b74      	ldr	r3, [pc, #464]	; (8003154 <Four_Menu+0xb08>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	9202      	str	r2, [sp, #8]
 8002f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a76      	ldr	r2, [pc, #472]	; (800316c <Four_Menu+0xb20>)
 8002f94:	2150      	movs	r1, #80	; 0x50
 8002f96:	2000      	movs	r0, #0
 8002f98:	f003 fe5e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8002f9c:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <Four_Menu+0xb08>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	9202      	str	r2, [sp, #8]
 8002fa2:	221f      	movs	r2, #31
 8002fa4:	9201      	str	r2, [sp, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	9200      	str	r2, [sp, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a70      	ldr	r2, [pc, #448]	; (8003170 <Four_Menu+0xb24>)
 8002fae:	215a      	movs	r1, #90	; 0x5a
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f003 fe51 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002fb6:	4b67      	ldr	r3, [pc, #412]	; (8003154 <Four_Menu+0xb08>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	9202      	str	r2, [sp, #8]
 8002fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc0:	9201      	str	r2, [sp, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	9200      	str	r2, [sp, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <Four_Menu+0xb28>)
 8002fca:	2164      	movs	r1, #100	; 0x64
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f003 fe43 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8002fd2:	6838      	ldr	r0, [r7, #0]
 8002fd4:	f004 faf0 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8002fd8:	4b59      	ldr	r3, [pc, #356]	; (8003140 <Four_Menu+0xaf4>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
			cnt1 = 8;
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <Four_Menu+0xaf0>)
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	701a      	strb	r2, [r3, #0]
			cnt2 = 6;
 8002fe4:	4b57      	ldr	r3, [pc, #348]	; (8003144 <Four_Menu+0xaf8>)
 8002fe6:	2206      	movs	r2, #6
 8002fe8:	701a      	strb	r2, [r3, #0]
			Check = 26;
 8002fea:	4b63      	ldr	r3, [pc, #396]	; (8003178 <Four_Menu+0xb2c>)
 8002fec:	221a      	movs	r2, #26
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e09d      	b.n	800312e <Four_Menu+0xae2>
		}
		else if(((cnt1 == 8) && (step_DOWN == 1)) || ((cnt2 == 8) && step_UP == 1))
 8002ff2:	4b52      	ldr	r3, [pc, #328]	; (800313c <Four_Menu+0xaf0>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d103      	bne.n	8003002 <Four_Menu+0x9b6>
 8002ffa:	4b51      	ldr	r3, [pc, #324]	; (8003140 <Four_Menu+0xaf4>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d009      	beq.n	8003016 <Four_Menu+0x9ca>
 8003002:	4b50      	ldr	r3, [pc, #320]	; (8003144 <Four_Menu+0xaf8>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b08      	cmp	r3, #8
 8003008:	f040 8091 	bne.w	800312e <Four_Menu+0xae2>
 800300c:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <Four_Menu+0xafc>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 808c 	bne.w	800312e <Four_Menu+0xae2>
		{
			ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003016:	4b4d      	ldr	r3, [pc, #308]	; (800314c <Four_Menu+0xb00>)
 8003018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301c:	9202      	str	r2, [sp, #8]
 800301e:	221f      	movs	r2, #31
 8003020:	9201      	str	r2, [sp, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a49      	ldr	r2, [pc, #292]	; (8003150 <Four_Menu+0xb04>)
 800302a:	2100      	movs	r1, #0
 800302c:	202a      	movs	r0, #42	; 0x2a
 800302e:	f003 fe13 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003032:	4b48      	ldr	r3, [pc, #288]	; (8003154 <Four_Menu+0xb08>)
 8003034:	2200      	movs	r2, #0
 8003036:	9202      	str	r2, [sp, #8]
 8003038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800303c:	9201      	str	r2, [sp, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a44      	ldr	r2, [pc, #272]	; (8003158 <Four_Menu+0xb0c>)
 8003046:	211e      	movs	r1, #30
 8003048:	2000      	movs	r0, #0
 800304a:	f003 fe05 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <Four_Menu+0xb08>)
 8003050:	2200      	movs	r2, #0
 8003052:	9202      	str	r2, [sp, #8]
 8003054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003058:	9201      	str	r2, [sp, #4]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	9200      	str	r2, [sp, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3e      	ldr	r2, [pc, #248]	; (800315c <Four_Menu+0xb10>)
 8003062:	2128      	movs	r1, #40	; 0x28
 8003064:	2000      	movs	r0, #0
 8003066:	f003 fdf7 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800306a:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <Four_Menu+0xb08>)
 800306c:	2200      	movs	r2, #0
 800306e:	9202      	str	r2, [sp, #8]
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	9201      	str	r2, [sp, #4]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	9200      	str	r2, [sp, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a38      	ldr	r2, [pc, #224]	; (8003160 <Four_Menu+0xb14>)
 800307e:	2132      	movs	r1, #50	; 0x32
 8003080:	2000      	movs	r0, #0
 8003082:	f003 fde9 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003086:	4b33      	ldr	r3, [pc, #204]	; (8003154 <Four_Menu+0xb08>)
 8003088:	2200      	movs	r2, #0
 800308a:	9202      	str	r2, [sp, #8]
 800308c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	9200      	str	r2, [sp, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a32      	ldr	r2, [pc, #200]	; (8003164 <Four_Menu+0xb18>)
 800309a:	213c      	movs	r1, #60	; 0x3c
 800309c:	2000      	movs	r0, #0
 800309e:	f003 fddb 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80030a2:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <Four_Menu+0xb08>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	9202      	str	r2, [sp, #8]
 80030a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ac:	9201      	str	r2, [sp, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	9200      	str	r2, [sp, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <Four_Menu+0xb1c>)
 80030b6:	2146      	movs	r1, #70	; 0x46
 80030b8:	2000      	movs	r0, #0
 80030ba:	f003 fdcd 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <Four_Menu+0xb08>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	9202      	str	r2, [sp, #8]
 80030c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030c8:	9201      	str	r2, [sp, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	9200      	str	r2, [sp, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a26      	ldr	r2, [pc, #152]	; (800316c <Four_Menu+0xb20>)
 80030d2:	2150      	movs	r1, #80	; 0x50
 80030d4:	2000      	movs	r0, #0
 80030d6:	f003 fdbf 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <Four_Menu+0xb08>)
 80030dc:	2200      	movs	r2, #0
 80030de:	9202      	str	r2, [sp, #8]
 80030e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e4:	9201      	str	r2, [sp, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a20      	ldr	r2, [pc, #128]	; (8003170 <Four_Menu+0xb24>)
 80030ee:	215a      	movs	r1, #90	; 0x5a
 80030f0:	2000      	movs	r0, #0
 80030f2:	f003 fdb1 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <Four_Menu+0xb08>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	9202      	str	r2, [sp, #8]
 80030fc:	221f      	movs	r2, #31
 80030fe:	9201      	str	r2, [sp, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	9200      	str	r2, [sp, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <Four_Menu+0xb28>)
 8003108:	2164      	movs	r1, #100	; 0x64
 800310a:	2000      	movs	r0, #0
 800310c:	f003 fda4 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003110:	6838      	ldr	r0, [r7, #0]
 8003112:	f004 fa51 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <Four_Menu+0xaf4>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
			cnt1 = 1;
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <Four_Menu+0xaf0>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
			cnt2 = 7;
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <Four_Menu+0xaf8>)
 8003124:	2207      	movs	r2, #7
 8003126:	701a      	strb	r2, [r3, #0]
			Check = 27;
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <Four_Menu+0xb2c>)
 800312a:	221b      	movs	r2, #27
 800312c:	701a      	strb	r2, [r3, #0]
		}
	}
	return Check;
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <Four_Menu+0xb2c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	2000001a 	.word	0x2000001a
 8003140:	20000121 	.word	0x20000121
 8003144:	2000001b 	.word	0x2000001b
 8003148:	20000122 	.word	0x20000122
 800314c:	20000008 	.word	0x20000008
 8003150:	0800bed8 	.word	0x0800bed8
 8003154:	20000000 	.word	0x20000000
 8003158:	0800bee0 	.word	0x0800bee0
 800315c:	0800bee8 	.word	0x0800bee8
 8003160:	0800bef0 	.word	0x0800bef0
 8003164:	0800bef8 	.word	0x0800bef8
 8003168:	0800bf00 	.word	0x0800bf00
 800316c:	0800bf08 	.word	0x0800bf08
 8003170:	0800bf10 	.word	0x0800bf10
 8003174:	0800bf18 	.word	0x0800bf18
 8003178:	20000123 	.word	0x20000123

0800317c <Five_Menu>:
//Функция обработки действий подменю: "Открытый коллектор"
//Принимает флаги нажатия кнопок "Вниз";"Вверх";
//Принимает переменную времени задержки обработки прерываний
//Возвращает выбранную позицию в списке меню
uint8_t Five_Menu(uint8_t DOWN, uint8_t UP, uint32_t time)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af04      	add	r7, sp, #16
 8003182:	4603      	mov	r3, r0
 8003184:	603a      	str	r2, [r7, #0]
 8003186:	71fb      	strb	r3, [r7, #7]
 8003188:	460b      	mov	r3, r1
 800318a:	71bb      	strb	r3, [r7, #6]
	step_DOWN = DOWN;
 800318c:	4aa7      	ldr	r2, [pc, #668]	; (800342c <Five_Menu+0x2b0>)
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	7013      	strb	r3, [r2, #0]
	step_UP = UP;
 8003192:	4aa7      	ldr	r2, [pc, #668]	; (8003430 <Five_Menu+0x2b4>)
 8003194:	79bb      	ldrb	r3, [r7, #6]
 8003196:	7013      	strb	r3, [r2, #0]
	if((step_DOWN) || (step_UP))
 8003198:	4ba4      	ldr	r3, [pc, #656]	; (800342c <Five_Menu+0x2b0>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <Five_Menu+0x2e>
 80031a0:	4ba3      	ldr	r3, [pc, #652]	; (8003430 <Five_Menu+0x2b4>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 855a 	beq.w	8003c5e <Five_Menu+0xae2>
	{
		if(((cnt1 == 1) && (step_DOWN == 1)) || ((cnt2 == 1) && step_UP == 1))
 80031aa:	4ba2      	ldr	r3, [pc, #648]	; (8003434 <Five_Menu+0x2b8>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d103      	bne.n	80031ba <Five_Menu+0x3e>
 80031b2:	4b9e      	ldr	r3, [pc, #632]	; (800342c <Five_Menu+0x2b0>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d009      	beq.n	80031ce <Five_Menu+0x52>
 80031ba:	4b9f      	ldr	r3, [pc, #636]	; (8003438 <Five_Menu+0x2bc>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	f040 8093 	bne.w	80032ea <Five_Menu+0x16e>
 80031c4:	4b9a      	ldr	r3, [pc, #616]	; (8003430 <Five_Menu+0x2b4>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	f040 808e 	bne.w	80032ea <Five_Menu+0x16e>
		{
			ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80031ce:	4b9b      	ldr	r3, [pc, #620]	; (800343c <Five_Menu+0x2c0>)
 80031d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031d4:	9202      	str	r2, [sp, #8]
 80031d6:	221f      	movs	r2, #31
 80031d8:	9201      	str	r2, [sp, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	9200      	str	r2, [sp, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a97      	ldr	r2, [pc, #604]	; (8003440 <Five_Menu+0x2c4>)
 80031e2:	2100      	movs	r1, #0
 80031e4:	2018      	movs	r0, #24
 80031e6:	f003 fd37 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80031ea:	4b96      	ldr	r3, [pc, #600]	; (8003444 <Five_Menu+0x2c8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	9202      	str	r2, [sp, #8]
 80031f0:	221f      	movs	r2, #31
 80031f2:	9201      	str	r2, [sp, #4]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	9200      	str	r2, [sp, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a93      	ldr	r2, [pc, #588]	; (8003448 <Five_Menu+0x2cc>)
 80031fc:	211e      	movs	r1, #30
 80031fe:	2000      	movs	r0, #0
 8003200:	f003 fd2a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003204:	4b8f      	ldr	r3, [pc, #572]	; (8003444 <Five_Menu+0x2c8>)
 8003206:	2200      	movs	r2, #0
 8003208:	9202      	str	r2, [sp, #8]
 800320a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800320e:	9201      	str	r2, [sp, #4]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	9200      	str	r2, [sp, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a8d      	ldr	r2, [pc, #564]	; (800344c <Five_Menu+0x2d0>)
 8003218:	2128      	movs	r1, #40	; 0x28
 800321a:	2000      	movs	r0, #0
 800321c:	f003 fd1c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003220:	4b88      	ldr	r3, [pc, #544]	; (8003444 <Five_Menu+0x2c8>)
 8003222:	2200      	movs	r2, #0
 8003224:	9202      	str	r2, [sp, #8]
 8003226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800322a:	9201      	str	r2, [sp, #4]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	9200      	str	r2, [sp, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a87      	ldr	r2, [pc, #540]	; (8003450 <Five_Menu+0x2d4>)
 8003234:	2132      	movs	r1, #50	; 0x32
 8003236:	2000      	movs	r0, #0
 8003238:	f003 fd0e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800323c:	4b81      	ldr	r3, [pc, #516]	; (8003444 <Five_Menu+0x2c8>)
 800323e:	2200      	movs	r2, #0
 8003240:	9202      	str	r2, [sp, #8]
 8003242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003246:	9201      	str	r2, [sp, #4]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	9200      	str	r2, [sp, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a81      	ldr	r2, [pc, #516]	; (8003454 <Five_Menu+0x2d8>)
 8003250:	213c      	movs	r1, #60	; 0x3c
 8003252:	2000      	movs	r0, #0
 8003254:	f003 fd00 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003258:	4b7a      	ldr	r3, [pc, #488]	; (8003444 <Five_Menu+0x2c8>)
 800325a:	2200      	movs	r2, #0
 800325c:	9202      	str	r2, [sp, #8]
 800325e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003262:	9201      	str	r2, [sp, #4]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	9200      	str	r2, [sp, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7b      	ldr	r2, [pc, #492]	; (8003458 <Five_Menu+0x2dc>)
 800326c:	2146      	movs	r1, #70	; 0x46
 800326e:	2000      	movs	r0, #0
 8003270:	f003 fcf2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003274:	4b73      	ldr	r3, [pc, #460]	; (8003444 <Five_Menu+0x2c8>)
 8003276:	2200      	movs	r2, #0
 8003278:	9202      	str	r2, [sp, #8]
 800327a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327e:	9201      	str	r2, [sp, #4]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	9200      	str	r2, [sp, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a75      	ldr	r2, [pc, #468]	; (800345c <Five_Menu+0x2e0>)
 8003288:	2150      	movs	r1, #80	; 0x50
 800328a:	2000      	movs	r0, #0
 800328c:	f003 fce4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003290:	4b6c      	ldr	r3, [pc, #432]	; (8003444 <Five_Menu+0x2c8>)
 8003292:	2200      	movs	r2, #0
 8003294:	9202      	str	r2, [sp, #8]
 8003296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329a:	9201      	str	r2, [sp, #4]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	9200      	str	r2, [sp, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6f      	ldr	r2, [pc, #444]	; (8003460 <Five_Menu+0x2e4>)
 80032a4:	215a      	movs	r1, #90	; 0x5a
 80032a6:	2000      	movs	r0, #0
 80032a8:	f003 fcd6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <Five_Menu+0x2c8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	9202      	str	r2, [sp, #8]
 80032b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032b6:	9201      	str	r2, [sp, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	9200      	str	r2, [sp, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a69      	ldr	r2, [pc, #420]	; (8003464 <Five_Menu+0x2e8>)
 80032c0:	2164      	movs	r1, #100	; 0x64
 80032c2:	2000      	movs	r0, #0
 80032c4:	f003 fcc8 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80032c8:	6838      	ldr	r0, [r7, #0]
 80032ca:	f004 f975 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80032ce:	4b57      	ldr	r3, [pc, #348]	; (800342c <Five_Menu+0x2b0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
			cnt1 = 2;
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <Five_Menu+0x2b8>)
 80032d6:	2202      	movs	r2, #2
 80032d8:	701a      	strb	r2, [r3, #0]
			cnt2 = 8;
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <Five_Menu+0x2bc>)
 80032dc:	2208      	movs	r2, #8
 80032de:	701a      	strb	r2, [r3, #0]
			Check = 34;
 80032e0:	4b61      	ldr	r3, [pc, #388]	; (8003468 <Five_Menu+0x2ec>)
 80032e2:	2222      	movs	r2, #34	; 0x22
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	f000 bcba 	b.w	8003c5e <Five_Menu+0xae2>
		}
		else if(((cnt1 == 2) && (step_DOWN == 1)) || ((cnt2 == 2) && step_UP == 1))
 80032ea:	4b52      	ldr	r3, [pc, #328]	; (8003434 <Five_Menu+0x2b8>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d103      	bne.n	80032fa <Five_Menu+0x17e>
 80032f2:	4b4e      	ldr	r3, [pc, #312]	; (800342c <Five_Menu+0x2b0>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d009      	beq.n	800330e <Five_Menu+0x192>
 80032fa:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <Five_Menu+0x2bc>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	f040 80b4 	bne.w	800346c <Five_Menu+0x2f0>
 8003304:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <Five_Menu+0x2b4>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 80af 	bne.w	800346c <Five_Menu+0x2f0>
		{
			ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800330e:	4b4b      	ldr	r3, [pc, #300]	; (800343c <Five_Menu+0x2c0>)
 8003310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003314:	9202      	str	r2, [sp, #8]
 8003316:	221f      	movs	r2, #31
 8003318:	9201      	str	r2, [sp, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	9200      	str	r2, [sp, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a47      	ldr	r2, [pc, #284]	; (8003440 <Five_Menu+0x2c4>)
 8003322:	2100      	movs	r1, #0
 8003324:	2018      	movs	r0, #24
 8003326:	f003 fc97 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800332a:	4b46      	ldr	r3, [pc, #280]	; (8003444 <Five_Menu+0x2c8>)
 800332c:	2200      	movs	r2, #0
 800332e:	9202      	str	r2, [sp, #8]
 8003330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	9200      	str	r2, [sp, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a42      	ldr	r2, [pc, #264]	; (8003448 <Five_Menu+0x2cc>)
 800333e:	211e      	movs	r1, #30
 8003340:	2000      	movs	r0, #0
 8003342:	f003 fc89 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <Five_Menu+0x2c8>)
 8003348:	2200      	movs	r2, #0
 800334a:	9202      	str	r2, [sp, #8]
 800334c:	221f      	movs	r2, #31
 800334e:	9201      	str	r2, [sp, #4]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	9200      	str	r2, [sp, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3d      	ldr	r2, [pc, #244]	; (800344c <Five_Menu+0x2d0>)
 8003358:	2128      	movs	r1, #40	; 0x28
 800335a:	2000      	movs	r0, #0
 800335c:	f003 fc7c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003360:	4b38      	ldr	r3, [pc, #224]	; (8003444 <Five_Menu+0x2c8>)
 8003362:	2200      	movs	r2, #0
 8003364:	9202      	str	r2, [sp, #8]
 8003366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800336a:	9201      	str	r2, [sp, #4]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	9200      	str	r2, [sp, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a37      	ldr	r2, [pc, #220]	; (8003450 <Five_Menu+0x2d4>)
 8003374:	2132      	movs	r1, #50	; 0x32
 8003376:	2000      	movs	r0, #0
 8003378:	f003 fc6e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800337c:	4b31      	ldr	r3, [pc, #196]	; (8003444 <Five_Menu+0x2c8>)
 800337e:	2200      	movs	r2, #0
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003386:	9201      	str	r2, [sp, #4]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	9200      	str	r2, [sp, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a31      	ldr	r2, [pc, #196]	; (8003454 <Five_Menu+0x2d8>)
 8003390:	213c      	movs	r1, #60	; 0x3c
 8003392:	2000      	movs	r0, #0
 8003394:	f003 fc60 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <Five_Menu+0x2c8>)
 800339a:	2200      	movs	r2, #0
 800339c:	9202      	str	r2, [sp, #8]
 800339e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a2:	9201      	str	r2, [sp, #4]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	9200      	str	r2, [sp, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2b      	ldr	r2, [pc, #172]	; (8003458 <Five_Menu+0x2dc>)
 80033ac:	2146      	movs	r1, #70	; 0x46
 80033ae:	2000      	movs	r0, #0
 80033b0:	f003 fc52 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80033b4:	4b23      	ldr	r3, [pc, #140]	; (8003444 <Five_Menu+0x2c8>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	9202      	str	r2, [sp, #8]
 80033ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033be:	9201      	str	r2, [sp, #4]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	9200      	str	r2, [sp, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a25      	ldr	r2, [pc, #148]	; (800345c <Five_Menu+0x2e0>)
 80033c8:	2150      	movs	r1, #80	; 0x50
 80033ca:	2000      	movs	r0, #0
 80033cc:	f003 fc44 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80033d0:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <Five_Menu+0x2c8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	9202      	str	r2, [sp, #8]
 80033d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033da:	9201      	str	r2, [sp, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	9200      	str	r2, [sp, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <Five_Menu+0x2e4>)
 80033e4:	215a      	movs	r1, #90	; 0x5a
 80033e6:	2000      	movs	r0, #0
 80033e8:	f003 fc36 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <Five_Menu+0x2c8>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	9202      	str	r2, [sp, #8]
 80033f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f6:	9201      	str	r2, [sp, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	9200      	str	r2, [sp, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a19      	ldr	r2, [pc, #100]	; (8003464 <Five_Menu+0x2e8>)
 8003400:	2164      	movs	r1, #100	; 0x64
 8003402:	2000      	movs	r0, #0
 8003404:	f003 fc28 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003408:	6838      	ldr	r0, [r7, #0]
 800340a:	f004 f8d5 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <Five_Menu+0x2b0>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
			cnt1 = 3;
 8003414:	4b07      	ldr	r3, [pc, #28]	; (8003434 <Five_Menu+0x2b8>)
 8003416:	2203      	movs	r2, #3
 8003418:	701a      	strb	r2, [r3, #0]
			cnt2 = 1;
 800341a:	4b07      	ldr	r3, [pc, #28]	; (8003438 <Five_Menu+0x2bc>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
			Check = 35;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <Five_Menu+0x2ec>)
 8003422:	2223      	movs	r2, #35	; 0x23
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	f000 bc1a 	b.w	8003c5e <Five_Menu+0xae2>
 800342a:	bf00      	nop
 800342c:	20000121 	.word	0x20000121
 8003430:	20000122 	.word	0x20000122
 8003434:	2000001a 	.word	0x2000001a
 8003438:	2000001b 	.word	0x2000001b
 800343c:	20000008 	.word	0x20000008
 8003440:	0800bf20 	.word	0x0800bf20
 8003444:	20000000 	.word	0x20000000
 8003448:	0800bf2c 	.word	0x0800bf2c
 800344c:	0800bf34 	.word	0x0800bf34
 8003450:	0800bf3c 	.word	0x0800bf3c
 8003454:	0800bf44 	.word	0x0800bf44
 8003458:	0800bf4c 	.word	0x0800bf4c
 800345c:	0800bf54 	.word	0x0800bf54
 8003460:	0800bf5c 	.word	0x0800bf5c
 8003464:	0800bf64 	.word	0x0800bf64
 8003468:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 3) && (step_DOWN == 1)) || ((cnt2 == 3) && step_UP == 1))
 800346c:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <Five_Menu+0x56c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d103      	bne.n	800347c <Five_Menu+0x300>
 8003474:	4b9d      	ldr	r3, [pc, #628]	; (80036ec <Five_Menu+0x570>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d009      	beq.n	8003490 <Five_Menu+0x314>
 800347c:	4b9c      	ldr	r3, [pc, #624]	; (80036f0 <Five_Menu+0x574>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b03      	cmp	r3, #3
 8003482:	f040 8092 	bne.w	80035aa <Five_Menu+0x42e>
 8003486:	4b9b      	ldr	r3, [pc, #620]	; (80036f4 <Five_Menu+0x578>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	f040 808d 	bne.w	80035aa <Five_Menu+0x42e>
		{
			ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003490:	4b99      	ldr	r3, [pc, #612]	; (80036f8 <Five_Menu+0x57c>)
 8003492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003496:	9202      	str	r2, [sp, #8]
 8003498:	221f      	movs	r2, #31
 800349a:	9201      	str	r2, [sp, #4]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	9200      	str	r2, [sp, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a96      	ldr	r2, [pc, #600]	; (80036fc <Five_Menu+0x580>)
 80034a4:	2100      	movs	r1, #0
 80034a6:	2018      	movs	r0, #24
 80034a8:	f003 fbd6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80034ac:	4b94      	ldr	r3, [pc, #592]	; (8003700 <Five_Menu+0x584>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	9202      	str	r2, [sp, #8]
 80034b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b6:	9201      	str	r2, [sp, #4]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	9200      	str	r2, [sp, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a91      	ldr	r2, [pc, #580]	; (8003704 <Five_Menu+0x588>)
 80034c0:	211e      	movs	r1, #30
 80034c2:	2000      	movs	r0, #0
 80034c4:	f003 fbc8 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80034c8:	4b8d      	ldr	r3, [pc, #564]	; (8003700 <Five_Menu+0x584>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	9202      	str	r2, [sp, #8]
 80034ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d2:	9201      	str	r2, [sp, #4]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	9200      	str	r2, [sp, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a8b      	ldr	r2, [pc, #556]	; (8003708 <Five_Menu+0x58c>)
 80034dc:	2128      	movs	r1, #40	; 0x28
 80034de:	2000      	movs	r0, #0
 80034e0:	f003 fbba 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80034e4:	4b86      	ldr	r3, [pc, #536]	; (8003700 <Five_Menu+0x584>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	9202      	str	r2, [sp, #8]
 80034ea:	221f      	movs	r2, #31
 80034ec:	9201      	str	r2, [sp, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	9200      	str	r2, [sp, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a85      	ldr	r2, [pc, #532]	; (800370c <Five_Menu+0x590>)
 80034f6:	2132      	movs	r1, #50	; 0x32
 80034f8:	2000      	movs	r0, #0
 80034fa:	f003 fbad 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80034fe:	4b80      	ldr	r3, [pc, #512]	; (8003700 <Five_Menu+0x584>)
 8003500:	2200      	movs	r2, #0
 8003502:	9202      	str	r2, [sp, #8]
 8003504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003508:	9201      	str	r2, [sp, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	9200      	str	r2, [sp, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a7f      	ldr	r2, [pc, #508]	; (8003710 <Five_Menu+0x594>)
 8003512:	213c      	movs	r1, #60	; 0x3c
 8003514:	2000      	movs	r0, #0
 8003516:	f003 fb9f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800351a:	4b79      	ldr	r3, [pc, #484]	; (8003700 <Five_Menu+0x584>)
 800351c:	2200      	movs	r2, #0
 800351e:	9202      	str	r2, [sp, #8]
 8003520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003524:	9201      	str	r2, [sp, #4]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	9200      	str	r2, [sp, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a79      	ldr	r2, [pc, #484]	; (8003714 <Five_Menu+0x598>)
 800352e:	2146      	movs	r1, #70	; 0x46
 8003530:	2000      	movs	r0, #0
 8003532:	f003 fb91 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003536:	4b72      	ldr	r3, [pc, #456]	; (8003700 <Five_Menu+0x584>)
 8003538:	2200      	movs	r2, #0
 800353a:	9202      	str	r2, [sp, #8]
 800353c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003540:	9201      	str	r2, [sp, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	9200      	str	r2, [sp, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a73      	ldr	r2, [pc, #460]	; (8003718 <Five_Menu+0x59c>)
 800354a:	2150      	movs	r1, #80	; 0x50
 800354c:	2000      	movs	r0, #0
 800354e:	f003 fb83 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003552:	4b6b      	ldr	r3, [pc, #428]	; (8003700 <Five_Menu+0x584>)
 8003554:	2200      	movs	r2, #0
 8003556:	9202      	str	r2, [sp, #8]
 8003558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800355c:	9201      	str	r2, [sp, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	9200      	str	r2, [sp, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6d      	ldr	r2, [pc, #436]	; (800371c <Five_Menu+0x5a0>)
 8003566:	215a      	movs	r1, #90	; 0x5a
 8003568:	2000      	movs	r0, #0
 800356a:	f003 fb75 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800356e:	4b64      	ldr	r3, [pc, #400]	; (8003700 <Five_Menu+0x584>)
 8003570:	2200      	movs	r2, #0
 8003572:	9202      	str	r2, [sp, #8]
 8003574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003578:	9201      	str	r2, [sp, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	9200      	str	r2, [sp, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a67      	ldr	r2, [pc, #412]	; (8003720 <Five_Menu+0x5a4>)
 8003582:	2164      	movs	r1, #100	; 0x64
 8003584:	2000      	movs	r0, #0
 8003586:	f003 fb67 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f004 f814 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8003590:	4b56      	ldr	r3, [pc, #344]	; (80036ec <Five_Menu+0x570>)
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
			cnt1 = 4;
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <Five_Menu+0x56c>)
 8003598:	2204      	movs	r2, #4
 800359a:	701a      	strb	r2, [r3, #0]
			cnt2 = 2;
 800359c:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <Five_Menu+0x574>)
 800359e:	2202      	movs	r2, #2
 80035a0:	701a      	strb	r2, [r3, #0]
			Check = 36;
 80035a2:	4b60      	ldr	r3, [pc, #384]	; (8003724 <Five_Menu+0x5a8>)
 80035a4:	2224      	movs	r2, #36	; 0x24
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e359      	b.n	8003c5e <Five_Menu+0xae2>
		}
		else if(((cnt1 == 4) && (step_DOWN == 1)) || ((cnt2 == 4) && step_UP == 1))
 80035aa:	4b4f      	ldr	r3, [pc, #316]	; (80036e8 <Five_Menu+0x56c>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d103      	bne.n	80035ba <Five_Menu+0x43e>
 80035b2:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <Five_Menu+0x570>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d009      	beq.n	80035ce <Five_Menu+0x452>
 80035ba:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <Five_Menu+0x574>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	f040 80b2 	bne.w	8003728 <Five_Menu+0x5ac>
 80035c4:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <Five_Menu+0x578>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 80ad 	bne.w	8003728 <Five_Menu+0x5ac>
		{
			ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80035ce:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <Five_Menu+0x57c>)
 80035d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035d4:	9202      	str	r2, [sp, #8]
 80035d6:	221f      	movs	r2, #31
 80035d8:	9201      	str	r2, [sp, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a46      	ldr	r2, [pc, #280]	; (80036fc <Five_Menu+0x580>)
 80035e2:	2100      	movs	r1, #0
 80035e4:	2018      	movs	r0, #24
 80035e6:	f003 fb37 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80035ea:	4b45      	ldr	r3, [pc, #276]	; (8003700 <Five_Menu+0x584>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	9202      	str	r2, [sp, #8]
 80035f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f4:	9201      	str	r2, [sp, #4]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	9200      	str	r2, [sp, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a41      	ldr	r2, [pc, #260]	; (8003704 <Five_Menu+0x588>)
 80035fe:	211e      	movs	r1, #30
 8003600:	2000      	movs	r0, #0
 8003602:	f003 fb29 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003606:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <Five_Menu+0x584>)
 8003608:	2200      	movs	r2, #0
 800360a:	9202      	str	r2, [sp, #8]
 800360c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003610:	9201      	str	r2, [sp, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	9200      	str	r2, [sp, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3b      	ldr	r2, [pc, #236]	; (8003708 <Five_Menu+0x58c>)
 800361a:	2128      	movs	r1, #40	; 0x28
 800361c:	2000      	movs	r0, #0
 800361e:	f003 fb1b 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003622:	4b37      	ldr	r3, [pc, #220]	; (8003700 <Five_Menu+0x584>)
 8003624:	2200      	movs	r2, #0
 8003626:	9202      	str	r2, [sp, #8]
 8003628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800362c:	9201      	str	r2, [sp, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	9200      	str	r2, [sp, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a35      	ldr	r2, [pc, #212]	; (800370c <Five_Menu+0x590>)
 8003636:	2132      	movs	r1, #50	; 0x32
 8003638:	2000      	movs	r0, #0
 800363a:	f003 fb0d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <Five_Menu+0x584>)
 8003640:	2200      	movs	r2, #0
 8003642:	9202      	str	r2, [sp, #8]
 8003644:	221f      	movs	r2, #31
 8003646:	9201      	str	r2, [sp, #4]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	9200      	str	r2, [sp, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a30      	ldr	r2, [pc, #192]	; (8003710 <Five_Menu+0x594>)
 8003650:	213c      	movs	r1, #60	; 0x3c
 8003652:	2000      	movs	r0, #0
 8003654:	f003 fb00 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003658:	4b29      	ldr	r3, [pc, #164]	; (8003700 <Five_Menu+0x584>)
 800365a:	2200      	movs	r2, #0
 800365c:	9202      	str	r2, [sp, #8]
 800365e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003662:	9201      	str	r2, [sp, #4]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	9200      	str	r2, [sp, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <Five_Menu+0x598>)
 800366c:	2146      	movs	r1, #70	; 0x46
 800366e:	2000      	movs	r0, #0
 8003670:	f003 faf2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003674:	4b22      	ldr	r3, [pc, #136]	; (8003700 <Five_Menu+0x584>)
 8003676:	2200      	movs	r2, #0
 8003678:	9202      	str	r2, [sp, #8]
 800367a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800367e:	9201      	str	r2, [sp, #4]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	9200      	str	r2, [sp, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a24      	ldr	r2, [pc, #144]	; (8003718 <Five_Menu+0x59c>)
 8003688:	2150      	movs	r1, #80	; 0x50
 800368a:	2000      	movs	r0, #0
 800368c:	f003 fae4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <Five_Menu+0x584>)
 8003692:	2200      	movs	r2, #0
 8003694:	9202      	str	r2, [sp, #8]
 8003696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800369a:	9201      	str	r2, [sp, #4]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	9200      	str	r2, [sp, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <Five_Menu+0x5a0>)
 80036a4:	215a      	movs	r1, #90	; 0x5a
 80036a6:	2000      	movs	r0, #0
 80036a8:	f003 fad6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <Five_Menu+0x584>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	9202      	str	r2, [sp, #8]
 80036b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b6:	9201      	str	r2, [sp, #4]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	9200      	str	r2, [sp, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <Five_Menu+0x5a4>)
 80036c0:	2164      	movs	r1, #100	; 0x64
 80036c2:	2000      	movs	r0, #0
 80036c4:	f003 fac8 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 80036c8:	6838      	ldr	r0, [r7, #0]
 80036ca:	f003 ff75 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 80036ce:	4b07      	ldr	r3, [pc, #28]	; (80036ec <Five_Menu+0x570>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
			cnt1 = 5;
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <Five_Menu+0x56c>)
 80036d6:	2205      	movs	r2, #5
 80036d8:	701a      	strb	r2, [r3, #0]
			cnt2 = 3;
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <Five_Menu+0x574>)
 80036dc:	2203      	movs	r2, #3
 80036de:	701a      	strb	r2, [r3, #0]
			Check = 37;
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <Five_Menu+0x5a8>)
 80036e2:	2225      	movs	r2, #37	; 0x25
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e2ba      	b.n	8003c5e <Five_Menu+0xae2>
 80036e8:	2000001a 	.word	0x2000001a
 80036ec:	20000121 	.word	0x20000121
 80036f0:	2000001b 	.word	0x2000001b
 80036f4:	20000122 	.word	0x20000122
 80036f8:	20000008 	.word	0x20000008
 80036fc:	0800bf20 	.word	0x0800bf20
 8003700:	20000000 	.word	0x20000000
 8003704:	0800bf2c 	.word	0x0800bf2c
 8003708:	0800bf34 	.word	0x0800bf34
 800370c:	0800bf3c 	.word	0x0800bf3c
 8003710:	0800bf44 	.word	0x0800bf44
 8003714:	0800bf4c 	.word	0x0800bf4c
 8003718:	0800bf54 	.word	0x0800bf54
 800371c:	0800bf5c 	.word	0x0800bf5c
 8003720:	0800bf64 	.word	0x0800bf64
 8003724:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 5) && (step_DOWN == 1)) || ((cnt2 == 5) && step_UP == 1))
 8003728:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <Five_Menu+0x828>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b05      	cmp	r3, #5
 800372e:	d103      	bne.n	8003738 <Five_Menu+0x5bc>
 8003730:	4b9d      	ldr	r3, [pc, #628]	; (80039a8 <Five_Menu+0x82c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d009      	beq.n	800374c <Five_Menu+0x5d0>
 8003738:	4b9c      	ldr	r3, [pc, #624]	; (80039ac <Five_Menu+0x830>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b05      	cmp	r3, #5
 800373e:	f040 8092 	bne.w	8003866 <Five_Menu+0x6ea>
 8003742:	4b9b      	ldr	r3, [pc, #620]	; (80039b0 <Five_Menu+0x834>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	f040 808d 	bne.w	8003866 <Five_Menu+0x6ea>
		{
			ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800374c:	4b99      	ldr	r3, [pc, #612]	; (80039b4 <Five_Menu+0x838>)
 800374e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003752:	9202      	str	r2, [sp, #8]
 8003754:	221f      	movs	r2, #31
 8003756:	9201      	str	r2, [sp, #4]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	9200      	str	r2, [sp, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a96      	ldr	r2, [pc, #600]	; (80039b8 <Five_Menu+0x83c>)
 8003760:	2100      	movs	r1, #0
 8003762:	2018      	movs	r0, #24
 8003764:	f003 fa78 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003768:	4b94      	ldr	r3, [pc, #592]	; (80039bc <Five_Menu+0x840>)
 800376a:	2200      	movs	r2, #0
 800376c:	9202      	str	r2, [sp, #8]
 800376e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003772:	9201      	str	r2, [sp, #4]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	9200      	str	r2, [sp, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a91      	ldr	r2, [pc, #580]	; (80039c0 <Five_Menu+0x844>)
 800377c:	211e      	movs	r1, #30
 800377e:	2000      	movs	r0, #0
 8003780:	f003 fa6a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003784:	4b8d      	ldr	r3, [pc, #564]	; (80039bc <Five_Menu+0x840>)
 8003786:	2200      	movs	r2, #0
 8003788:	9202      	str	r2, [sp, #8]
 800378a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800378e:	9201      	str	r2, [sp, #4]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	9200      	str	r2, [sp, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a8b      	ldr	r2, [pc, #556]	; (80039c4 <Five_Menu+0x848>)
 8003798:	2128      	movs	r1, #40	; 0x28
 800379a:	2000      	movs	r0, #0
 800379c:	f003 fa5c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80037a0:	4b86      	ldr	r3, [pc, #536]	; (80039bc <Five_Menu+0x840>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	9202      	str	r2, [sp, #8]
 80037a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037aa:	9201      	str	r2, [sp, #4]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	9200      	str	r2, [sp, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a85      	ldr	r2, [pc, #532]	; (80039c8 <Five_Menu+0x84c>)
 80037b4:	2132      	movs	r1, #50	; 0x32
 80037b6:	2000      	movs	r0, #0
 80037b8:	f003 fa4e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80037bc:	4b7f      	ldr	r3, [pc, #508]	; (80039bc <Five_Menu+0x840>)
 80037be:	2200      	movs	r2, #0
 80037c0:	9202      	str	r2, [sp, #8]
 80037c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c6:	9201      	str	r2, [sp, #4]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	9200      	str	r2, [sp, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a7f      	ldr	r2, [pc, #508]	; (80039cc <Five_Menu+0x850>)
 80037d0:	213c      	movs	r1, #60	; 0x3c
 80037d2:	2000      	movs	r0, #0
 80037d4:	f003 fa40 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80037d8:	4b78      	ldr	r3, [pc, #480]	; (80039bc <Five_Menu+0x840>)
 80037da:	2200      	movs	r2, #0
 80037dc:	9202      	str	r2, [sp, #8]
 80037de:	221f      	movs	r2, #31
 80037e0:	9201      	str	r2, [sp, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	9200      	str	r2, [sp, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a79      	ldr	r2, [pc, #484]	; (80039d0 <Five_Menu+0x854>)
 80037ea:	2146      	movs	r1, #70	; 0x46
 80037ec:	2000      	movs	r0, #0
 80037ee:	f003 fa33 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80037f2:	4b72      	ldr	r3, [pc, #456]	; (80039bc <Five_Menu+0x840>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	9202      	str	r2, [sp, #8]
 80037f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037fc:	9201      	str	r2, [sp, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	9200      	str	r2, [sp, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a73      	ldr	r2, [pc, #460]	; (80039d4 <Five_Menu+0x858>)
 8003806:	2150      	movs	r1, #80	; 0x50
 8003808:	2000      	movs	r0, #0
 800380a:	f003 fa25 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800380e:	4b6b      	ldr	r3, [pc, #428]	; (80039bc <Five_Menu+0x840>)
 8003810:	2200      	movs	r2, #0
 8003812:	9202      	str	r2, [sp, #8]
 8003814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003818:	9201      	str	r2, [sp, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	9200      	str	r2, [sp, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a6d      	ldr	r2, [pc, #436]	; (80039d8 <Five_Menu+0x85c>)
 8003822:	215a      	movs	r1, #90	; 0x5a
 8003824:	2000      	movs	r0, #0
 8003826:	f003 fa17 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800382a:	4b64      	ldr	r3, [pc, #400]	; (80039bc <Five_Menu+0x840>)
 800382c:	2200      	movs	r2, #0
 800382e:	9202      	str	r2, [sp, #8]
 8003830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003834:	9201      	str	r2, [sp, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	9200      	str	r2, [sp, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a67      	ldr	r2, [pc, #412]	; (80039dc <Five_Menu+0x860>)
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	2000      	movs	r0, #0
 8003842:	f003 fa09 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003846:	6838      	ldr	r0, [r7, #0]
 8003848:	f003 feb6 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 800384c:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <Five_Menu+0x82c>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
			cnt1 = 6;
 8003852:	4b54      	ldr	r3, [pc, #336]	; (80039a4 <Five_Menu+0x828>)
 8003854:	2206      	movs	r2, #6
 8003856:	701a      	strb	r2, [r3, #0]
			cnt2 = 4;
 8003858:	4b54      	ldr	r3, [pc, #336]	; (80039ac <Five_Menu+0x830>)
 800385a:	2204      	movs	r2, #4
 800385c:	701a      	strb	r2, [r3, #0]
			Check = 38;
 800385e:	4b60      	ldr	r3, [pc, #384]	; (80039e0 <Five_Menu+0x864>)
 8003860:	2226      	movs	r2, #38	; 0x26
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e1fb      	b.n	8003c5e <Five_Menu+0xae2>
		}
		else if(((cnt1 == 6) && (step_DOWN == 1)) || ((cnt2 == 6) && step_UP == 1))
 8003866:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <Five_Menu+0x828>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d103      	bne.n	8003876 <Five_Menu+0x6fa>
 800386e:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <Five_Menu+0x82c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d009      	beq.n	800388a <Five_Menu+0x70e>
 8003876:	4b4d      	ldr	r3, [pc, #308]	; (80039ac <Five_Menu+0x830>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b06      	cmp	r3, #6
 800387c:	f040 80b2 	bne.w	80039e4 <Five_Menu+0x868>
 8003880:	4b4b      	ldr	r3, [pc, #300]	; (80039b0 <Five_Menu+0x834>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	f040 80ad 	bne.w	80039e4 <Five_Menu+0x868>
		{
			ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <Five_Menu+0x838>)
 800388c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003890:	9202      	str	r2, [sp, #8]
 8003892:	221f      	movs	r2, #31
 8003894:	9201      	str	r2, [sp, #4]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	9200      	str	r2, [sp, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a46      	ldr	r2, [pc, #280]	; (80039b8 <Five_Menu+0x83c>)
 800389e:	2100      	movs	r1, #0
 80038a0:	2018      	movs	r0, #24
 80038a2:	f003 f9d9 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80038a6:	4b45      	ldr	r3, [pc, #276]	; (80039bc <Five_Menu+0x840>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	9202      	str	r2, [sp, #8]
 80038ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038b0:	9201      	str	r2, [sp, #4]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	9200      	str	r2, [sp, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <Five_Menu+0x844>)
 80038ba:	211e      	movs	r1, #30
 80038bc:	2000      	movs	r0, #0
 80038be:	f003 f9cb 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <Five_Menu+0x840>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	9202      	str	r2, [sp, #8]
 80038c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038cc:	9201      	str	r2, [sp, #4]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	9200      	str	r2, [sp, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <Five_Menu+0x848>)
 80038d6:	2128      	movs	r1, #40	; 0x28
 80038d8:	2000      	movs	r0, #0
 80038da:	f003 f9bd 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80038de:	4b37      	ldr	r3, [pc, #220]	; (80039bc <Five_Menu+0x840>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	9202      	str	r2, [sp, #8]
 80038e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038e8:	9201      	str	r2, [sp, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	9200      	str	r2, [sp, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a35      	ldr	r2, [pc, #212]	; (80039c8 <Five_Menu+0x84c>)
 80038f2:	2132      	movs	r1, #50	; 0x32
 80038f4:	2000      	movs	r0, #0
 80038f6:	f003 f9af 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80038fa:	4b30      	ldr	r3, [pc, #192]	; (80039bc <Five_Menu+0x840>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	9202      	str	r2, [sp, #8]
 8003900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003904:	9201      	str	r2, [sp, #4]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	9200      	str	r2, [sp, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a2f      	ldr	r2, [pc, #188]	; (80039cc <Five_Menu+0x850>)
 800390e:	213c      	movs	r1, #60	; 0x3c
 8003910:	2000      	movs	r0, #0
 8003912:	f003 f9a1 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <Five_Menu+0x840>)
 8003918:	2200      	movs	r2, #0
 800391a:	9202      	str	r2, [sp, #8]
 800391c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003920:	9201      	str	r2, [sp, #4]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	9200      	str	r2, [sp, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <Five_Menu+0x854>)
 800392a:	2146      	movs	r1, #70	; 0x46
 800392c:	2000      	movs	r0, #0
 800392e:	f003 f993 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8003932:	4b22      	ldr	r3, [pc, #136]	; (80039bc <Five_Menu+0x840>)
 8003934:	2200      	movs	r2, #0
 8003936:	9202      	str	r2, [sp, #8]
 8003938:	221f      	movs	r2, #31
 800393a:	9201      	str	r2, [sp, #4]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	9200      	str	r2, [sp, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <Five_Menu+0x858>)
 8003944:	2150      	movs	r1, #80	; 0x50
 8003946:	2000      	movs	r0, #0
 8003948:	f003 f986 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <Five_Menu+0x840>)
 800394e:	2200      	movs	r2, #0
 8003950:	9202      	str	r2, [sp, #8]
 8003952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003956:	9201      	str	r2, [sp, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	9200      	str	r2, [sp, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <Five_Menu+0x85c>)
 8003960:	215a      	movs	r1, #90	; 0x5a
 8003962:	2000      	movs	r0, #0
 8003964:	f003 f978 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <Five_Menu+0x840>)
 800396a:	2200      	movs	r2, #0
 800396c:	9202      	str	r2, [sp, #8]
 800396e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003972:	9201      	str	r2, [sp, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	9200      	str	r2, [sp, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <Five_Menu+0x860>)
 800397c:	2164      	movs	r1, #100	; 0x64
 800397e:	2000      	movs	r0, #0
 8003980:	f003 f96a 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003984:	6838      	ldr	r0, [r7, #0]
 8003986:	f003 fe17 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <Five_Menu+0x82c>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
			cnt1 = 7;
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <Five_Menu+0x828>)
 8003992:	2207      	movs	r2, #7
 8003994:	701a      	strb	r2, [r3, #0]
			cnt2 = 5;
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <Five_Menu+0x830>)
 8003998:	2205      	movs	r2, #5
 800399a:	701a      	strb	r2, [r3, #0]
			Check = 39;
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <Five_Menu+0x864>)
 800399e:	2227      	movs	r2, #39	; 0x27
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e15c      	b.n	8003c5e <Five_Menu+0xae2>
 80039a4:	2000001a 	.word	0x2000001a
 80039a8:	20000121 	.word	0x20000121
 80039ac:	2000001b 	.word	0x2000001b
 80039b0:	20000122 	.word	0x20000122
 80039b4:	20000008 	.word	0x20000008
 80039b8:	0800bf20 	.word	0x0800bf20
 80039bc:	20000000 	.word	0x20000000
 80039c0:	0800bf2c 	.word	0x0800bf2c
 80039c4:	0800bf34 	.word	0x0800bf34
 80039c8:	0800bf3c 	.word	0x0800bf3c
 80039cc:	0800bf44 	.word	0x0800bf44
 80039d0:	0800bf4c 	.word	0x0800bf4c
 80039d4:	0800bf54 	.word	0x0800bf54
 80039d8:	0800bf5c 	.word	0x0800bf5c
 80039dc:	0800bf64 	.word	0x0800bf64
 80039e0:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 7) && (step_DOWN == 1)) || ((cnt2 == 7) && step_UP == 1))
 80039e4:	4ba1      	ldr	r3, [pc, #644]	; (8003c6c <Five_Menu+0xaf0>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b07      	cmp	r3, #7
 80039ea:	d103      	bne.n	80039f4 <Five_Menu+0x878>
 80039ec:	4ba0      	ldr	r3, [pc, #640]	; (8003c70 <Five_Menu+0xaf4>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d009      	beq.n	8003a08 <Five_Menu+0x88c>
 80039f4:	4b9f      	ldr	r3, [pc, #636]	; (8003c74 <Five_Menu+0xaf8>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b07      	cmp	r3, #7
 80039fa:	f040 8092 	bne.w	8003b22 <Five_Menu+0x9a6>
 80039fe:	4b9e      	ldr	r3, [pc, #632]	; (8003c78 <Five_Menu+0xafc>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	f040 808d 	bne.w	8003b22 <Five_Menu+0x9a6>
		{
			ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003a08:	4b9c      	ldr	r3, [pc, #624]	; (8003c7c <Five_Menu+0xb00>)
 8003a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0e:	9202      	str	r2, [sp, #8]
 8003a10:	221f      	movs	r2, #31
 8003a12:	9201      	str	r2, [sp, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	9200      	str	r2, [sp, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a99      	ldr	r2, [pc, #612]	; (8003c80 <Five_Menu+0xb04>)
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	2018      	movs	r0, #24
 8003a20:	f003 f91a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003a24:	4b97      	ldr	r3, [pc, #604]	; (8003c84 <Five_Menu+0xb08>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	9202      	str	r2, [sp, #8]
 8003a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2e:	9201      	str	r2, [sp, #4]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	9200      	str	r2, [sp, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a94      	ldr	r2, [pc, #592]	; (8003c88 <Five_Menu+0xb0c>)
 8003a38:	211e      	movs	r1, #30
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f003 f90c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003a40:	4b90      	ldr	r3, [pc, #576]	; (8003c84 <Five_Menu+0xb08>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	9202      	str	r2, [sp, #8]
 8003a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4a:	9201      	str	r2, [sp, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	9200      	str	r2, [sp, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a8e      	ldr	r2, [pc, #568]	; (8003c8c <Five_Menu+0xb10>)
 8003a54:	2128      	movs	r1, #40	; 0x28
 8003a56:	2000      	movs	r0, #0
 8003a58:	f003 f8fe 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003a5c:	4b89      	ldr	r3, [pc, #548]	; (8003c84 <Five_Menu+0xb08>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	9202      	str	r2, [sp, #8]
 8003a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a66:	9201      	str	r2, [sp, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	9200      	str	r2, [sp, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a88      	ldr	r2, [pc, #544]	; (8003c90 <Five_Menu+0xb14>)
 8003a70:	2132      	movs	r1, #50	; 0x32
 8003a72:	2000      	movs	r0, #0
 8003a74:	f003 f8f0 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003a78:	4b82      	ldr	r3, [pc, #520]	; (8003c84 <Five_Menu+0xb08>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	9202      	str	r2, [sp, #8]
 8003a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a82:	9201      	str	r2, [sp, #4]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	9200      	str	r2, [sp, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a82      	ldr	r2, [pc, #520]	; (8003c94 <Five_Menu+0xb18>)
 8003a8c:	213c      	movs	r1, #60	; 0x3c
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f003 f8e2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003a94:	4b7b      	ldr	r3, [pc, #492]	; (8003c84 <Five_Menu+0xb08>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	9202      	str	r2, [sp, #8]
 8003a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a9e:	9201      	str	r2, [sp, #4]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	9200      	str	r2, [sp, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	; (8003c98 <Five_Menu+0xb1c>)
 8003aa8:	2146      	movs	r1, #70	; 0x46
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f003 f8d4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003ab0:	4b74      	ldr	r3, [pc, #464]	; (8003c84 <Five_Menu+0xb08>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	9202      	str	r2, [sp, #8]
 8003ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aba:	9201      	str	r2, [sp, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	9200      	str	r2, [sp, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a76      	ldr	r2, [pc, #472]	; (8003c9c <Five_Menu+0xb20>)
 8003ac4:	2150      	movs	r1, #80	; 0x50
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f003 f8c6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8003acc:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <Five_Menu+0xb08>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	9202      	str	r2, [sp, #8]
 8003ad2:	221f      	movs	r2, #31
 8003ad4:	9201      	str	r2, [sp, #4]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	9200      	str	r2, [sp, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a70      	ldr	r2, [pc, #448]	; (8003ca0 <Five_Menu+0xb24>)
 8003ade:	215a      	movs	r1, #90	; 0x5a
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f003 f8b9 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003ae6:	4b67      	ldr	r3, [pc, #412]	; (8003c84 <Five_Menu+0xb08>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	9202      	str	r2, [sp, #8]
 8003aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af0:	9201      	str	r2, [sp, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	9200      	str	r2, [sp, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	; (8003ca4 <Five_Menu+0xb28>)
 8003afa:	2164      	movs	r1, #100	; 0x64
 8003afc:	2000      	movs	r0, #0
 8003afe:	f003 f8ab 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003b02:	6838      	ldr	r0, [r7, #0]
 8003b04:	f003 fd58 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8003b08:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <Five_Menu+0xaf4>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
			cnt1 = 8;
 8003b0e:	4b57      	ldr	r3, [pc, #348]	; (8003c6c <Five_Menu+0xaf0>)
 8003b10:	2208      	movs	r2, #8
 8003b12:	701a      	strb	r2, [r3, #0]
			cnt2 = 6;
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <Five_Menu+0xaf8>)
 8003b16:	2206      	movs	r2, #6
 8003b18:	701a      	strb	r2, [r3, #0]
			Check = 40;
 8003b1a:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <Five_Menu+0xb2c>)
 8003b1c:	2228      	movs	r2, #40	; 0x28
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	e09d      	b.n	8003c5e <Five_Menu+0xae2>
		}
		else if(((cnt1 == 8) && (step_DOWN == 1)) || ((cnt2 == 8) && step_UP == 1))
 8003b22:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <Five_Menu+0xaf0>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d103      	bne.n	8003b32 <Five_Menu+0x9b6>
 8003b2a:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <Five_Menu+0xaf4>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d009      	beq.n	8003b46 <Five_Menu+0x9ca>
 8003b32:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <Five_Menu+0xaf8>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	f040 8091 	bne.w	8003c5e <Five_Menu+0xae2>
 8003b3c:	4b4e      	ldr	r3, [pc, #312]	; (8003c78 <Five_Menu+0xafc>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 808c 	bne.w	8003c5e <Five_Menu+0xae2>
		{
			ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003b46:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <Five_Menu+0xb00>)
 8003b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b4c:	9202      	str	r2, [sp, #8]
 8003b4e:	221f      	movs	r2, #31
 8003b50:	9201      	str	r2, [sp, #4]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	9200      	str	r2, [sp, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a49      	ldr	r2, [pc, #292]	; (8003c80 <Five_Menu+0xb04>)
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	2018      	movs	r0, #24
 8003b5e:	f003 f87b 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003b62:	4b48      	ldr	r3, [pc, #288]	; (8003c84 <Five_Menu+0xb08>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	9202      	str	r2, [sp, #8]
 8003b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b6c:	9201      	str	r2, [sp, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	9200      	str	r2, [sp, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a44      	ldr	r2, [pc, #272]	; (8003c88 <Five_Menu+0xb0c>)
 8003b76:	211e      	movs	r1, #30
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f003 f86d 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <Five_Menu+0xb08>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	9202      	str	r2, [sp, #8]
 8003b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b88:	9201      	str	r2, [sp, #4]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	9200      	str	r2, [sp, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <Five_Menu+0xb10>)
 8003b92:	2128      	movs	r1, #40	; 0x28
 8003b94:	2000      	movs	r0, #0
 8003b96:	f003 f85f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003b9a:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <Five_Menu+0xb08>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	9202      	str	r2, [sp, #8]
 8003ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ba4:	9201      	str	r2, [sp, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	9200      	str	r2, [sp, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <Five_Menu+0xb14>)
 8003bae:	2132      	movs	r1, #50	; 0x32
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f003 f851 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003bb6:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <Five_Menu+0xb08>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	9202      	str	r2, [sp, #8]
 8003bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc0:	9201      	str	r2, [sp, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	9200      	str	r2, [sp, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a32      	ldr	r2, [pc, #200]	; (8003c94 <Five_Menu+0xb18>)
 8003bca:	213c      	movs	r1, #60	; 0x3c
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f003 f843 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003bd2:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <Five_Menu+0xb08>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	9202      	str	r2, [sp, #8]
 8003bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bdc:	9201      	str	r2, [sp, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	9200      	str	r2, [sp, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <Five_Menu+0xb1c>)
 8003be6:	2146      	movs	r1, #70	; 0x46
 8003be8:	2000      	movs	r0, #0
 8003bea:	f003 f835 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003bee:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <Five_Menu+0xb08>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	9202      	str	r2, [sp, #8]
 8003bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf8:	9201      	str	r2, [sp, #4]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	9200      	str	r2, [sp, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <Five_Menu+0xb20>)
 8003c02:	2150      	movs	r1, #80	; 0x50
 8003c04:	2000      	movs	r0, #0
 8003c06:	f003 f827 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <Five_Menu+0xb08>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	9202      	str	r2, [sp, #8]
 8003c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c14:	9201      	str	r2, [sp, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	9200      	str	r2, [sp, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <Five_Menu+0xb24>)
 8003c1e:	215a      	movs	r1, #90	; 0x5a
 8003c20:	2000      	movs	r0, #0
 8003c22:	f003 f819 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <Five_Menu+0xb08>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	9202      	str	r2, [sp, #8]
 8003c2c:	221f      	movs	r2, #31
 8003c2e:	9201      	str	r2, [sp, #4]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	9200      	str	r2, [sp, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <Five_Menu+0xb28>)
 8003c38:	2164      	movs	r1, #100	; 0x64
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f003 f80c 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003c40:	6838      	ldr	r0, [r7, #0]
 8003c42:	f003 fcb9 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <Five_Menu+0xaf4>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
			cnt1 = 1;
 8003c4c:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <Five_Menu+0xaf0>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
			cnt2 = 7;
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <Five_Menu+0xaf8>)
 8003c54:	2207      	movs	r2, #7
 8003c56:	701a      	strb	r2, [r3, #0]
			Check = 41;
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <Five_Menu+0xb2c>)
 8003c5a:	2229      	movs	r2, #41	; 0x29
 8003c5c:	701a      	strb	r2, [r3, #0]
		}
	}
	return Check;
 8003c5e:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <Five_Menu+0xb2c>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000001a 	.word	0x2000001a
 8003c70:	20000121 	.word	0x20000121
 8003c74:	2000001b 	.word	0x2000001b
 8003c78:	20000122 	.word	0x20000122
 8003c7c:	20000008 	.word	0x20000008
 8003c80:	0800bf20 	.word	0x0800bf20
 8003c84:	20000000 	.word	0x20000000
 8003c88:	0800bf2c 	.word	0x0800bf2c
 8003c8c:	0800bf34 	.word	0x0800bf34
 8003c90:	0800bf3c 	.word	0x0800bf3c
 8003c94:	0800bf44 	.word	0x0800bf44
 8003c98:	0800bf4c 	.word	0x0800bf4c
 8003c9c:	0800bf54 	.word	0x0800bf54
 8003ca0:	0800bf5c 	.word	0x0800bf5c
 8003ca4:	0800bf64 	.word	0x0800bf64
 8003ca8:	20000123 	.word	0x20000123

08003cac <Six_Menu>:
//Функция обработки действий подменю: "1-Wire"
//Принимает флаги нажатия кнопок "Вниз";"Вверх";
//Принимает переменную времени задержки обработки прерываний
//Возвращает выбранную позицию в списке меню
uint8_t Six_Menu(uint8_t DOWN, uint8_t UP, uint32_t time)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af04      	add	r7, sp, #16
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	603a      	str	r2, [r7, #0]
 8003cb6:	71fb      	strb	r3, [r7, #7]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	71bb      	strb	r3, [r7, #6]
	step_DOWN = DOWN;
 8003cbc:	4a43      	ldr	r2, [pc, #268]	; (8003dcc <Six_Menu+0x120>)
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	7013      	strb	r3, [r2, #0]
	step_UP = UP;
 8003cc2:	4a43      	ldr	r2, [pc, #268]	; (8003dd0 <Six_Menu+0x124>)
 8003cc4:	79bb      	ldrb	r3, [r7, #6]
 8003cc6:	7013      	strb	r3, [r2, #0]
	if((step_DOWN) || (step_UP))
 8003cc8:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <Six_Menu+0x120>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <Six_Menu+0x2c>
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <Six_Menu+0x124>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d072      	beq.n	8003dbe <Six_Menu+0x112>
	{
		if(cnt1 == 1)
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <Six_Menu+0x128>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d135      	bne.n	8003d4c <Six_Menu+0xa0>
		{
			ST7735_DrawString(48, 0, "1-WIRE", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003ce0:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <Six_Menu+0x12c>)
 8003ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce6:	9202      	str	r2, [sp, #8]
 8003ce8:	221f      	movs	r2, #31
 8003cea:	9201      	str	r2, [sp, #4]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	9200      	str	r2, [sp, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3a      	ldr	r2, [pc, #232]	; (8003ddc <Six_Menu+0x130>)
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2030      	movs	r0, #48	; 0x30
 8003cf8:	f002 ffae 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- WIRE0", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8003cfc:	4b38      	ldr	r3, [pc, #224]	; (8003de0 <Six_Menu+0x134>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	9202      	str	r2, [sp, #8]
 8003d02:	221f      	movs	r2, #31
 8003d04:	9201      	str	r2, [sp, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	9200      	str	r2, [sp, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a35      	ldr	r2, [pc, #212]	; (8003de4 <Six_Menu+0x138>)
 8003d0e:	211e      	movs	r1, #30
 8003d10:	2000      	movs	r0, #0
 8003d12:	f002 ffa1 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- WIRE1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003d16:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <Six_Menu+0x134>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	9202      	str	r2, [sp, #8]
 8003d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d20:	9201      	str	r2, [sp, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	9200      	str	r2, [sp, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2f      	ldr	r2, [pc, #188]	; (8003de8 <Six_Menu+0x13c>)
 8003d2a:	2128      	movs	r1, #40	; 0x28
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f002 ff93 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003d32:	6838      	ldr	r0, [r7, #0]
 8003d34:	f003 fc40 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <Six_Menu+0x120>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
			cnt1 = 2;
 8003d3e:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <Six_Menu+0x128>)
 8003d40:	2202      	movs	r2, #2
 8003d42:	701a      	strb	r2, [r3, #0]
			Check = 32;
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <Six_Menu+0x140>)
 8003d46:	2220      	movs	r2, #32
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	e038      	b.n	8003dbe <Six_Menu+0x112>
		}
		else if(cnt1 == 2)
 8003d4c:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <Six_Menu+0x128>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d134      	bne.n	8003dbe <Six_Menu+0x112>
		{
			ST7735_DrawString(48, 0, "1-WIRE", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <Six_Menu+0x12c>)
 8003d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d5a:	9202      	str	r2, [sp, #8]
 8003d5c:	221f      	movs	r2, #31
 8003d5e:	9201      	str	r2, [sp, #4]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	9200      	str	r2, [sp, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <Six_Menu+0x130>)
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2030      	movs	r0, #48	; 0x30
 8003d6c:	f002 ff74 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- WIRE0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <Six_Menu+0x134>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	9202      	str	r2, [sp, #8]
 8003d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d7a:	9201      	str	r2, [sp, #4]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	9200      	str	r2, [sp, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <Six_Menu+0x138>)
 8003d84:	211e      	movs	r1, #30
 8003d86:	2000      	movs	r0, #0
 8003d88:	f002 ff66 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- WIRE1", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <Six_Menu+0x134>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	9202      	str	r2, [sp, #8]
 8003d92:	221f      	movs	r2, #31
 8003d94:	9201      	str	r2, [sp, #4]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	9200      	str	r2, [sp, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <Six_Menu+0x13c>)
 8003d9e:	2128      	movs	r1, #40	; 0x28
 8003da0:	2000      	movs	r0, #0
 8003da2:	f002 ff59 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003da6:	6838      	ldr	r0, [r7, #0]
 8003da8:	f003 fc06 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <Six_Menu+0x120>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
			cnt1 = 1;
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <Six_Menu+0x128>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
			Check = 33;
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <Six_Menu+0x140>)
 8003dba:	2221      	movs	r2, #33	; 0x21
 8003dbc:	701a      	strb	r2, [r3, #0]
		}
	}
	return Check;
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <Six_Menu+0x140>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000121 	.word	0x20000121
 8003dd0:	20000122 	.word	0x20000122
 8003dd4:	2000001a 	.word	0x2000001a
 8003dd8:	20000008 	.word	0x20000008
 8003ddc:	0800bf6c 	.word	0x0800bf6c
 8003de0:	20000000 	.word	0x20000000
 8003de4:	0800bf74 	.word	0x0800bf74
 8003de8:	0800bf7c 	.word	0x0800bf7c
 8003dec:	20000123 	.word	0x20000123

08003df0 <Seven_Menu>:
//Функция обработки действий подменю: "PWM"
//Принимает флаги нажатия кнопок "Вниз";"Вверх";
//Принимает переменную времени задержки обработки прерываний
//Возвращает выбранную позицию в списке меню
uint8_t Seven_Menu(uint8_t DOWN, uint8_t UP, uint32_t time)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af04      	add	r7, sp, #16
 8003df6:	4603      	mov	r3, r0
 8003df8:	603a      	str	r2, [r7, #0]
 8003dfa:	71fb      	strb	r3, [r7, #7]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	71bb      	strb	r3, [r7, #6]
	step_DOWN = DOWN;
 8003e00:	4a9e      	ldr	r2, [pc, #632]	; (800407c <Seven_Menu+0x28c>)
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	7013      	strb	r3, [r2, #0]
	step_UP = UP;
 8003e06:	4a9e      	ldr	r2, [pc, #632]	; (8004080 <Seven_Menu+0x290>)
 8003e08:	79bb      	ldrb	r3, [r7, #6]
 8003e0a:	7013      	strb	r3, [r2, #0]
	if((step_DOWN) || (step_UP))
 8003e0c:	4b9b      	ldr	r3, [pc, #620]	; (800407c <Seven_Menu+0x28c>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <Seven_Menu+0x2e>
 8003e14:	4b9a      	ldr	r3, [pc, #616]	; (8004080 <Seven_Menu+0x290>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 81ab 	beq.w	8004174 <Seven_Menu+0x384>
	{
		if(((cnt1 == 1) && (step_DOWN == 1)) || ((cnt2 == 1) && step_UP == 1))
 8003e1e:	4b99      	ldr	r3, [pc, #612]	; (8004084 <Seven_Menu+0x294>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d103      	bne.n	8003e2e <Seven_Menu+0x3e>
 8003e26:	4b95      	ldr	r3, [pc, #596]	; (800407c <Seven_Menu+0x28c>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d007      	beq.n	8003e3e <Seven_Menu+0x4e>
 8003e2e:	4b96      	ldr	r3, [pc, #600]	; (8004088 <Seven_Menu+0x298>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d158      	bne.n	8003ee8 <Seven_Menu+0xf8>
 8003e36:	4b92      	ldr	r3, [pc, #584]	; (8004080 <Seven_Menu+0x290>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d154      	bne.n	8003ee8 <Seven_Menu+0xf8>
		{
			ST7735_DrawString(71, 0, "PWM", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003e3e:	4b93      	ldr	r3, [pc, #588]	; (800408c <Seven_Menu+0x29c>)
 8003e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e44:	9202      	str	r2, [sp, #8]
 8003e46:	221f      	movs	r2, #31
 8003e48:	9201      	str	r2, [sp, #4]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	9200      	str	r2, [sp, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a8f      	ldr	r2, [pc, #572]	; (8004090 <Seven_Menu+0x2a0>)
 8003e52:	2100      	movs	r1, #0
 8003e54:	2047      	movs	r0, #71	; 0x47
 8003e56:	f002 feff 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- PWM0", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8003e5a:	4b8e      	ldr	r3, [pc, #568]	; (8004094 <Seven_Menu+0x2a4>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	9202      	str	r2, [sp, #8]
 8003e60:	221f      	movs	r2, #31
 8003e62:	9201      	str	r2, [sp, #4]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	9200      	str	r2, [sp, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a8b      	ldr	r2, [pc, #556]	; (8004098 <Seven_Menu+0x2a8>)
 8003e6c:	211e      	movs	r1, #30
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f002 fef2 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- PWM1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003e74:	4b87      	ldr	r3, [pc, #540]	; (8004094 <Seven_Menu+0x2a4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	9202      	str	r2, [sp, #8]
 8003e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e7e:	9201      	str	r2, [sp, #4]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	9200      	str	r2, [sp, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a85      	ldr	r2, [pc, #532]	; (800409c <Seven_Menu+0x2ac>)
 8003e88:	2128      	movs	r1, #40	; 0x28
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f002 fee4 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- PWM2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003e90:	4b80      	ldr	r3, [pc, #512]	; (8004094 <Seven_Menu+0x2a4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	9202      	str	r2, [sp, #8]
 8003e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9a:	9201      	str	r2, [sp, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	9200      	str	r2, [sp, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7f      	ldr	r2, [pc, #508]	; (80040a0 <Seven_Menu+0x2b0>)
 8003ea4:	2132      	movs	r1, #50	; 0x32
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f002 fed6 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- PWM3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003eac:	4b79      	ldr	r3, [pc, #484]	; (8004094 <Seven_Menu+0x2a4>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	9202      	str	r2, [sp, #8]
 8003eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb6:	9201      	str	r2, [sp, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	9200      	str	r2, [sp, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a79      	ldr	r2, [pc, #484]	; (80040a4 <Seven_Menu+0x2b4>)
 8003ec0:	213c      	movs	r1, #60	; 0x3c
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f002 fec8 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003ec8:	6838      	ldr	r0, [r7, #0]
 8003eca:	f003 fb75 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8003ece:	4b6b      	ldr	r3, [pc, #428]	; (800407c <Seven_Menu+0x28c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
			cnt1 = 2;
 8003ed4:	4b6b      	ldr	r3, [pc, #428]	; (8004084 <Seven_Menu+0x294>)
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]
			cnt2 = 4;
 8003eda:	4b6b      	ldr	r3, [pc, #428]	; (8004088 <Seven_Menu+0x298>)
 8003edc:	2204      	movs	r2, #4
 8003ede:	701a      	strb	r2, [r3, #0]
			Check = 28;
 8003ee0:	4b71      	ldr	r3, [pc, #452]	; (80040a8 <Seven_Menu+0x2b8>)
 8003ee2:	221c      	movs	r2, #28
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e145      	b.n	8004174 <Seven_Menu+0x384>
		}
		else if(((cnt1 == 2) && (step_DOWN == 1)) || ((cnt2 == 2) && step_UP == 1))
 8003ee8:	4b66      	ldr	r3, [pc, #408]	; (8004084 <Seven_Menu+0x294>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d103      	bne.n	8003ef8 <Seven_Menu+0x108>
 8003ef0:	4b62      	ldr	r3, [pc, #392]	; (800407c <Seven_Menu+0x28c>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d007      	beq.n	8003f08 <Seven_Menu+0x118>
 8003ef8:	4b63      	ldr	r3, [pc, #396]	; (8004088 <Seven_Menu+0x298>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d158      	bne.n	8003fb2 <Seven_Menu+0x1c2>
 8003f00:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <Seven_Menu+0x290>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d154      	bne.n	8003fb2 <Seven_Menu+0x1c2>
		{
			ST7735_DrawString(71, 0, "PWM", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003f08:	4b60      	ldr	r3, [pc, #384]	; (800408c <Seven_Menu+0x29c>)
 8003f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f0e:	9202      	str	r2, [sp, #8]
 8003f10:	221f      	movs	r2, #31
 8003f12:	9201      	str	r2, [sp, #4]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	9200      	str	r2, [sp, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <Seven_Menu+0x2a0>)
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	2047      	movs	r0, #71	; 0x47
 8003f20:	f002 fe9a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- PWM0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003f24:	4b5b      	ldr	r3, [pc, #364]	; (8004094 <Seven_Menu+0x2a4>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	9202      	str	r2, [sp, #8]
 8003f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2e:	9201      	str	r2, [sp, #4]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	9200      	str	r2, [sp, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a58      	ldr	r2, [pc, #352]	; (8004098 <Seven_Menu+0x2a8>)
 8003f38:	211e      	movs	r1, #30
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f002 fe8c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- PWM1", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8003f40:	4b54      	ldr	r3, [pc, #336]	; (8004094 <Seven_Menu+0x2a4>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	9202      	str	r2, [sp, #8]
 8003f46:	221f      	movs	r2, #31
 8003f48:	9201      	str	r2, [sp, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	9200      	str	r2, [sp, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a52      	ldr	r2, [pc, #328]	; (800409c <Seven_Menu+0x2ac>)
 8003f52:	2128      	movs	r1, #40	; 0x28
 8003f54:	2000      	movs	r0, #0
 8003f56:	f002 fe7f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- PWM2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003f5a:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <Seven_Menu+0x2a4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	9202      	str	r2, [sp, #8]
 8003f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f64:	9201      	str	r2, [sp, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	9200      	str	r2, [sp, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a4c      	ldr	r2, [pc, #304]	; (80040a0 <Seven_Menu+0x2b0>)
 8003f6e:	2132      	movs	r1, #50	; 0x32
 8003f70:	2000      	movs	r0, #0
 8003f72:	f002 fe71 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- PWM3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <Seven_Menu+0x2a4>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	9202      	str	r2, [sp, #8]
 8003f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f80:	9201      	str	r2, [sp, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	9200      	str	r2, [sp, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a46      	ldr	r2, [pc, #280]	; (80040a4 <Seven_Menu+0x2b4>)
 8003f8a:	213c      	movs	r1, #60	; 0x3c
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f002 fe63 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8003f92:	6838      	ldr	r0, [r7, #0]
 8003f94:	f003 fb10 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8003f98:	4b38      	ldr	r3, [pc, #224]	; (800407c <Seven_Menu+0x28c>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
			cnt1 = 3;
 8003f9e:	4b39      	ldr	r3, [pc, #228]	; (8004084 <Seven_Menu+0x294>)
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	701a      	strb	r2, [r3, #0]
			cnt2 = 1;
 8003fa4:	4b38      	ldr	r3, [pc, #224]	; (8004088 <Seven_Menu+0x298>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
			Check = 29;
 8003faa:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <Seven_Menu+0x2b8>)
 8003fac:	221d      	movs	r2, #29
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e0e0      	b.n	8004174 <Seven_Menu+0x384>
		}
		else if(((cnt1 == 3) && (step_DOWN == 1)) || ((cnt2 == 3) && step_UP == 1))
 8003fb2:	4b34      	ldr	r3, [pc, #208]	; (8004084 <Seven_Menu+0x294>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d103      	bne.n	8003fc2 <Seven_Menu+0x1d2>
 8003fba:	4b30      	ldr	r3, [pc, #192]	; (800407c <Seven_Menu+0x28c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d007      	beq.n	8003fd2 <Seven_Menu+0x1e2>
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <Seven_Menu+0x298>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d170      	bne.n	80040ac <Seven_Menu+0x2bc>
 8003fca:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <Seven_Menu+0x290>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d16c      	bne.n	80040ac <Seven_Menu+0x2bc>
		{
			ST7735_DrawString(71, 0, "PWM", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <Seven_Menu+0x29c>)
 8003fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd8:	9202      	str	r2, [sp, #8]
 8003fda:	221f      	movs	r2, #31
 8003fdc:	9201      	str	r2, [sp, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	9200      	str	r2, [sp, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <Seven_Menu+0x2a0>)
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	2047      	movs	r0, #71	; 0x47
 8003fea:	f002 fe35 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- PWM0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003fee:	4b29      	ldr	r3, [pc, #164]	; (8004094 <Seven_Menu+0x2a4>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	9202      	str	r2, [sp, #8]
 8003ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ff8:	9201      	str	r2, [sp, #4]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	9200      	str	r2, [sp, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a25      	ldr	r2, [pc, #148]	; (8004098 <Seven_Menu+0x2a8>)
 8004002:	211e      	movs	r1, #30
 8004004:	2000      	movs	r0, #0
 8004006:	f002 fe27 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- PWM1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <Seven_Menu+0x2a4>)
 800400c:	2200      	movs	r2, #0
 800400e:	9202      	str	r2, [sp, #8]
 8004010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004014:	9201      	str	r2, [sp, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	9200      	str	r2, [sp, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1f      	ldr	r2, [pc, #124]	; (800409c <Seven_Menu+0x2ac>)
 800401e:	2128      	movs	r1, #40	; 0x28
 8004020:	2000      	movs	r0, #0
 8004022:	f002 fe19 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- PWM2", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <Seven_Menu+0x2a4>)
 8004028:	2200      	movs	r2, #0
 800402a:	9202      	str	r2, [sp, #8]
 800402c:	221f      	movs	r2, #31
 800402e:	9201      	str	r2, [sp, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	9200      	str	r2, [sp, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <Seven_Menu+0x2b0>)
 8004038:	2132      	movs	r1, #50	; 0x32
 800403a:	2000      	movs	r0, #0
 800403c:	f002 fe0c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- PWM3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004040:	4b14      	ldr	r3, [pc, #80]	; (8004094 <Seven_Menu+0x2a4>)
 8004042:	2200      	movs	r2, #0
 8004044:	9202      	str	r2, [sp, #8]
 8004046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800404a:	9201      	str	r2, [sp, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	9200      	str	r2, [sp, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <Seven_Menu+0x2b4>)
 8004054:	213c      	movs	r1, #60	; 0x3c
 8004056:	2000      	movs	r0, #0
 8004058:	f002 fdfe 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 800405c:	6838      	ldr	r0, [r7, #0]
 800405e:	f003 faab 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <Seven_Menu+0x28c>)
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
			cnt1 = 4;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <Seven_Menu+0x294>)
 800406a:	2204      	movs	r2, #4
 800406c:	701a      	strb	r2, [r3, #0]
			cnt2 = 2;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <Seven_Menu+0x298>)
 8004070:	2202      	movs	r2, #2
 8004072:	701a      	strb	r2, [r3, #0]
			Check = 30;
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <Seven_Menu+0x2b8>)
 8004076:	221e      	movs	r2, #30
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e07b      	b.n	8004174 <Seven_Menu+0x384>
 800407c:	20000121 	.word	0x20000121
 8004080:	20000122 	.word	0x20000122
 8004084:	2000001a 	.word	0x2000001a
 8004088:	2000001b 	.word	0x2000001b
 800408c:	20000008 	.word	0x20000008
 8004090:	0800bf84 	.word	0x0800bf84
 8004094:	20000000 	.word	0x20000000
 8004098:	0800bf88 	.word	0x0800bf88
 800409c:	0800bf90 	.word	0x0800bf90
 80040a0:	0800bf98 	.word	0x0800bf98
 80040a4:	0800bfa0 	.word	0x0800bfa0
 80040a8:	20000123 	.word	0x20000123
		}
		else if(((cnt1 == 4) && (step_DOWN == 1)) || ((cnt2 == 4) && step_UP == 1))
 80040ac:	4b34      	ldr	r3, [pc, #208]	; (8004180 <Seven_Menu+0x390>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d103      	bne.n	80040bc <Seven_Menu+0x2cc>
 80040b4:	4b33      	ldr	r3, [pc, #204]	; (8004184 <Seven_Menu+0x394>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d007      	beq.n	80040cc <Seven_Menu+0x2dc>
 80040bc:	4b32      	ldr	r3, [pc, #200]	; (8004188 <Seven_Menu+0x398>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d157      	bne.n	8004174 <Seven_Menu+0x384>
 80040c4:	4b31      	ldr	r3, [pc, #196]	; (800418c <Seven_Menu+0x39c>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d153      	bne.n	8004174 <Seven_Menu+0x384>
		{
			ST7735_DrawString(71, 0, "PWM", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80040cc:	4b30      	ldr	r3, [pc, #192]	; (8004190 <Seven_Menu+0x3a0>)
 80040ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d2:	9202      	str	r2, [sp, #8]
 80040d4:	221f      	movs	r2, #31
 80040d6:	9201      	str	r2, [sp, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	9200      	str	r2, [sp, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <Seven_Menu+0x3a4>)
 80040e0:	2100      	movs	r1, #0
 80040e2:	2047      	movs	r0, #71	; 0x47
 80040e4:	f002 fdb8 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 30, "- PWM0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <Seven_Menu+0x3a8>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	9202      	str	r2, [sp, #8]
 80040ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040f2:	9201      	str	r2, [sp, #4]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	9200      	str	r2, [sp, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a28      	ldr	r2, [pc, #160]	; (800419c <Seven_Menu+0x3ac>)
 80040fc:	211e      	movs	r1, #30
 80040fe:	2000      	movs	r0, #0
 8004100:	f002 fdaa 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 40, "- PWM1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <Seven_Menu+0x3a8>)
 8004106:	2200      	movs	r2, #0
 8004108:	9202      	str	r2, [sp, #8]
 800410a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800410e:	9201      	str	r2, [sp, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	9200      	str	r2, [sp, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <Seven_Menu+0x3b0>)
 8004118:	2128      	movs	r1, #40	; 0x28
 800411a:	2000      	movs	r0, #0
 800411c:	f002 fd9c 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 50, "- PWM2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <Seven_Menu+0x3a8>)
 8004122:	2200      	movs	r2, #0
 8004124:	9202      	str	r2, [sp, #8]
 8004126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800412a:	9201      	str	r2, [sp, #4]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	9200      	str	r2, [sp, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <Seven_Menu+0x3b4>)
 8004134:	2132      	movs	r1, #50	; 0x32
 8004136:	2000      	movs	r0, #0
 8004138:	f002 fd8e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(0, 60, "- PWM3", Font_7x10, ST7735_BLUE, ST7735_BLACK);
 800413c:	4b16      	ldr	r3, [pc, #88]	; (8004198 <Seven_Menu+0x3a8>)
 800413e:	2200      	movs	r2, #0
 8004140:	9202      	str	r2, [sp, #8]
 8004142:	221f      	movs	r2, #31
 8004144:	9201      	str	r2, [sp, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	9200      	str	r2, [sp, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <Seven_Menu+0x3b8>)
 800414e:	213c      	movs	r1, #60	; 0x3c
 8004150:	2000      	movs	r0, #0
 8004152:	f002 fd81 	bl	8006c58 <ST7735_DrawString>
			HAL_Delay(time);
 8004156:	6838      	ldr	r0, [r7, #0]
 8004158:	f003 fa2e 	bl	80075b8 <HAL_Delay>
			step_DOWN = 0;
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <Seven_Menu+0x394>)
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
			cnt1 = 1;
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <Seven_Menu+0x390>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
			cnt2 = 3;
 8004168:	4b07      	ldr	r3, [pc, #28]	; (8004188 <Seven_Menu+0x398>)
 800416a:	2203      	movs	r2, #3
 800416c:	701a      	strb	r2, [r3, #0]
			Check = 31;
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <Seven_Menu+0x3bc>)
 8004170:	221f      	movs	r2, #31
 8004172:	701a      	strb	r2, [r3, #0]
		}
	}
	return Check;
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <Seven_Menu+0x3bc>)
 8004176:	781b      	ldrb	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	2000001a 	.word	0x2000001a
 8004184:	20000121 	.word	0x20000121
 8004188:	2000001b 	.word	0x2000001b
 800418c:	20000122 	.word	0x20000122
 8004190:	20000008 	.word	0x20000008
 8004194:	0800bf84 	.word	0x0800bf84
 8004198:	20000000 	.word	0x20000000
 800419c:	0800bf88 	.word	0x0800bf88
 80041a0:	0800bf90 	.word	0x0800bf90
 80041a4:	0800bf98 	.word	0x0800bf98
 80041a8:	0800bfa0 	.word	0x0800bfa0
 80041ac:	20000123 	.word	0x20000123

080041b0 <Item_Selection>:
//Функция отрисовки при переходе в новое подменю
//Принимает переменную выбранного пункта меню
//Возвращает переменную, которая отвечает за выбор рабочей области
uint8_t Item_Selection(uint8_t choice)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
	if(choice == 1)			//item: OUTPUT
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <Item_Selection+0x1c>
	{
		Menu_Output();
 80041c0:	f000 fb9a 	bl	80048f8 <Menu_Output>
		Num_Menu = 2;
 80041c4:	4bb1      	ldr	r3, [pc, #708]	; (800448c <Item_Selection+0x2dc>)
 80041c6:	2202      	movs	r2, #2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e38a      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 2)	//item: BLOCKS
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d105      	bne.n	80041de <Item_Selection+0x2e>
	{
		Menu_Blocks();
 80041d2:	f000 fc07 	bl	80049e4 <Menu_Blocks>
		Num_Menu = 3;
 80041d6:	4bad      	ldr	r3, [pc, #692]	; (800448c <Item_Selection+0x2dc>)
 80041d8:	2203      	movs	r2, #3
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e381      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 3)	//item: ANALOG
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d105      	bne.n	80041f0 <Item_Selection+0x40>
	{
		Menu_Analog();
 80041e4:	f000 fd62 	bl	8004cac <Menu_Analog>
		Num_Menu = 4;
 80041e8:	4ba8      	ldr	r3, [pc, #672]	; (800448c <Item_Selection+0x2dc>)
 80041ea:	2204      	movs	r2, #4
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e378      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 4)	//item: DIGITAL
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d105      	bne.n	8004202 <Item_Selection+0x52>
	{
		Menu_Digital();
 80041f6:	f000 ff37 	bl	8005068 <Menu_Digital>
		Num_Menu = 5;
 80041fa:	4ba4      	ldr	r3, [pc, #656]	; (800448c <Item_Selection+0x2dc>)
 80041fc:	2205      	movs	r2, #5
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e36f      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 5)	//item: OPEN DRAIN
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d105      	bne.n	8004214 <Item_Selection+0x64>
	{
		Menu_OpenDrain();
 8004208:	f001 f8c6 	bl	8005398 <Menu_OpenDrain>
		Num_Menu = 6;
 800420c:	4b9f      	ldr	r3, [pc, #636]	; (800448c <Item_Selection+0x2dc>)
 800420e:	2206      	movs	r2, #6
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e366      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 6)	//item: 1-WIRE
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	2b06      	cmp	r3, #6
 8004218:	d105      	bne.n	8004226 <Item_Selection+0x76>
	{
		Menu_1Wire();
 800421a:	f001 fa9b 	bl	8005754 <Menu_1Wire>
		Num_Menu = 7;
 800421e:	4b9b      	ldr	r3, [pc, #620]	; (800448c <Item_Selection+0x2dc>)
 8004220:	2207      	movs	r2, #7
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e35d      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 7)	//item: PWM
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	2b07      	cmp	r3, #7
 800422a:	d105      	bne.n	8004238 <Item_Selection+0x88>
	{
		Menu_PWM();
 800422c:	f001 fb2a 	bl	8005884 <Menu_PWM>
		Num_Menu = 8;
 8004230:	4b96      	ldr	r3, [pc, #600]	; (800448c <Item_Selection+0x2dc>)
 8004232:	2208      	movs	r2, #8
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e354      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 8)	//item: RELAY
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	2b08      	cmp	r3, #8
 800423c:	d119      	bne.n	8004272 <Item_Selection+0xc2>
	{
		//Показать адрес блока(Запрос)
		Count[0] = Data_Block(MCU_RELAY_CNT);
 800423e:	20a1      	movs	r0, #161	; 0xa1
 8004240:	f7fc fefa 	bl	8001038 <Data_Block>
 8004244:	4603      	mov	r3, r0
 8004246:	461a      	mov	r2, r3
 8004248:	4b91      	ldr	r3, [pc, #580]	; (8004490 <Item_Selection+0x2e0>)
 800424a:	701a      	strb	r2, [r3, #0]
		if(Count[0] > 0)
 800424c:	4b90      	ldr	r3, [pc, #576]	; (8004490 <Item_Selection+0x2e0>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <Item_Selection+0xb4>
			Filling_Menu_Block(MCU_RELAY_ADR, Count[0], RELAY);
 8004254:	4b8e      	ldr	r3, [pc, #568]	; (8004490 <Item_Selection+0x2e0>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2200      	movs	r2, #0
 800425a:	4619      	mov	r1, r3
 800425c:	20b1      	movs	r0, #177	; 0xb1
 800425e:	f001 fc13 	bl	8005a88 <Filling_Menu_Block>
 8004262:	e002      	b.n	800426a <Item_Selection+0xba>
		else
			Not_Found_Block(RELAY);
 8004264:	2000      	movs	r0, #0
 8004266:	f001 fd13 	bl	8005c90 <Not_Found_Block>
		Num_Menu = 9;
 800426a:	4b88      	ldr	r3, [pc, #544]	; (800448c <Item_Selection+0x2dc>)
 800426c:	2209      	movs	r2, #9
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e337      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 9)	//item: DIGITAL
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	2b09      	cmp	r3, #9
 8004276:	d119      	bne.n	80042ac <Item_Selection+0xfc>
	{
		//Показать адрес блока(Запрос)
		Count[1] = Data_Block(MCU_DIGITAL_CNT);
 8004278:	20a2      	movs	r0, #162	; 0xa2
 800427a:	f7fc fedd 	bl	8001038 <Data_Block>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	4b83      	ldr	r3, [pc, #524]	; (8004490 <Item_Selection+0x2e0>)
 8004284:	705a      	strb	r2, [r3, #1]
		if(Count[1] > 0)
 8004286:	4b82      	ldr	r3, [pc, #520]	; (8004490 <Item_Selection+0x2e0>)
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <Item_Selection+0xee>
			Filling_Menu_Block(MCU_DIGITAL_ADR, Count[1], DIGITAL);
 800428e:	4b80      	ldr	r3, [pc, #512]	; (8004490 <Item_Selection+0x2e0>)
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	2201      	movs	r2, #1
 8004294:	4619      	mov	r1, r3
 8004296:	20b2      	movs	r0, #178	; 0xb2
 8004298:	f001 fbf6 	bl	8005a88 <Filling_Menu_Block>
 800429c:	e002      	b.n	80042a4 <Item_Selection+0xf4>
		else
			Not_Found_Block(RELAY);
 800429e:	2000      	movs	r0, #0
 80042a0:	f001 fcf6 	bl	8005c90 <Not_Found_Block>
		Num_Menu = 10;
 80042a4:	4b79      	ldr	r3, [pc, #484]	; (800448c <Item_Selection+0x2dc>)
 80042a6:	220a      	movs	r2, #10
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e31a      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 10)	//item: DIMMING
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	2b0a      	cmp	r3, #10
 80042b0:	d119      	bne.n	80042e6 <Item_Selection+0x136>
	{
		//Показать адрес блока(Запрос)
		Count[2] = Data_Block(MCU_DIMMING_CNT);
 80042b2:	20a3      	movs	r0, #163	; 0xa3
 80042b4:	f7fc fec0 	bl	8001038 <Data_Block>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b74      	ldr	r3, [pc, #464]	; (8004490 <Item_Selection+0x2e0>)
 80042be:	709a      	strb	r2, [r3, #2]
		if(Count[2] > 0)
 80042c0:	4b73      	ldr	r3, [pc, #460]	; (8004490 <Item_Selection+0x2e0>)
 80042c2:	789b      	ldrb	r3, [r3, #2]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <Item_Selection+0x128>
			Filling_Menu_Block(MCU_DIMMING_ADR, Count[2], DIMMING);
 80042c8:	4b71      	ldr	r3, [pc, #452]	; (8004490 <Item_Selection+0x2e0>)
 80042ca:	789b      	ldrb	r3, [r3, #2]
 80042cc:	2202      	movs	r2, #2
 80042ce:	4619      	mov	r1, r3
 80042d0:	20b3      	movs	r0, #179	; 0xb3
 80042d2:	f001 fbd9 	bl	8005a88 <Filling_Menu_Block>
 80042d6:	e002      	b.n	80042de <Item_Selection+0x12e>
		else
			Not_Found_Block(DIMMING);
 80042d8:	2002      	movs	r0, #2
 80042da:	f001 fcd9 	bl	8005c90 <Not_Found_Block>
		Num_Menu = 11;
 80042de:	4b6b      	ldr	r3, [pc, #428]	; (800448c <Item_Selection+0x2dc>)
 80042e0:	220b      	movs	r2, #11
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e2fd      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 11)	//item: INTERFACE
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	2b0b      	cmp	r3, #11
 80042ea:	d119      	bne.n	8004320 <Item_Selection+0x170>
	{
		//Показать адрес блока(Запрос)
		Count[3] = Data_Block(MCU_INTERFACE_CNT);
 80042ec:	20a4      	movs	r0, #164	; 0xa4
 80042ee:	f7fc fea3 	bl	8001038 <Data_Block>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	4b66      	ldr	r3, [pc, #408]	; (8004490 <Item_Selection+0x2e0>)
 80042f8:	70da      	strb	r2, [r3, #3]
		if(Count[3] > 0)
 80042fa:	4b65      	ldr	r3, [pc, #404]	; (8004490 <Item_Selection+0x2e0>)
 80042fc:	78db      	ldrb	r3, [r3, #3]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <Item_Selection+0x162>
			Filling_Menu_Block(MCU_INTERFACE_ADR, Count[3], INTERFACE);
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <Item_Selection+0x2e0>)
 8004304:	78db      	ldrb	r3, [r3, #3]
 8004306:	2203      	movs	r2, #3
 8004308:	4619      	mov	r1, r3
 800430a:	20b4      	movs	r0, #180	; 0xb4
 800430c:	f001 fbbc 	bl	8005a88 <Filling_Menu_Block>
 8004310:	e002      	b.n	8004318 <Item_Selection+0x168>
		else
			Not_Found_Block(INTERFACE);
 8004312:	2003      	movs	r0, #3
 8004314:	f001 fcbc 	bl	8005c90 <Not_Found_Block>
		Num_Menu = 12;
 8004318:	4b5c      	ldr	r3, [pc, #368]	; (800448c <Item_Selection+0x2dc>)
 800431a:	220c      	movs	r2, #12
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e2e0      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 12)	//item: AIN0_ON/OFF
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	2b0c      	cmp	r3, #12
 8004324:	d114      	bne.n	8004350 <Item_Selection+0x1a0>
	{
		if(!Status_AIN[0])
 8004326:	4b5b      	ldr	r3, [pc, #364]	; (8004494 <Item_Selection+0x2e4>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <Item_Selection+0x18c>
		{
			SPI_RW(AIN0_ON);
 800432e:	2033      	movs	r0, #51	; 0x33
 8004330:	f7fb ff86 	bl	8000240 <SPI_RW>
			Status_AIN[0] = 1;
 8004334:	4b57      	ldr	r3, [pc, #348]	; (8004494 <Item_Selection+0x2e4>)
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	e005      	b.n	8004348 <Item_Selection+0x198>
			//Send_WRITE_command(0xB000, 0x01);
			//Возможно добавить посылку комманды на MCU
		}
		else
		{
			SPI_RW(AIN0_OFF);
 800433c:	2034      	movs	r0, #52	; 0x34
 800433e:	f7fb ff7f 	bl	8000240 <SPI_RW>
			Status_AIN[0] = 0;
 8004342:	4b54      	ldr	r3, [pc, #336]	; (8004494 <Item_Selection+0x2e4>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
//			send_str("AIN0_OFF\n");
			//Send_WRITE_command(0xB000, 0x00);
		}
		Num_Menu = 13;
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <Item_Selection+0x2dc>)
 800434a:	220d      	movs	r2, #13
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e2c8      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 13)	//item: AIN1_ON/OFF
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	2b0d      	cmp	r3, #13
 8004354:	d114      	bne.n	8004380 <Item_Selection+0x1d0>
	{
		if(!Status_AIN[1])
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <Item_Selection+0x2e4>)
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <Item_Selection+0x1bc>
		{
			SPI_RW(AIN1_ON);
 800435e:	2035      	movs	r0, #53	; 0x35
 8004360:	f7fb ff6e 	bl	8000240 <SPI_RW>
			Status_AIN[1] = 1;
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <Item_Selection+0x2e4>)
 8004366:	2201      	movs	r2, #1
 8004368:	705a      	strb	r2, [r3, #1]
 800436a:	e005      	b.n	8004378 <Item_Selection+0x1c8>
//			send_str("AIN1_ON\n");
			//Send_WRITE_command(0xB001, 0x01);
		}
		else
		{
			SPI_RW(AIN1_OFF);
 800436c:	2036      	movs	r0, #54	; 0x36
 800436e:	f7fb ff67 	bl	8000240 <SPI_RW>
			Status_AIN[1] = 0;
 8004372:	4b48      	ldr	r3, [pc, #288]	; (8004494 <Item_Selection+0x2e4>)
 8004374:	2200      	movs	r2, #0
 8004376:	705a      	strb	r2, [r3, #1]
//			send_str("AIN1_OFF\n");
			//Send_WRITE_command(0xB001, 0x00);
		}
		Num_Menu = 14;
 8004378:	4b44      	ldr	r3, [pc, #272]	; (800448c <Item_Selection+0x2dc>)
 800437a:	220e      	movs	r2, #14
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e2b0      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 14)	//item: AIN2_ON/OFF
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	2b0e      	cmp	r3, #14
 8004384:	d114      	bne.n	80043b0 <Item_Selection+0x200>
	{
		if(!Status_AIN[2])
 8004386:	4b43      	ldr	r3, [pc, #268]	; (8004494 <Item_Selection+0x2e4>)
 8004388:	789b      	ldrb	r3, [r3, #2]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <Item_Selection+0x1ec>
		{
			SPI_RW(AIN2_ON);
 800438e:	2037      	movs	r0, #55	; 0x37
 8004390:	f7fb ff56 	bl	8000240 <SPI_RW>
			Status_AIN[2] = 1;
 8004394:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <Item_Selection+0x2e4>)
 8004396:	2201      	movs	r2, #1
 8004398:	709a      	strb	r2, [r3, #2]
 800439a:	e005      	b.n	80043a8 <Item_Selection+0x1f8>
//			send_str("AIN2_ON\n");
			//Send_WRITE_command(0xB002, 0x01);
		}
		else
		{
			SPI_RW(AIN2_OFF);
 800439c:	2038      	movs	r0, #56	; 0x38
 800439e:	f7fb ff4f 	bl	8000240 <SPI_RW>
			Status_AIN[2] = 0;
 80043a2:	4b3c      	ldr	r3, [pc, #240]	; (8004494 <Item_Selection+0x2e4>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	709a      	strb	r2, [r3, #2]
//			send_str("AIN2_OFF\n");
			//Send_WRITE_command(0xB002, 0x00);
		}
		Num_Menu = 15;
 80043a8:	4b38      	ldr	r3, [pc, #224]	; (800448c <Item_Selection+0x2dc>)
 80043aa:	220f      	movs	r2, #15
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e298      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 15)	//item: AIN3_ON/OFF
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	2b0f      	cmp	r3, #15
 80043b4:	d114      	bne.n	80043e0 <Item_Selection+0x230>
	{
		if(!Status_AIN[3])
 80043b6:	4b37      	ldr	r3, [pc, #220]	; (8004494 <Item_Selection+0x2e4>)
 80043b8:	78db      	ldrb	r3, [r3, #3]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <Item_Selection+0x21c>
		{
			SPI_RW(AIN3_ON);
 80043be:	2039      	movs	r0, #57	; 0x39
 80043c0:	f7fb ff3e 	bl	8000240 <SPI_RW>
			Status_AIN[3] = 1;
 80043c4:	4b33      	ldr	r3, [pc, #204]	; (8004494 <Item_Selection+0x2e4>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	70da      	strb	r2, [r3, #3]
 80043ca:	e005      	b.n	80043d8 <Item_Selection+0x228>
//			send_str("AIN3_ON\n");
			//Send_WRITE_command(0xB003, 0x01);
		}
		else
		{
			SPI_RW(AIN3_OFF);
 80043cc:	2040      	movs	r0, #64	; 0x40
 80043ce:	f7fb ff37 	bl	8000240 <SPI_RW>
			Status_AIN[3] = 0;
 80043d2:	4b30      	ldr	r3, [pc, #192]	; (8004494 <Item_Selection+0x2e4>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	70da      	strb	r2, [r3, #3]
//			send_str("AIN3_OFF\n");
			//Send_WRITE_command(0xB003, 0x00);
		}
		Num_Menu = 16;
 80043d8:	4b2c      	ldr	r3, [pc, #176]	; (800448c <Item_Selection+0x2dc>)
 80043da:	2210      	movs	r2, #16
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e280      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 16)	//item: AIN4_ON/OFF
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d114      	bne.n	8004410 <Item_Selection+0x260>
	{
		if(!Status_AIN[4])
 80043e6:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <Item_Selection+0x2e4>)
 80043e8:	791b      	ldrb	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <Item_Selection+0x24c>
		{
			SPI_RW(AIN4_ON);
 80043ee:	2041      	movs	r0, #65	; 0x41
 80043f0:	f7fb ff26 	bl	8000240 <SPI_RW>
			Status_AIN[4] = 1;
 80043f4:	4b27      	ldr	r3, [pc, #156]	; (8004494 <Item_Selection+0x2e4>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	711a      	strb	r2, [r3, #4]
 80043fa:	e005      	b.n	8004408 <Item_Selection+0x258>
//			send_str("AIN4_ON\n");
			//Send_WRITE_command(0xB004, 0x01);
		}
		else
		{
			SPI_RW(AIN4_OFF);
 80043fc:	2042      	movs	r0, #66	; 0x42
 80043fe:	f7fb ff1f 	bl	8000240 <SPI_RW>
			Status_AIN[4] = 0;
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <Item_Selection+0x2e4>)
 8004404:	2200      	movs	r2, #0
 8004406:	711a      	strb	r2, [r3, #4]
//			send_str("AIN4_OFF\n");
			//Send_WRITE_command(0xB004, 0x00);
		}
		Num_Menu = 17;
 8004408:	4b20      	ldr	r3, [pc, #128]	; (800448c <Item_Selection+0x2dc>)
 800440a:	2211      	movs	r2, #17
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e268      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 17)	//item: AIN5_ON/OFF
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	2b11      	cmp	r3, #17
 8004414:	d114      	bne.n	8004440 <Item_Selection+0x290>
	{
		if(!Status_AIN[5])
 8004416:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <Item_Selection+0x2e4>)
 8004418:	795b      	ldrb	r3, [r3, #5]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <Item_Selection+0x27c>
		{
			SPI_RW(AIN5_ON);
 800441e:	2043      	movs	r0, #67	; 0x43
 8004420:	f7fb ff0e 	bl	8000240 <SPI_RW>
			Status_AIN[5] = 1;
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <Item_Selection+0x2e4>)
 8004426:	2201      	movs	r2, #1
 8004428:	715a      	strb	r2, [r3, #5]
 800442a:	e005      	b.n	8004438 <Item_Selection+0x288>
//			send_str("AIN5_ON\n");
			//Send_WRITE_command(0xB005, 0x01);
		}
		else
		{
			SPI_RW(AIN5_OFF);
 800442c:	2044      	movs	r0, #68	; 0x44
 800442e:	f7fb ff07 	bl	8000240 <SPI_RW>
			Status_AIN[5] = 0;
 8004432:	4b18      	ldr	r3, [pc, #96]	; (8004494 <Item_Selection+0x2e4>)
 8004434:	2200      	movs	r2, #0
 8004436:	715a      	strb	r2, [r3, #5]
//			send_str("AIN5_OFF\n");
			//Send_WRITE_command(0xB005, 0x00);
		}
		Num_Menu = 18;
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <Item_Selection+0x2dc>)
 800443a:	2212      	movs	r2, #18
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e250      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 18)	//item: AIN6_ON/OFF
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	2b12      	cmp	r3, #18
 8004444:	d114      	bne.n	8004470 <Item_Selection+0x2c0>
	{
		if(!Status_AIN[6])
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <Item_Selection+0x2e4>)
 8004448:	799b      	ldrb	r3, [r3, #6]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <Item_Selection+0x2ac>
		{
			SPI_RW(AIN6_ON);
 800444e:	2045      	movs	r0, #69	; 0x45
 8004450:	f7fb fef6 	bl	8000240 <SPI_RW>
			Status_AIN[6] = 1;
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <Item_Selection+0x2e4>)
 8004456:	2201      	movs	r2, #1
 8004458:	719a      	strb	r2, [r3, #6]
 800445a:	e005      	b.n	8004468 <Item_Selection+0x2b8>
//			send_str("AIN6_ON\n");
			//Send_WRITE_command(0xB006, 0x01);
		}
		else
		{
			SPI_RW(AIN6_OFF);
 800445c:	2046      	movs	r0, #70	; 0x46
 800445e:	f7fb feef 	bl	8000240 <SPI_RW>
			Status_AIN[6] = 0;
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <Item_Selection+0x2e4>)
 8004464:	2200      	movs	r2, #0
 8004466:	719a      	strb	r2, [r3, #6]
//			send_str("AIN6_OFF\n");
			//Send_WRITE_command(0xB006, 0x00);
		}
		Num_Menu = 19;
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <Item_Selection+0x2dc>)
 800446a:	2213      	movs	r2, #19
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e238      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 19)	//item: AIN7_ON/OFF
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	2b13      	cmp	r3, #19
 8004474:	d11a      	bne.n	80044ac <Item_Selection+0x2fc>
	{
		if(!Status_AIN[7])
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <Item_Selection+0x2e4>)
 8004478:	79db      	ldrb	r3, [r3, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10c      	bne.n	8004498 <Item_Selection+0x2e8>
		{
			SPI_RW(AIN7_ON);
 800447e:	2047      	movs	r0, #71	; 0x47
 8004480:	f7fb fede 	bl	8000240 <SPI_RW>
			Status_AIN[7] = 1;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <Item_Selection+0x2e4>)
 8004486:	2201      	movs	r2, #1
 8004488:	71da      	strb	r2, [r3, #7]
 800448a:	e00b      	b.n	80044a4 <Item_Selection+0x2f4>
 800448c:	20000124 	.word	0x20000124
 8004490:	20000150 	.word	0x20000150
 8004494:	20000128 	.word	0x20000128
//			send_str("AIN7_ON\n");
			//Send_WRITE_command(0xB007, 0x01);
		}
		else
		{
			SPI_RW(AIN7_OFF);
 8004498:	2048      	movs	r0, #72	; 0x48
 800449a:	f7fb fed1 	bl	8000240 <SPI_RW>
			Status_AIN[7] = 0;
 800449e:	4bb2      	ldr	r3, [pc, #712]	; (8004768 <Item_Selection+0x5b8>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	71da      	strb	r2, [r3, #7]
//			send_str("AIN7_OFF\n");
			//Send_WRITE_command(0xB007, 0x00);
		}
		Num_Menu = 20;
 80044a4:	4bb1      	ldr	r3, [pc, #708]	; (800476c <Item_Selection+0x5bc>)
 80044a6:	2214      	movs	r2, #20
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e21a      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 20)	//item: DIN0_ON/OFF
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b14      	cmp	r3, #20
 80044b0:	d114      	bne.n	80044dc <Item_Selection+0x32c>
	{
		if(!Status_DIN[0])
 80044b2:	4baf      	ldr	r3, [pc, #700]	; (8004770 <Item_Selection+0x5c0>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <Item_Selection+0x318>
		{
			SPI_RW(DIN0_ON);
 80044ba:	2017      	movs	r0, #23
 80044bc:	f7fb fec0 	bl	8000240 <SPI_RW>
			Status_DIN[0] = 1;
 80044c0:	4bab      	ldr	r3, [pc, #684]	; (8004770 <Item_Selection+0x5c0>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e005      	b.n	80044d4 <Item_Selection+0x324>
//			send_str("DIN0_ON\n");
			//Send_WRITE_command(0xB008, 0x01);
		}
		else
		{
			SPI_RW(DIN0_OFF);
 80044c8:	2018      	movs	r0, #24
 80044ca:	f7fb feb9 	bl	8000240 <SPI_RW>
			Status_DIN[0] = 0;
 80044ce:	4ba8      	ldr	r3, [pc, #672]	; (8004770 <Item_Selection+0x5c0>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
//			send_str("DIN0_OFF\n");
			//Send_WRITE_command(0xB008, 0x00);
		}
		Num_Menu = 21;
 80044d4:	4ba5      	ldr	r3, [pc, #660]	; (800476c <Item_Selection+0x5bc>)
 80044d6:	2215      	movs	r2, #21
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e202      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 21)	//item: DIN1_ON/OFF
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	2b15      	cmp	r3, #21
 80044e0:	d114      	bne.n	800450c <Item_Selection+0x35c>
	{
		if(!Status_DIN[1])
 80044e2:	4ba3      	ldr	r3, [pc, #652]	; (8004770 <Item_Selection+0x5c0>)
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <Item_Selection+0x348>
		{
			SPI_RW(DIN1_ON);
 80044ea:	2019      	movs	r0, #25
 80044ec:	f7fb fea8 	bl	8000240 <SPI_RW>
			Status_DIN[1] = 1;
 80044f0:	4b9f      	ldr	r3, [pc, #636]	; (8004770 <Item_Selection+0x5c0>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	705a      	strb	r2, [r3, #1]
 80044f6:	e005      	b.n	8004504 <Item_Selection+0x354>
//			send_str("DIN1_ON\n");
			//Send_WRITE_command(0xB009, 0x01);
		}
		else
		{
			SPI_RW(DIN1_OFF);
 80044f8:	2020      	movs	r0, #32
 80044fa:	f7fb fea1 	bl	8000240 <SPI_RW>
			Status_DIN[1] = 0;
 80044fe:	4b9c      	ldr	r3, [pc, #624]	; (8004770 <Item_Selection+0x5c0>)
 8004500:	2200      	movs	r2, #0
 8004502:	705a      	strb	r2, [r3, #1]
//			send_str("DIN1_OFF\n");
			//Send_WRITE_command(0xB009, 0x00);
		}
		Num_Menu = 22;
 8004504:	4b99      	ldr	r3, [pc, #612]	; (800476c <Item_Selection+0x5bc>)
 8004506:	2216      	movs	r2, #22
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e1ea      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 22)	//item: DIN2_ON/OFF
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	2b16      	cmp	r3, #22
 8004510:	d114      	bne.n	800453c <Item_Selection+0x38c>
	{
		if(!Status_DIN[2])
 8004512:	4b97      	ldr	r3, [pc, #604]	; (8004770 <Item_Selection+0x5c0>)
 8004514:	789b      	ldrb	r3, [r3, #2]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <Item_Selection+0x378>
		{
			SPI_RW(DIN2_ON);
 800451a:	2021      	movs	r0, #33	; 0x21
 800451c:	f7fb fe90 	bl	8000240 <SPI_RW>
			Status_DIN[2] = 1;
 8004520:	4b93      	ldr	r3, [pc, #588]	; (8004770 <Item_Selection+0x5c0>)
 8004522:	2201      	movs	r2, #1
 8004524:	709a      	strb	r2, [r3, #2]
 8004526:	e005      	b.n	8004534 <Item_Selection+0x384>
//			send_str("DIN2_ON\n");
			//Send_WRITE_command(0xB00A, 0x01);
		}
		else
		{
			SPI_RW(DIN2_OFF);
 8004528:	2022      	movs	r0, #34	; 0x22
 800452a:	f7fb fe89 	bl	8000240 <SPI_RW>
			Status_DIN[2] = 0;
 800452e:	4b90      	ldr	r3, [pc, #576]	; (8004770 <Item_Selection+0x5c0>)
 8004530:	2200      	movs	r2, #0
 8004532:	709a      	strb	r2, [r3, #2]
//			send_str("DIN2_OFF\n");
			//Send_WRITE_command(0xB00A, 0x00);
		}
		Num_Menu = 23;
 8004534:	4b8d      	ldr	r3, [pc, #564]	; (800476c <Item_Selection+0x5bc>)
 8004536:	2217      	movs	r2, #23
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e1d2      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 23)	//item: DIN3_ON/OFF
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	2b17      	cmp	r3, #23
 8004540:	d114      	bne.n	800456c <Item_Selection+0x3bc>
	{
		if(!Status_DIN[3])
 8004542:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <Item_Selection+0x5c0>)
 8004544:	78db      	ldrb	r3, [r3, #3]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <Item_Selection+0x3a8>
		{
			SPI_RW(DIN3_ON);
 800454a:	2023      	movs	r0, #35	; 0x23
 800454c:	f7fb fe78 	bl	8000240 <SPI_RW>
			Status_DIN[3] = 1;
 8004550:	4b87      	ldr	r3, [pc, #540]	; (8004770 <Item_Selection+0x5c0>)
 8004552:	2201      	movs	r2, #1
 8004554:	70da      	strb	r2, [r3, #3]
 8004556:	e005      	b.n	8004564 <Item_Selection+0x3b4>
//			send_str("DIN3_ON\n");
			//Send_WRITE_command(0xB00B, 0x01);
		}
		else
		{
			SPI_RW(DIN3_OFF);
 8004558:	2024      	movs	r0, #36	; 0x24
 800455a:	f7fb fe71 	bl	8000240 <SPI_RW>
			Status_DIN[3] = 0;
 800455e:	4b84      	ldr	r3, [pc, #528]	; (8004770 <Item_Selection+0x5c0>)
 8004560:	2200      	movs	r2, #0
 8004562:	70da      	strb	r2, [r3, #3]
//			send_str("DIN3_OFF\n");
			//Send_WRITE_command(0xB00B, 0x00);
		}
		Num_Menu = 24;
 8004564:	4b81      	ldr	r3, [pc, #516]	; (800476c <Item_Selection+0x5bc>)
 8004566:	2218      	movs	r2, #24
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e1ba      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 24)	//item: DIN4_ON/OFF
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	2b18      	cmp	r3, #24
 8004570:	d114      	bne.n	800459c <Item_Selection+0x3ec>
	{
		if(!Status_DIN[4])
 8004572:	4b7f      	ldr	r3, [pc, #508]	; (8004770 <Item_Selection+0x5c0>)
 8004574:	791b      	ldrb	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <Item_Selection+0x3d8>
		{
			SPI_RW(DIN4_ON);
 800457a:	2025      	movs	r0, #37	; 0x25
 800457c:	f7fb fe60 	bl	8000240 <SPI_RW>
			Status_DIN[4] = 1;
 8004580:	4b7b      	ldr	r3, [pc, #492]	; (8004770 <Item_Selection+0x5c0>)
 8004582:	2201      	movs	r2, #1
 8004584:	711a      	strb	r2, [r3, #4]
 8004586:	e005      	b.n	8004594 <Item_Selection+0x3e4>
//			send_str("DIN4_ON\n");
			//Send_WRITE_command(0xB00C, 0x01);
		}
		else
		{
			SPI_RW(DIN4_OFF);
 8004588:	2026      	movs	r0, #38	; 0x26
 800458a:	f7fb fe59 	bl	8000240 <SPI_RW>
			Status_DIN[4] = 0;
 800458e:	4b78      	ldr	r3, [pc, #480]	; (8004770 <Item_Selection+0x5c0>)
 8004590:	2200      	movs	r2, #0
 8004592:	711a      	strb	r2, [r3, #4]
//			send_str("DIN4_OFF\n");
			//Send_WRITE_command(0xB00C, 0x00);
		}
		Num_Menu = 25;
 8004594:	4b75      	ldr	r3, [pc, #468]	; (800476c <Item_Selection+0x5bc>)
 8004596:	2219      	movs	r2, #25
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e1a2      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 25)	//item: DIN5_ON/OFF
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	2b19      	cmp	r3, #25
 80045a0:	d114      	bne.n	80045cc <Item_Selection+0x41c>
	{
		if(!Status_DIN[5])
 80045a2:	4b73      	ldr	r3, [pc, #460]	; (8004770 <Item_Selection+0x5c0>)
 80045a4:	795b      	ldrb	r3, [r3, #5]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <Item_Selection+0x408>
		{
			SPI_RW(DIN5_ON);
 80045aa:	2027      	movs	r0, #39	; 0x27
 80045ac:	f7fb fe48 	bl	8000240 <SPI_RW>
			Status_DIN[5] = 1;
 80045b0:	4b6f      	ldr	r3, [pc, #444]	; (8004770 <Item_Selection+0x5c0>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	715a      	strb	r2, [r3, #5]
 80045b6:	e005      	b.n	80045c4 <Item_Selection+0x414>
//			send_str("DIN5_ON\n");
			//Send_WRITE_command(0xB00D, 0x01);
		}
		else
		{
			SPI_RW(DIN5_OFF);
 80045b8:	2028      	movs	r0, #40	; 0x28
 80045ba:	f7fb fe41 	bl	8000240 <SPI_RW>
			Status_DIN[5] = 0;
 80045be:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <Item_Selection+0x5c0>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	715a      	strb	r2, [r3, #5]
//			send_str("DIN5_OFF\n");
			//Send_WRITE_command(0xB00D, 0x00);
		}
		Num_Menu = 26;
 80045c4:	4b69      	ldr	r3, [pc, #420]	; (800476c <Item_Selection+0x5bc>)
 80045c6:	221a      	movs	r2, #26
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e18a      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 26)	//item: DIN6_ON/OFF
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	2b1a      	cmp	r3, #26
 80045d0:	d114      	bne.n	80045fc <Item_Selection+0x44c>
	{
		if(!Status_DIN[6])
 80045d2:	4b67      	ldr	r3, [pc, #412]	; (8004770 <Item_Selection+0x5c0>)
 80045d4:	799b      	ldrb	r3, [r3, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <Item_Selection+0x438>
		{
			SPI_RW(DIN6_ON);
 80045da:	2029      	movs	r0, #41	; 0x29
 80045dc:	f7fb fe30 	bl	8000240 <SPI_RW>
			Status_DIN[6] = 1;
 80045e0:	4b63      	ldr	r3, [pc, #396]	; (8004770 <Item_Selection+0x5c0>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	719a      	strb	r2, [r3, #6]
 80045e6:	e005      	b.n	80045f4 <Item_Selection+0x444>
//			send_str("DIN6_ON\n");
			//Send_WRITE_command(0xB00E, 0x01);
		}
		else
		{
			SPI_RW(DIN6_OFF);
 80045e8:	2030      	movs	r0, #48	; 0x30
 80045ea:	f7fb fe29 	bl	8000240 <SPI_RW>
			Status_DIN[6] = 0;
 80045ee:	4b60      	ldr	r3, [pc, #384]	; (8004770 <Item_Selection+0x5c0>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	719a      	strb	r2, [r3, #6]
//			send_str("DIN6_OFF\n");
			//Send_WRITE_command(0xB00E, 0x00);
		}
		Num_Menu = 27;
 80045f4:	4b5d      	ldr	r3, [pc, #372]	; (800476c <Item_Selection+0x5bc>)
 80045f6:	221b      	movs	r2, #27
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	e172      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 27)	//item: DIN7_ON/OFF
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	2b1b      	cmp	r3, #27
 8004600:	d114      	bne.n	800462c <Item_Selection+0x47c>
	{
		if(!Status_DIN[7])
 8004602:	4b5b      	ldr	r3, [pc, #364]	; (8004770 <Item_Selection+0x5c0>)
 8004604:	79db      	ldrb	r3, [r3, #7]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <Item_Selection+0x468>
		{
			SPI_RW(DIN7_ON);
 800460a:	2031      	movs	r0, #49	; 0x31
 800460c:	f7fb fe18 	bl	8000240 <SPI_RW>
			Status_DIN[7] = 1;
 8004610:	4b57      	ldr	r3, [pc, #348]	; (8004770 <Item_Selection+0x5c0>)
 8004612:	2201      	movs	r2, #1
 8004614:	71da      	strb	r2, [r3, #7]
 8004616:	e005      	b.n	8004624 <Item_Selection+0x474>
//			send_str("DIN7_ON\n");
			//Send_WRITE_command(0xB00F, 0x01);
		}
		else
		{
			SPI_RW(DIN7_OFF);
 8004618:	2032      	movs	r0, #50	; 0x32
 800461a:	f7fb fe11 	bl	8000240 <SPI_RW>
			Status_DIN[7] = 0;
 800461e:	4b54      	ldr	r3, [pc, #336]	; (8004770 <Item_Selection+0x5c0>)
 8004620:	2200      	movs	r2, #0
 8004622:	71da      	strb	r2, [r3, #7]
//			send_str("DIN7_OFF\n");
			//Send_WRITE_command(0xB00F, 0x00);
		}
		Num_Menu = 28;
 8004624:	4b51      	ldr	r3, [pc, #324]	; (800476c <Item_Selection+0x5bc>)
 8004626:	221c      	movs	r2, #28
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e15a      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 28)	//item: PWM0_ON/OFF
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b1c      	cmp	r3, #28
 8004630:	d114      	bne.n	800465c <Item_Selection+0x4ac>
	{
		if(!Status_PWM[0])
 8004632:	4b50      	ldr	r3, [pc, #320]	; (8004774 <Item_Selection+0x5c4>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <Item_Selection+0x498>
		{
			SPI_RW(PWM0_ON);
 800463a:	2049      	movs	r0, #73	; 0x49
 800463c:	f7fb fe00 	bl	8000240 <SPI_RW>
			Status_PWM[0] = 1;
 8004640:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <Item_Selection+0x5c4>)
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e005      	b.n	8004654 <Item_Selection+0x4a4>
//			send_str("PWM0_ON\n");
			//Send_WRITE_command(0xB010, 0x01);
		}
		else
		{
			SPI_RW(PWM0_OFF);
 8004648:	2050      	movs	r0, #80	; 0x50
 800464a:	f7fb fdf9 	bl	8000240 <SPI_RW>
			Status_PWM[0] = 0;
 800464e:	4b49      	ldr	r3, [pc, #292]	; (8004774 <Item_Selection+0x5c4>)
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
//			send_str("PWM0_OFF\n");
			//Send_WRITE_command(0xB010, 0x00);
		}
		Num_Menu = 29;
 8004654:	4b45      	ldr	r3, [pc, #276]	; (800476c <Item_Selection+0x5bc>)
 8004656:	221d      	movs	r2, #29
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	e142      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 29)	//item: PWM1_ON/OFF
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	2b1d      	cmp	r3, #29
 8004660:	d114      	bne.n	800468c <Item_Selection+0x4dc>
	{
		if(!Status_PWM[1])
 8004662:	4b44      	ldr	r3, [pc, #272]	; (8004774 <Item_Selection+0x5c4>)
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <Item_Selection+0x4c8>
		{
			SPI_RW(PWM1_ON);
 800466a:	2051      	movs	r0, #81	; 0x51
 800466c:	f7fb fde8 	bl	8000240 <SPI_RW>
			Status_PWM[1] = 1;
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <Item_Selection+0x5c4>)
 8004672:	2201      	movs	r2, #1
 8004674:	705a      	strb	r2, [r3, #1]
 8004676:	e005      	b.n	8004684 <Item_Selection+0x4d4>
//			send_str("PWM1_ON\n");
			//Send_WRITE_command(0xB011, 0x01);
		}
		else
		{
			SPI_RW(PWM1_OFF);
 8004678:	2052      	movs	r0, #82	; 0x52
 800467a:	f7fb fde1 	bl	8000240 <SPI_RW>
			Status_PWM[1] = 0;
 800467e:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <Item_Selection+0x5c4>)
 8004680:	2200      	movs	r2, #0
 8004682:	705a      	strb	r2, [r3, #1]
//			send_str("PWM1_OFF\n");
			//Send_WRITE_command(0xB011, 0x00);
		}
		Num_Menu = 30;
 8004684:	4b39      	ldr	r3, [pc, #228]	; (800476c <Item_Selection+0x5bc>)
 8004686:	221e      	movs	r2, #30
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e12a      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 30)	//item: PWM2_ON/OFF
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2b1e      	cmp	r3, #30
 8004690:	d114      	bne.n	80046bc <Item_Selection+0x50c>
	{
		if(!Status_PWM[2])
 8004692:	4b38      	ldr	r3, [pc, #224]	; (8004774 <Item_Selection+0x5c4>)
 8004694:	789b      	ldrb	r3, [r3, #2]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <Item_Selection+0x4f8>
		{
			SPI_RW(PWM2_ON);
 800469a:	2053      	movs	r0, #83	; 0x53
 800469c:	f7fb fdd0 	bl	8000240 <SPI_RW>
			Status_PWM[2] = 1;
 80046a0:	4b34      	ldr	r3, [pc, #208]	; (8004774 <Item_Selection+0x5c4>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	709a      	strb	r2, [r3, #2]
 80046a6:	e005      	b.n	80046b4 <Item_Selection+0x504>
//			send_str("PWM2_ON\n");
			//Send_WRITE_command(0xB012, 0x01);
		}
		else
		{
			SPI_RW(PWM2_OFF);
 80046a8:	2054      	movs	r0, #84	; 0x54
 80046aa:	f7fb fdc9 	bl	8000240 <SPI_RW>
			Status_PWM[2] = 0;
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <Item_Selection+0x5c4>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	709a      	strb	r2, [r3, #2]
//			send_str("PWM2_OFF\n");
			//Send_WRITE_command(0xB012, 0x00);
		}
		Num_Menu = 31;
 80046b4:	4b2d      	ldr	r3, [pc, #180]	; (800476c <Item_Selection+0x5bc>)
 80046b6:	221f      	movs	r2, #31
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e112      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 31)	//item: PWM3_ON/OFF
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	2b1f      	cmp	r3, #31
 80046c0:	d114      	bne.n	80046ec <Item_Selection+0x53c>
	{
		if(!Status_PWM[3])
 80046c2:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <Item_Selection+0x5c4>)
 80046c4:	78db      	ldrb	r3, [r3, #3]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <Item_Selection+0x528>
		{
			SPI_RW(PWM3_ON);
 80046ca:	2055      	movs	r0, #85	; 0x55
 80046cc:	f7fb fdb8 	bl	8000240 <SPI_RW>
			Status_PWM[3] = 1;
 80046d0:	4b28      	ldr	r3, [pc, #160]	; (8004774 <Item_Selection+0x5c4>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	70da      	strb	r2, [r3, #3]
 80046d6:	e005      	b.n	80046e4 <Item_Selection+0x534>
//			send_str("PWM3_ON\n");
			//Send_WRITE_command(0xB013, 0x01);
		}
		else
		{
			SPI_RW(PWM3_OFF);
 80046d8:	2056      	movs	r0, #86	; 0x56
 80046da:	f7fb fdb1 	bl	8000240 <SPI_RW>
			Status_PWM[3] = 0;
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <Item_Selection+0x5c4>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	70da      	strb	r2, [r3, #3]
//			send_str("PWM3_OFF\n");
			//Send_WRITE_command(0xB013, 0x00);
		}
		Num_Menu = 32;
 80046e4:	4b21      	ldr	r3, [pc, #132]	; (800476c <Item_Selection+0x5bc>)
 80046e6:	2220      	movs	r2, #32
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e0fa      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 32)	//item: WR0_ON/OFF
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d114      	bne.n	800471c <Item_Selection+0x56c>
	{
		if(!Status_1WR[0])
 80046f2:	4b21      	ldr	r3, [pc, #132]	; (8004778 <Item_Selection+0x5c8>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <Item_Selection+0x558>
		{
			SPI_RW(WR0_ON);
 80046fa:	2057      	movs	r0, #87	; 0x57
 80046fc:	f7fb fda0 	bl	8000240 <SPI_RW>
			Status_1WR[0] = 1;
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <Item_Selection+0x5c8>)
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	e005      	b.n	8004714 <Item_Selection+0x564>
//			send_str("WR0_ON\n");
			//Send_WRITE_command(0xB014, 0x01);
		}
		else
		{
			SPI_RW(WR0_OFF);
 8004708:	2058      	movs	r0, #88	; 0x58
 800470a:	f7fb fd99 	bl	8000240 <SPI_RW>
			Status_1WR[0] = 0;
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <Item_Selection+0x5c8>)
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
//			send_str("WR0_OFF\n");
			//Send_WRITE_command(0xB014, 0x00);
		}
		Num_Menu = 33;
 8004714:	4b15      	ldr	r3, [pc, #84]	; (800476c <Item_Selection+0x5bc>)
 8004716:	2221      	movs	r2, #33	; 0x21
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e0e2      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 33)	//item: WR1_ON/OFF
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	2b21      	cmp	r3, #33	; 0x21
 8004720:	d114      	bne.n	800474c <Item_Selection+0x59c>
	{
		if(!Status_1WR[1])
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <Item_Selection+0x5c8>)
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <Item_Selection+0x588>
		{
			SPI_RW(WR1_ON);
 800472a:	2059      	movs	r0, #89	; 0x59
 800472c:	f7fb fd88 	bl	8000240 <SPI_RW>
			Status_1WR[1] = 1;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <Item_Selection+0x5c8>)
 8004732:	2201      	movs	r2, #1
 8004734:	705a      	strb	r2, [r3, #1]
 8004736:	e005      	b.n	8004744 <Item_Selection+0x594>
//			send_str("WR1_ON\n");
			//Send_WRITE_command(0xB015, 0x01);
		}
		else
		{
			SPI_RW(WR1_OFF);
 8004738:	2060      	movs	r0, #96	; 0x60
 800473a:	f7fb fd81 	bl	8000240 <SPI_RW>
			Status_1WR[1] = 0;
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <Item_Selection+0x5c8>)
 8004740:	2200      	movs	r2, #0
 8004742:	705a      	strb	r2, [r3, #1]
//			send_str("WR1_OFF\n");
			//Send_WRITE_command(0xB015, 0x00);
		}
		Num_Menu = 34;
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <Item_Selection+0x5bc>)
 8004746:	2222      	movs	r2, #34	; 0x22
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e0ca      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 34)	//item: OC0_ON/OFF
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	2b22      	cmp	r3, #34	; 0x22
 8004750:	d120      	bne.n	8004794 <Item_Selection+0x5e4>
	{
		if(!Status_OCD[0])
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <Item_Selection+0x5cc>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d112      	bne.n	8004780 <Item_Selection+0x5d0>
		{
			SPI_RW(OC0_ON);
 800475a:	2001      	movs	r0, #1
 800475c:	f7fb fd70 	bl	8000240 <SPI_RW>
			Status_OCD[0] = 1;
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <Item_Selection+0x5cc>)
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e011      	b.n	800478c <Item_Selection+0x5dc>
 8004768:	20000128 	.word	0x20000128
 800476c:	20000124 	.word	0x20000124
 8004770:	20000130 	.word	0x20000130
 8004774:	20000138 	.word	0x20000138
 8004778:	20000148 	.word	0x20000148
 800477c:	20000140 	.word	0x20000140
//			send_str("OC0_ON\n");
			//Send_WRITE_command(0xB016, 0x01);
		}
		else
		{
			SPI_RW(OC0_OFF);
 8004780:	2002      	movs	r0, #2
 8004782:	f7fb fd5d 	bl	8000240 <SPI_RW>
			Status_OCD[0] = 0;
 8004786:	4b5a      	ldr	r3, [pc, #360]	; (80048f0 <Item_Selection+0x740>)
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
//			send_str("OC0_OFF\n");
			//Send_WRITE_command(0xB016, 0x00);
		}
		Num_Menu = 35;
 800478c:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <Item_Selection+0x744>)
 800478e:	2223      	movs	r2, #35	; 0x23
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	e0a6      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 35)	//item: OC1_ON/OFF
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	2b23      	cmp	r3, #35	; 0x23
 8004798:	d114      	bne.n	80047c4 <Item_Selection+0x614>
	{
		if(!Status_OCD[1])
 800479a:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <Item_Selection+0x740>)
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <Item_Selection+0x600>
		{
			SPI_RW(OC1_ON);
 80047a2:	2003      	movs	r0, #3
 80047a4:	f7fb fd4c 	bl	8000240 <SPI_RW>
			Status_OCD[1] = 1;
 80047a8:	4b51      	ldr	r3, [pc, #324]	; (80048f0 <Item_Selection+0x740>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	705a      	strb	r2, [r3, #1]
 80047ae:	e005      	b.n	80047bc <Item_Selection+0x60c>
//			send_str("OC1_ON\n");
			//Send_WRITE_command(0xB017, 0x01);
		}
		else
		{
			SPI_RW(OC1_OFF);
 80047b0:	2004      	movs	r0, #4
 80047b2:	f7fb fd45 	bl	8000240 <SPI_RW>
			Status_OCD[1] = 0;
 80047b6:	4b4e      	ldr	r3, [pc, #312]	; (80048f0 <Item_Selection+0x740>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	705a      	strb	r2, [r3, #1]
//			send_str("OC1_OFF\n");
			//Send_WRITE_command(0xB017, 0x00);
		}
		Num_Menu = 36;
 80047bc:	4b4d      	ldr	r3, [pc, #308]	; (80048f4 <Item_Selection+0x744>)
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e08e      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 36)	//item: OC2_ON/OFF
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	2b24      	cmp	r3, #36	; 0x24
 80047c8:	d114      	bne.n	80047f4 <Item_Selection+0x644>
	{
		if(!Status_OCD[2])
 80047ca:	4b49      	ldr	r3, [pc, #292]	; (80048f0 <Item_Selection+0x740>)
 80047cc:	789b      	ldrb	r3, [r3, #2]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <Item_Selection+0x630>
		{
			SPI_RW(OC2_ON);
 80047d2:	2005      	movs	r0, #5
 80047d4:	f7fb fd34 	bl	8000240 <SPI_RW>
			Status_OCD[2] = 1;
 80047d8:	4b45      	ldr	r3, [pc, #276]	; (80048f0 <Item_Selection+0x740>)
 80047da:	2201      	movs	r2, #1
 80047dc:	709a      	strb	r2, [r3, #2]
 80047de:	e005      	b.n	80047ec <Item_Selection+0x63c>
//			send_str("OC2_ON\n");
			//Send_WRITE_command(0xB018, 0x01);
		}
		else
		{
			SPI_RW(OC2_OFF);
 80047e0:	2006      	movs	r0, #6
 80047e2:	f7fb fd2d 	bl	8000240 <SPI_RW>
			Status_OCD[2] = 0;
 80047e6:	4b42      	ldr	r3, [pc, #264]	; (80048f0 <Item_Selection+0x740>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	709a      	strb	r2, [r3, #2]
//			send_str("OC2_OFF\n");
			//Send_WRITE_command(0xB018, 0x00);
		}
		Num_Menu = 37;
 80047ec:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <Item_Selection+0x744>)
 80047ee:	2225      	movs	r2, #37	; 0x25
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e076      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 37)	//item: OC3_ON/OFF
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	2b25      	cmp	r3, #37	; 0x25
 80047f8:	d114      	bne.n	8004824 <Item_Selection+0x674>
	{
		if(!Status_OCD[3])
 80047fa:	4b3d      	ldr	r3, [pc, #244]	; (80048f0 <Item_Selection+0x740>)
 80047fc:	78db      	ldrb	r3, [r3, #3]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <Item_Selection+0x660>
		{
			SPI_RW(OC3_ON);
 8004802:	2007      	movs	r0, #7
 8004804:	f7fb fd1c 	bl	8000240 <SPI_RW>
			Status_OCD[3] = 1;
 8004808:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <Item_Selection+0x740>)
 800480a:	2201      	movs	r2, #1
 800480c:	70da      	strb	r2, [r3, #3]
 800480e:	e005      	b.n	800481c <Item_Selection+0x66c>
//			send_str("OC3_ON\n");
			//Send_WRITE_command(0xB019, 0x01);
		}
		else
		{
			SPI_RW(OC3_OFF);
 8004810:	2008      	movs	r0, #8
 8004812:	f7fb fd15 	bl	8000240 <SPI_RW>
			Status_OCD[3] = 0;
 8004816:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <Item_Selection+0x740>)
 8004818:	2200      	movs	r2, #0
 800481a:	70da      	strb	r2, [r3, #3]
//			send_str("OC3_OFF\n");
			//Send_WRITE_command(0xB019, 0x00);
		}
		Num_Menu = 38;
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <Item_Selection+0x744>)
 800481e:	2226      	movs	r2, #38	; 0x26
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e05e      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 38)	//item: OC4_ON/OFF
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	2b26      	cmp	r3, #38	; 0x26
 8004828:	d114      	bne.n	8004854 <Item_Selection+0x6a4>
	{
		if(!Status_OCD[4])
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <Item_Selection+0x740>)
 800482c:	791b      	ldrb	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <Item_Selection+0x690>
		{
			SPI_RW(OC4_ON);
 8004832:	2009      	movs	r0, #9
 8004834:	f7fb fd04 	bl	8000240 <SPI_RW>
			Status_OCD[4] = 1;
 8004838:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <Item_Selection+0x740>)
 800483a:	2201      	movs	r2, #1
 800483c:	711a      	strb	r2, [r3, #4]
 800483e:	e005      	b.n	800484c <Item_Selection+0x69c>
//			send_str("OC4_ON\n");
			//Send_WRITE_command(0xB01A, 0x01);
		}
		else
		{
			SPI_RW(OC4_OFF);
 8004840:	2010      	movs	r0, #16
 8004842:	f7fb fcfd 	bl	8000240 <SPI_RW>
			Status_OCD[4] = 0;
 8004846:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <Item_Selection+0x740>)
 8004848:	2200      	movs	r2, #0
 800484a:	711a      	strb	r2, [r3, #4]
//			send_str("OC4_OFF\n");
			//Send_WRITE_command(0xB01A, 0x00);
		}
		Num_Menu = 39;
 800484c:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <Item_Selection+0x744>)
 800484e:	2227      	movs	r2, #39	; 0x27
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e046      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 39)	//item: OC5_ON/OFF
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b27      	cmp	r3, #39	; 0x27
 8004858:	d114      	bne.n	8004884 <Item_Selection+0x6d4>
	{
		if(!Status_OCD[5])
 800485a:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <Item_Selection+0x740>)
 800485c:	795b      	ldrb	r3, [r3, #5]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <Item_Selection+0x6c0>
		{
			SPI_RW(OC5_ON);
 8004862:	2011      	movs	r0, #17
 8004864:	f7fb fcec 	bl	8000240 <SPI_RW>
			Status_OCD[5] = 1;
 8004868:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <Item_Selection+0x740>)
 800486a:	2201      	movs	r2, #1
 800486c:	715a      	strb	r2, [r3, #5]
 800486e:	e005      	b.n	800487c <Item_Selection+0x6cc>
//			send_str("OC5_ON\n");
			//Send_WRITE_command(0xB01B, 0x01);
		}
		else
		{
			SPI_RW(OC5_OFF);
 8004870:	2012      	movs	r0, #18
 8004872:	f7fb fce5 	bl	8000240 <SPI_RW>
			Status_OCD[5] = 0;
 8004876:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <Item_Selection+0x740>)
 8004878:	2200      	movs	r2, #0
 800487a:	715a      	strb	r2, [r3, #5]
//			send_str("OC5_OFF\n");
			//Send_WRITE_command(0xB01B, 0x00);
		}
		Num_Menu = 40;
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <Item_Selection+0x744>)
 800487e:	2228      	movs	r2, #40	; 0x28
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e02e      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 40)	//item: OC6_ON/OFF
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b28      	cmp	r3, #40	; 0x28
 8004888:	d114      	bne.n	80048b4 <Item_Selection+0x704>
	{
		if(!Status_OCD[6])
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <Item_Selection+0x740>)
 800488c:	799b      	ldrb	r3, [r3, #6]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <Item_Selection+0x6f0>
		{
			SPI_RW(OC6_ON);
 8004892:	2013      	movs	r0, #19
 8004894:	f7fb fcd4 	bl	8000240 <SPI_RW>
			Status_OCD[6] = 1;
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <Item_Selection+0x740>)
 800489a:	2201      	movs	r2, #1
 800489c:	719a      	strb	r2, [r3, #6]
 800489e:	e005      	b.n	80048ac <Item_Selection+0x6fc>
//			send_str("OC6_ON\n");
			//Send_WRITE_command(0xB01C, 0x01);
		}
		else
		{
			SPI_RW(OC6_OFF);
 80048a0:	2014      	movs	r0, #20
 80048a2:	f7fb fccd 	bl	8000240 <SPI_RW>
			Status_OCD[6] = 0;
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <Item_Selection+0x740>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	719a      	strb	r2, [r3, #6]
//			send_str("OC6_OFF\n");
			//Send_WRITE_command(0xB01C, 0x00);
		}
		Num_Menu = 41;
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <Item_Selection+0x744>)
 80048ae:	2229      	movs	r2, #41	; 0x29
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e016      	b.n	80048e2 <Item_Selection+0x732>
	}
	else if(choice == 41)	//item: OC7_ON/OFF
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	2b29      	cmp	r3, #41	; 0x29
 80048b8:	d113      	bne.n	80048e2 <Item_Selection+0x732>
	{
		if(!Status_OCD[7])
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <Item_Selection+0x740>)
 80048bc:	79db      	ldrb	r3, [r3, #7]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <Item_Selection+0x720>
		{
			SPI_RW(OC7_ON);
 80048c2:	2015      	movs	r0, #21
 80048c4:	f7fb fcbc 	bl	8000240 <SPI_RW>
			Status_OCD[7] = 1;
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <Item_Selection+0x740>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	71da      	strb	r2, [r3, #7]
 80048ce:	e005      	b.n	80048dc <Item_Selection+0x72c>
//			send_str("OC7_ON\n");
			//Send_WRITE_command(0xB01D, 0x01);
		}
		else
		{
			SPI_RW(OC7_OFF);
 80048d0:	2016      	movs	r0, #22
 80048d2:	f7fb fcb5 	bl	8000240 <SPI_RW>
			Status_OCD[7] = 0;
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <Item_Selection+0x740>)
 80048d8:	2200      	movs	r2, #0
 80048da:	71da      	strb	r2, [r3, #7]
//			send_str("OC7_OFF\n");
			//Send_WRITE_command(0xB01D, 0x00);
		}
		Num_Menu = 42;
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <Item_Selection+0x744>)
 80048de:	222a      	movs	r2, #42	; 0x2a
 80048e0:	701a      	strb	r2, [r3, #0]
	}

	return Num_Menu;
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <Item_Selection+0x744>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000140 	.word	0x20000140
 80048f4:	20000124 	.word	0x20000124

080048f8 <Menu_Output>:
	HAL_Delay(time);
	return Check;
}
//Функция отрисовки подменю: "Выводы базового блока"
void Menu_Output(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 80048fe:	2000      	movs	r0, #0
 8004900:	f002 fa8e 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(42, 0, "OUTPUTS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8004904:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <Menu_Output+0xc8>)
 8004906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800490a:	9202      	str	r2, [sp, #8]
 800490c:	221f      	movs	r2, #31
 800490e:	9201      	str	r2, [sp, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	9200      	str	r2, [sp, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2b      	ldr	r2, [pc, #172]	; (80049c4 <Menu_Output+0xcc>)
 8004918:	2100      	movs	r1, #0
 800491a:	202a      	movs	r0, #42	; 0x2a
 800491c:	f002 f99c 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 30, "- ANALOG", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <Menu_Output+0xc8>)
 8004922:	2200      	movs	r2, #0
 8004924:	9202      	str	r2, [sp, #8]
 8004926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800492a:	9201      	str	r2, [sp, #4]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	9200      	str	r2, [sp, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <Menu_Output+0xd0>)
 8004934:	211e      	movs	r1, #30
 8004936:	2000      	movs	r0, #0
 8004938:	f002 f98e 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 48, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <Menu_Output+0xc8>)
 800493e:	2200      	movs	r2, #0
 8004940:	9202      	str	r2, [sp, #8]
 8004942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004946:	9201      	str	r2, [sp, #4]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	9200      	str	r2, [sp, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1f      	ldr	r2, [pc, #124]	; (80049cc <Menu_Output+0xd4>)
 8004950:	2130      	movs	r1, #48	; 0x30
 8004952:	2000      	movs	r0, #0
 8004954:	f002 f980 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 66, "- OPEN DRAIN", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <Menu_Output+0xc8>)
 800495a:	2200      	movs	r2, #0
 800495c:	9202      	str	r2, [sp, #8]
 800495e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004962:	9201      	str	r2, [sp, #4]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	9200      	str	r2, [sp, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <Menu_Output+0xd8>)
 800496c:	2142      	movs	r1, #66	; 0x42
 800496e:	2000      	movs	r0, #0
 8004970:	f002 f972 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 84, "- 1-WIRE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <Menu_Output+0xc8>)
 8004976:	2200      	movs	r2, #0
 8004978:	9202      	str	r2, [sp, #8]
 800497a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800497e:	9201      	str	r2, [sp, #4]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	9200      	str	r2, [sp, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <Menu_Output+0xdc>)
 8004988:	2154      	movs	r1, #84	; 0x54
 800498a:	2000      	movs	r0, #0
 800498c:	f002 f964 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 102, "- PWM", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <Menu_Output+0xc8>)
 8004992:	2200      	movs	r2, #0
 8004994:	9202      	str	r2, [sp, #8]
 8004996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800499a:	9201      	str	r2, [sp, #4]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	9200      	str	r2, [sp, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a0d      	ldr	r2, [pc, #52]	; (80049d8 <Menu_Output+0xe0>)
 80049a4:	2166      	movs	r1, #102	; 0x66
 80049a6:	2000      	movs	r0, #0
 80049a8:	f002 f956 	bl	8006c58 <ST7735_DrawString>
	cnt1 = 1;
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <Menu_Output+0xe4>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
	cnt2 = 1;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <Menu_Output+0xe8>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	701a      	strb	r2, [r3, #0]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000008 	.word	0x20000008
 80049c4:	0800be2c 	.word	0x0800be2c
 80049c8:	0800be34 	.word	0x0800be34
 80049cc:	0800be40 	.word	0x0800be40
 80049d0:	0800be4c 	.word	0x0800be4c
 80049d4:	0800be5c 	.word	0x0800be5c
 80049d8:	0800be68 	.word	0x0800be68
 80049dc:	2000001a 	.word	0x2000001a
 80049e0:	2000001b 	.word	0x2000001b

080049e4 <Menu_Blocks>:
//Функция отрисовки подменю: "Подключенные блоки"
void Menu_Blocks(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 80049ea:	2000      	movs	r0, #0
 80049ec:	f002 fa18 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(48, 0, "BLOCKS", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80049f0:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <Menu_Blocks+0xac>)
 80049f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f6:	9202      	str	r2, [sp, #8]
 80049f8:	221f      	movs	r2, #31
 80049fa:	9201      	str	r2, [sp, #4]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	9200      	str	r2, [sp, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <Menu_Blocks+0xb0>)
 8004a04:	2100      	movs	r1, #0
 8004a06:	2030      	movs	r0, #48	; 0x30
 8004a08:	f002 f926 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 36, "- RELAY", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8004a0c:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <Menu_Blocks+0xac>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	9202      	str	r2, [sp, #8]
 8004a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a16:	9201      	str	r2, [sp, #4]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	9200      	str	r2, [sp, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <Menu_Blocks+0xb4>)
 8004a20:	2124      	movs	r1, #36	; 0x24
 8004a22:	2000      	movs	r0, #0
 8004a24:	f002 f918 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 54, "- DIGITAL", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <Menu_Blocks+0xac>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	9202      	str	r2, [sp, #8]
 8004a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a32:	9201      	str	r2, [sp, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	9200      	str	r2, [sp, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <Menu_Blocks+0xb8>)
 8004a3c:	2136      	movs	r1, #54	; 0x36
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f002 f90a 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 72, "- DIMMING", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8004a44:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <Menu_Blocks+0xac>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	9202      	str	r2, [sp, #8]
 8004a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a4e:	9201      	str	r2, [sp, #4]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	9200      	str	r2, [sp, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <Menu_Blocks+0xbc>)
 8004a58:	2148      	movs	r1, #72	; 0x48
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f002 f8fc 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 90, "- INTERFACE", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <Menu_Blocks+0xac>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	9202      	str	r2, [sp, #8]
 8004a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a6a:	9201      	str	r2, [sp, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	9200      	str	r2, [sp, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a0c      	ldr	r2, [pc, #48]	; (8004aa4 <Menu_Blocks+0xc0>)
 8004a74:	215a      	movs	r1, #90	; 0x5a
 8004a76:	2000      	movs	r0, #0
 8004a78:	f002 f8ee 	bl	8006c58 <ST7735_DrawString>
	cnt1 = 1;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <Menu_Blocks+0xc4>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
	cnt2 = 1;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <Menu_Blocks+0xc8>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000008 	.word	0x20000008
 8004a94:	0800be24 	.word	0x0800be24
 8004a98:	0800be70 	.word	0x0800be70
 8004a9c:	0800be40 	.word	0x0800be40
 8004aa0:	0800be78 	.word	0x0800be78
 8004aa4:	0800be84 	.word	0x0800be84
 8004aa8:	2000001a 	.word	0x2000001a
 8004aac:	2000001b 	.word	0x2000001b

08004ab0 <Str_Time>:
//Функция отрисовки меню: "Главное меню"
void Str_Time(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af04      	add	r7, sp, #16
    HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	4921      	ldr	r1, [pc, #132]	; (8004b40 <Str_Time+0x90>)
 8004aba:	4822      	ldr	r0, [pc, #136]	; (8004b44 <Str_Time+0x94>)
 8004abc:	f004 fd30 	bl	8009520 <HAL_RTC_GetDate>
    snprintf(trans_str, 63, "%.02d-%.02d-20%d", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8004ac0:	4b1f      	ldr	r3, [pc, #124]	; (8004b40 <Str_Time+0x90>)
 8004ac2:	789b      	ldrb	r3, [r3, #2]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <Str_Time+0x90>)
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	461a      	mov	r2, r3
 8004acc:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <Str_Time+0x90>)
 8004ace:	78db      	ldrb	r3, [r3, #3]
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	9200      	str	r2, [sp, #0]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <Str_Time+0x98>)
 8004ad8:	213f      	movs	r1, #63	; 0x3f
 8004ada:	481c      	ldr	r0, [pc, #112]	; (8004b4c <Str_Time+0x9c>)
 8004adc:	f006 fcf4 	bl	800b4c8 <sniprintf>
	//----------------------Date-----------------------
	ST7735_DrawString(2, 120, trans_str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <Str_Time+0xa0>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	9202      	str	r2, [sp, #8]
 8004ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aea:	9201      	str	r2, [sp, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	9200      	str	r2, [sp, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <Str_Time+0x9c>)
 8004af4:	2178      	movs	r1, #120	; 0x78
 8004af6:	2002      	movs	r0, #2
 8004af8:	f002 f8ae 	bl	8006c58 <ST7735_DrawString>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8004afc:	2200      	movs	r2, #0
 8004afe:	4915      	ldr	r1, [pc, #84]	; (8004b54 <Str_Time+0xa4>)
 8004b00:	4810      	ldr	r0, [pc, #64]	; (8004b44 <Str_Time+0x94>)
 8004b02:	f004 fb7f 	bl	8009204 <HAL_RTC_GetTime>
    snprintf(trans_str, 63, "%.02d:%.02d", sTime.Hours, sTime.Minutes);
 8004b06:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <Str_Time+0xa4>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <Str_Time+0xa4>)
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	4a10      	ldr	r2, [pc, #64]	; (8004b58 <Str_Time+0xa8>)
 8004b16:	213f      	movs	r1, #63	; 0x3f
 8004b18:	480c      	ldr	r0, [pc, #48]	; (8004b4c <Str_Time+0x9c>)
 8004b1a:	f006 fcd5 	bl	800b4c8 <sniprintf>
	//----------------------Time-----------------------
    ST7735_DrawString(123, 120, trans_str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <Str_Time+0xa0>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	9202      	str	r2, [sp, #8]
 8004b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b28:	9201      	str	r2, [sp, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	9200      	str	r2, [sp, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a06      	ldr	r2, [pc, #24]	; (8004b4c <Str_Time+0x9c>)
 8004b32:	2178      	movs	r1, #120	; 0x78
 8004b34:	207b      	movs	r0, #123	; 0x7b
 8004b36:	f002 f88f 	bl	8006c58 <ST7735_DrawString>
}
 8004b3a:	bf00      	nop
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	200000d8 	.word	0x200000d8
 8004b44:	20000194 	.word	0x20000194
 8004b48:	0800bfa8 	.word	0x0800bfa8
 8004b4c:	200000dc 	.word	0x200000dc
 8004b50:	20000000 	.word	0x20000000
 8004b54:	200000d4 	.word	0x200000d4
 8004b58:	0800bfbc 	.word	0x0800bfbc

08004b5c <Menu_Main>:
//Функция отрисовки меню: "Главное меню"
void Menu_Main(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f002 f95c 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(3, 0, "DEV", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8004b68:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <Menu_Main+0x114>)
 8004b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6e:	9202      	str	r2, [sp, #8]
 8004b70:	221f      	movs	r2, #31
 8004b72:	9201      	str	r2, [sp, #4]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	9200      	str	r2, [sp, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3e      	ldr	r2, [pc, #248]	; (8004c74 <Menu_Main+0x118>)
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2003      	movs	r0, #3
 8004b80:	f002 f86a 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(36, 0, "ELECTRONICS", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8004b84:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <Menu_Main+0x114>)
 8004b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b8a:	9202      	str	r2, [sp, #8]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	9201      	str	r2, [sp, #4]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	9200      	str	r2, [sp, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <Menu_Main+0x11c>)
 8004b98:	2100      	movs	r1, #0
 8004b9a:	2024      	movs	r0, #36	; 0x24
 8004b9c:	f002 f85c 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(30, 36, "OUTPUT", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8004ba0:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <Menu_Main+0x120>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	9202      	str	r2, [sp, #8]
 8004ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004baa:	9201      	str	r2, [sp, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	9200      	str	r2, [sp, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a33      	ldr	r2, [pc, #204]	; (8004c80 <Menu_Main+0x124>)
 8004bb4:	2124      	movs	r1, #36	; 0x24
 8004bb6:	201e      	movs	r0, #30
 8004bb8:	f002 f84e 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(30, 75, "BLOCKS", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <Menu_Main+0x120>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	9202      	str	r2, [sp, #8]
 8004bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bc6:	9201      	str	r2, [sp, #4]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	9200      	str	r2, [sp, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <Menu_Main+0x128>)
 8004bd0:	214b      	movs	r1, #75	; 0x4b
 8004bd2:	201e      	movs	r0, #30
 8004bd4:	f002 f840 	bl	8006c58 <ST7735_DrawString>

    HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8004bd8:	2200      	movs	r2, #0
 8004bda:	492b      	ldr	r1, [pc, #172]	; (8004c88 <Menu_Main+0x12c>)
 8004bdc:	482b      	ldr	r0, [pc, #172]	; (8004c8c <Menu_Main+0x130>)
 8004bde:	f004 fc9f 	bl	8009520 <HAL_RTC_GetDate>
    snprintf(trans_str, 63, "%.02d-%.02d-20%d", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8004be2:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <Menu_Main+0x12c>)
 8004be4:	789b      	ldrb	r3, [r3, #2]
 8004be6:	4619      	mov	r1, r3
 8004be8:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <Menu_Main+0x12c>)
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b26      	ldr	r3, [pc, #152]	; (8004c88 <Menu_Main+0x12c>)
 8004bf0:	78db      	ldrb	r3, [r3, #3]
 8004bf2:	9301      	str	r3, [sp, #4]
 8004bf4:	9200      	str	r2, [sp, #0]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <Menu_Main+0x134>)
 8004bfa:	213f      	movs	r1, #63	; 0x3f
 8004bfc:	4825      	ldr	r0, [pc, #148]	; (8004c94 <Menu_Main+0x138>)
 8004bfe:	f006 fc63 	bl	800b4c8 <sniprintf>
	//----------------------Date-----------------------
	ST7735_DrawString(2, 120, trans_str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004c02:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <Menu_Main+0x13c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	9202      	str	r2, [sp, #8]
 8004c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c0c:	9201      	str	r2, [sp, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	9200      	str	r2, [sp, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <Menu_Main+0x138>)
 8004c16:	2178      	movs	r1, #120	; 0x78
 8004c18:	2002      	movs	r0, #2
 8004c1a:	f002 f81d 	bl	8006c58 <ST7735_DrawString>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8004c1e:	2200      	movs	r2, #0
 8004c20:	491e      	ldr	r1, [pc, #120]	; (8004c9c <Menu_Main+0x140>)
 8004c22:	481a      	ldr	r0, [pc, #104]	; (8004c8c <Menu_Main+0x130>)
 8004c24:	f004 faee 	bl	8009204 <HAL_RTC_GetTime>
    snprintf(trans_str, 63, "%.02d:%.02d", sTime.Hours, sTime.Minutes);
 8004c28:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <Menu_Main+0x140>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <Menu_Main+0x140>)
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <Menu_Main+0x144>)
 8004c38:	213f      	movs	r1, #63	; 0x3f
 8004c3a:	4816      	ldr	r0, [pc, #88]	; (8004c94 <Menu_Main+0x138>)
 8004c3c:	f006 fc44 	bl	800b4c8 <sniprintf>
	//----------------------Time-----------------------
    ST7735_DrawString(123, 120, trans_str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004c40:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <Menu_Main+0x13c>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	9202      	str	r2, [sp, #8]
 8004c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c4a:	9201      	str	r2, [sp, #4]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	9200      	str	r2, [sp, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <Menu_Main+0x138>)
 8004c54:	2178      	movs	r1, #120	; 0x78
 8004c56:	207b      	movs	r0, #123	; 0x7b
 8004c58:	f001 fffe 	bl	8006c58 <ST7735_DrawString>
	//---------------------Version---------------------
	//ST7735_DrawString(94, 120, "Ver:1.0.0", Font_7x10, ST7735_WHITE, ST7735_BLACK);

	cnt1 = 1;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <Menu_Main+0x148>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
	cnt2 = 1;
 8004c62:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <Menu_Main+0x14c>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
//				}
//			}
//		CSM_H;
//		start_device = 0;
//	}
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000008 	.word	0x20000008
 8004c74:	0800be0c 	.word	0x0800be0c
 8004c78:	0800be10 	.word	0x0800be10
 8004c7c:	20000010 	.word	0x20000010
 8004c80:	0800be1c 	.word	0x0800be1c
 8004c84:	0800be24 	.word	0x0800be24
 8004c88:	200000d8 	.word	0x200000d8
 8004c8c:	20000194 	.word	0x20000194
 8004c90:	0800bfa8 	.word	0x0800bfa8
 8004c94:	200000dc 	.word	0x200000dc
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	200000d4 	.word	0x200000d4
 8004ca0:	0800bfbc 	.word	0x0800bfbc
 8004ca4:	2000001a 	.word	0x2000001a
 8004ca8:	2000001b 	.word	0x2000001b

08004cac <Menu_Analog>:
//Функция отрисовки подменю: "Аналоговые входы"
void Menu_Analog(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f002 f8b4 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(48, 0, "ANALOG", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8004cb8:	4b96      	ldr	r3, [pc, #600]	; (8004f14 <Menu_Analog+0x268>)
 8004cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cbe:	9202      	str	r2, [sp, #8]
 8004cc0:	221f      	movs	r2, #31
 8004cc2:	9201      	str	r2, [sp, #4]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	9200      	str	r2, [sp, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a93      	ldr	r2, [pc, #588]	; (8004f18 <Menu_Analog+0x26c>)
 8004ccc:	2100      	movs	r1, #0
 8004cce:	2030      	movs	r0, #48	; 0x30
 8004cd0:	f001 ffc2 	bl	8006c58 <ST7735_DrawString>

	//Отправка запроса на данные на аналоговых входах

	ST7735_DrawString(0, 30, "- AIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004cd4:	4b91      	ldr	r3, [pc, #580]	; (8004f1c <Menu_Analog+0x270>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	9202      	str	r2, [sp, #8]
 8004cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cde:	9201      	str	r2, [sp, #4]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	9200      	str	r2, [sp, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a8e      	ldr	r2, [pc, #568]	; (8004f20 <Menu_Analog+0x274>)
 8004ce8:	211e      	movs	r1, #30
 8004cea:	2000      	movs	r0, #0
 8004cec:	f001 ffb4 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[0] == 0x01)
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <Menu_Analog+0x278>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d10e      	bne.n	8004d16 <Menu_Analog+0x6a>
		ST7735_DrawString(120, 30, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8004cf8:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <Menu_Analog+0x270>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	9202      	str	r2, [sp, #8]
 8004cfe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004d02:	9201      	str	r2, [sp, #4]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	9200      	str	r2, [sp, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a87      	ldr	r2, [pc, #540]	; (8004f28 <Menu_Analog+0x27c>)
 8004d0c:	211e      	movs	r1, #30
 8004d0e:	2078      	movs	r0, #120	; 0x78
 8004d10:	f001 ffa2 	bl	8006c58 <ST7735_DrawString>
 8004d14:	e011      	b.n	8004d3a <Menu_Analog+0x8e>
	else if(Status_AIN[0] == 0x00)
 8004d16:	4b83      	ldr	r3, [pc, #524]	; (8004f24 <Menu_Analog+0x278>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10d      	bne.n	8004d3a <Menu_Analog+0x8e>
		ST7735_DrawString(120, 30, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8004d1e:	4b7f      	ldr	r3, [pc, #508]	; (8004f1c <Menu_Analog+0x270>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	9202      	str	r2, [sp, #8]
 8004d24:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d28:	9201      	str	r2, [sp, #4]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	9200      	str	r2, [sp, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a7e      	ldr	r2, [pc, #504]	; (8004f2c <Menu_Analog+0x280>)
 8004d32:	211e      	movs	r1, #30
 8004d34:	2078      	movs	r0, #120	; 0x78
 8004d36:	f001 ff8f 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 40, "- AIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004d3a:	4b78      	ldr	r3, [pc, #480]	; (8004f1c <Menu_Analog+0x270>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	9202      	str	r2, [sp, #8]
 8004d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d44:	9201      	str	r2, [sp, #4]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	9200      	str	r2, [sp, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a78      	ldr	r2, [pc, #480]	; (8004f30 <Menu_Analog+0x284>)
 8004d4e:	2128      	movs	r1, #40	; 0x28
 8004d50:	2000      	movs	r0, #0
 8004d52:	f001 ff81 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[1] == 0x01)
 8004d56:	4b73      	ldr	r3, [pc, #460]	; (8004f24 <Menu_Analog+0x278>)
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10e      	bne.n	8004d7c <Menu_Analog+0xd0>
		ST7735_DrawString(120, 40, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8004d5e:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <Menu_Analog+0x270>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	9202      	str	r2, [sp, #8]
 8004d64:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004d68:	9201      	str	r2, [sp, #4]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	9200      	str	r2, [sp, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a6d      	ldr	r2, [pc, #436]	; (8004f28 <Menu_Analog+0x27c>)
 8004d72:	2128      	movs	r1, #40	; 0x28
 8004d74:	2078      	movs	r0, #120	; 0x78
 8004d76:	f001 ff6f 	bl	8006c58 <ST7735_DrawString>
 8004d7a:	e011      	b.n	8004da0 <Menu_Analog+0xf4>
	else if(Status_AIN[1] == 0x00)
 8004d7c:	4b69      	ldr	r3, [pc, #420]	; (8004f24 <Menu_Analog+0x278>)
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <Menu_Analog+0xf4>
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8004d84:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <Menu_Analog+0x270>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	9202      	str	r2, [sp, #8]
 8004d8a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d8e:	9201      	str	r2, [sp, #4]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	9200      	str	r2, [sp, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a65      	ldr	r2, [pc, #404]	; (8004f2c <Menu_Analog+0x280>)
 8004d98:	2128      	movs	r1, #40	; 0x28
 8004d9a:	2078      	movs	r0, #120	; 0x78
 8004d9c:	f001 ff5c 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 50, "- AIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004da0:	4b5e      	ldr	r3, [pc, #376]	; (8004f1c <Menu_Analog+0x270>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	9202      	str	r2, [sp, #8]
 8004da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004daa:	9201      	str	r2, [sp, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	9200      	str	r2, [sp, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a60      	ldr	r2, [pc, #384]	; (8004f34 <Menu_Analog+0x288>)
 8004db4:	2132      	movs	r1, #50	; 0x32
 8004db6:	2000      	movs	r0, #0
 8004db8:	f001 ff4e 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[2] == 0x01)
 8004dbc:	4b59      	ldr	r3, [pc, #356]	; (8004f24 <Menu_Analog+0x278>)
 8004dbe:	789b      	ldrb	r3, [r3, #2]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d10e      	bne.n	8004de2 <Menu_Analog+0x136>
		ST7735_DrawString(120, 50, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8004dc4:	4b55      	ldr	r3, [pc, #340]	; (8004f1c <Menu_Analog+0x270>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	9202      	str	r2, [sp, #8]
 8004dca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004dce:	9201      	str	r2, [sp, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	9200      	str	r2, [sp, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a54      	ldr	r2, [pc, #336]	; (8004f28 <Menu_Analog+0x27c>)
 8004dd8:	2132      	movs	r1, #50	; 0x32
 8004dda:	2078      	movs	r0, #120	; 0x78
 8004ddc:	f001 ff3c 	bl	8006c58 <ST7735_DrawString>
 8004de0:	e011      	b.n	8004e06 <Menu_Analog+0x15a>
	else if(Status_AIN[2] == 0x00)
 8004de2:	4b50      	ldr	r3, [pc, #320]	; (8004f24 <Menu_Analog+0x278>)
 8004de4:	789b      	ldrb	r3, [r3, #2]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10d      	bne.n	8004e06 <Menu_Analog+0x15a>
		ST7735_DrawString(120, 50, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8004dea:	4b4c      	ldr	r3, [pc, #304]	; (8004f1c <Menu_Analog+0x270>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	9202      	str	r2, [sp, #8]
 8004df0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004df4:	9201      	str	r2, [sp, #4]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	9200      	str	r2, [sp, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a4b      	ldr	r2, [pc, #300]	; (8004f2c <Menu_Analog+0x280>)
 8004dfe:	2132      	movs	r1, #50	; 0x32
 8004e00:	2078      	movs	r0, #120	; 0x78
 8004e02:	f001 ff29 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 60, "- AIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004e06:	4b45      	ldr	r3, [pc, #276]	; (8004f1c <Menu_Analog+0x270>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	9202      	str	r2, [sp, #8]
 8004e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e10:	9201      	str	r2, [sp, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	9200      	str	r2, [sp, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a47      	ldr	r2, [pc, #284]	; (8004f38 <Menu_Analog+0x28c>)
 8004e1a:	213c      	movs	r1, #60	; 0x3c
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f001 ff1b 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[3] == 0x01)
 8004e22:	4b40      	ldr	r3, [pc, #256]	; (8004f24 <Menu_Analog+0x278>)
 8004e24:	78db      	ldrb	r3, [r3, #3]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10e      	bne.n	8004e48 <Menu_Analog+0x19c>
		ST7735_DrawString(120, 60, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8004e2a:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <Menu_Analog+0x270>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	9202      	str	r2, [sp, #8]
 8004e30:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004e34:	9201      	str	r2, [sp, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	9200      	str	r2, [sp, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3a      	ldr	r2, [pc, #232]	; (8004f28 <Menu_Analog+0x27c>)
 8004e3e:	213c      	movs	r1, #60	; 0x3c
 8004e40:	2078      	movs	r0, #120	; 0x78
 8004e42:	f001 ff09 	bl	8006c58 <ST7735_DrawString>
 8004e46:	e011      	b.n	8004e6c <Menu_Analog+0x1c0>
	else if(Status_AIN[3] == 0x00)
 8004e48:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <Menu_Analog+0x278>)
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10d      	bne.n	8004e6c <Menu_Analog+0x1c0>
		ST7735_DrawString(120, 60, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8004e50:	4b32      	ldr	r3, [pc, #200]	; (8004f1c <Menu_Analog+0x270>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	9202      	str	r2, [sp, #8]
 8004e56:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004e5a:	9201      	str	r2, [sp, #4]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	9200      	str	r2, [sp, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a32      	ldr	r2, [pc, #200]	; (8004f2c <Menu_Analog+0x280>)
 8004e64:	213c      	movs	r1, #60	; 0x3c
 8004e66:	2078      	movs	r0, #120	; 0x78
 8004e68:	f001 fef6 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 70, "- AIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <Menu_Analog+0x270>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	9202      	str	r2, [sp, #8]
 8004e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e76:	9201      	str	r2, [sp, #4]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	9200      	str	r2, [sp, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2f      	ldr	r2, [pc, #188]	; (8004f3c <Menu_Analog+0x290>)
 8004e80:	2146      	movs	r1, #70	; 0x46
 8004e82:	2000      	movs	r0, #0
 8004e84:	f001 fee8 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[4] == 0x01)
 8004e88:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <Menu_Analog+0x278>)
 8004e8a:	791b      	ldrb	r3, [r3, #4]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d10e      	bne.n	8004eae <Menu_Analog+0x202>
		ST7735_DrawString(120, 70, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8004e90:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <Menu_Analog+0x270>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	9202      	str	r2, [sp, #8]
 8004e96:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004e9a:	9201      	str	r2, [sp, #4]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	9200      	str	r2, [sp, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a21      	ldr	r2, [pc, #132]	; (8004f28 <Menu_Analog+0x27c>)
 8004ea4:	2146      	movs	r1, #70	; 0x46
 8004ea6:	2078      	movs	r0, #120	; 0x78
 8004ea8:	f001 fed6 	bl	8006c58 <ST7735_DrawString>
 8004eac:	e011      	b.n	8004ed2 <Menu_Analog+0x226>
	else if(Status_AIN[4] == 0x00)
 8004eae:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <Menu_Analog+0x278>)
 8004eb0:	791b      	ldrb	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10d      	bne.n	8004ed2 <Menu_Analog+0x226>
		ST7735_DrawString(120, 70, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <Menu_Analog+0x270>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	9202      	str	r2, [sp, #8]
 8004ebc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004ec0:	9201      	str	r2, [sp, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	9200      	str	r2, [sp, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <Menu_Analog+0x280>)
 8004eca:	2146      	movs	r1, #70	; 0x46
 8004ecc:	2078      	movs	r0, #120	; 0x78
 8004ece:	f001 fec3 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 80, "- AIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <Menu_Analog+0x270>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	9202      	str	r2, [sp, #8]
 8004ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004edc:	9201      	str	r2, [sp, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	9200      	str	r2, [sp, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <Menu_Analog+0x294>)
 8004ee6:	2150      	movs	r1, #80	; 0x50
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f001 feb5 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[5] == 0x01)
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <Menu_Analog+0x278>)
 8004ef0:	795b      	ldrb	r3, [r3, #5]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d126      	bne.n	8004f44 <Menu_Analog+0x298>
		ST7735_DrawString(120, 80, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <Menu_Analog+0x270>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	9202      	str	r2, [sp, #8]
 8004efc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004f00:	9201      	str	r2, [sp, #4]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	9200      	str	r2, [sp, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a07      	ldr	r2, [pc, #28]	; (8004f28 <Menu_Analog+0x27c>)
 8004f0a:	2150      	movs	r1, #80	; 0x50
 8004f0c:	2078      	movs	r0, #120	; 0x78
 8004f0e:	f001 fea3 	bl	8006c58 <ST7735_DrawString>
 8004f12:	e029      	b.n	8004f68 <Menu_Analog+0x2bc>
 8004f14:	20000008 	.word	0x20000008
 8004f18:	0800be90 	.word	0x0800be90
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	0800be98 	.word	0x0800be98
 8004f24:	20000128 	.word	0x20000128
 8004f28:	0800bfc8 	.word	0x0800bfc8
 8004f2c:	0800bfcc 	.word	0x0800bfcc
 8004f30:	0800bea0 	.word	0x0800bea0
 8004f34:	0800bea8 	.word	0x0800bea8
 8004f38:	0800beb0 	.word	0x0800beb0
 8004f3c:	0800beb8 	.word	0x0800beb8
 8004f40:	0800bec0 	.word	0x0800bec0
	else if(Status_AIN[5] == 0x00)
 8004f44:	4b40      	ldr	r3, [pc, #256]	; (8005048 <Menu_Analog+0x39c>)
 8004f46:	795b      	ldrb	r3, [r3, #5]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10d      	bne.n	8004f68 <Menu_Analog+0x2bc>
		ST7735_DrawString(120, 80, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8004f4c:	4b3f      	ldr	r3, [pc, #252]	; (800504c <Menu_Analog+0x3a0>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	9202      	str	r2, [sp, #8]
 8004f52:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004f56:	9201      	str	r2, [sp, #4]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	9200      	str	r2, [sp, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a3c      	ldr	r2, [pc, #240]	; (8005050 <Menu_Analog+0x3a4>)
 8004f60:	2150      	movs	r1, #80	; 0x50
 8004f62:	2078      	movs	r0, #120	; 0x78
 8004f64:	f001 fe78 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 90, "- AIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <Menu_Analog+0x3a0>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	9202      	str	r2, [sp, #8]
 8004f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f72:	9201      	str	r2, [sp, #4]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	9200      	str	r2, [sp, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a36      	ldr	r2, [pc, #216]	; (8005054 <Menu_Analog+0x3a8>)
 8004f7c:	215a      	movs	r1, #90	; 0x5a
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f001 fe6a 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[6] == 0x01)
 8004f84:	4b30      	ldr	r3, [pc, #192]	; (8005048 <Menu_Analog+0x39c>)
 8004f86:	799b      	ldrb	r3, [r3, #6]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d10e      	bne.n	8004faa <Menu_Analog+0x2fe>
		ST7735_DrawString(120, 90, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8004f8c:	4b2f      	ldr	r3, [pc, #188]	; (800504c <Menu_Analog+0x3a0>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	9202      	str	r2, [sp, #8]
 8004f92:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004f96:	9201      	str	r2, [sp, #4]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	9200      	str	r2, [sp, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2e      	ldr	r2, [pc, #184]	; (8005058 <Menu_Analog+0x3ac>)
 8004fa0:	215a      	movs	r1, #90	; 0x5a
 8004fa2:	2078      	movs	r0, #120	; 0x78
 8004fa4:	f001 fe58 	bl	8006c58 <ST7735_DrawString>
 8004fa8:	e011      	b.n	8004fce <Menu_Analog+0x322>
	else if(Status_AIN[6] == 0x00)
 8004faa:	4b27      	ldr	r3, [pc, #156]	; (8005048 <Menu_Analog+0x39c>)
 8004fac:	799b      	ldrb	r3, [r3, #6]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <Menu_Analog+0x322>
		ST7735_DrawString(120, 90, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8004fb2:	4b26      	ldr	r3, [pc, #152]	; (800504c <Menu_Analog+0x3a0>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	9202      	str	r2, [sp, #8]
 8004fb8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004fbc:	9201      	str	r2, [sp, #4]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	9200      	str	r2, [sp, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <Menu_Analog+0x3a4>)
 8004fc6:	215a      	movs	r1, #90	; 0x5a
 8004fc8:	2078      	movs	r0, #120	; 0x78
 8004fca:	f001 fe45 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 100, "- AIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004fce:	4b1f      	ldr	r3, [pc, #124]	; (800504c <Menu_Analog+0x3a0>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	9202      	str	r2, [sp, #8]
 8004fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fd8:	9201      	str	r2, [sp, #4]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	9200      	str	r2, [sp, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	; (800505c <Menu_Analog+0x3b0>)
 8004fe2:	2164      	movs	r1, #100	; 0x64
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f001 fe37 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[7] == 0x01)
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <Menu_Analog+0x39c>)
 8004fec:	79db      	ldrb	r3, [r3, #7]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10e      	bne.n	8005010 <Menu_Analog+0x364>
		ST7735_DrawString(120, 100, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <Menu_Analog+0x3a0>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	9202      	str	r2, [sp, #8]
 8004ff8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004ffc:	9201      	str	r2, [sp, #4]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	9200      	str	r2, [sp, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a14      	ldr	r2, [pc, #80]	; (8005058 <Menu_Analog+0x3ac>)
 8005006:	2164      	movs	r1, #100	; 0x64
 8005008:	2078      	movs	r0, #120	; 0x78
 800500a:	f001 fe25 	bl	8006c58 <ST7735_DrawString>
 800500e:	e011      	b.n	8005034 <Menu_Analog+0x388>
	else if(Status_AIN[7] == 0x00)
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <Menu_Analog+0x39c>)
 8005012:	79db      	ldrb	r3, [r3, #7]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10d      	bne.n	8005034 <Menu_Analog+0x388>
		ST7735_DrawString(120, 100, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <Menu_Analog+0x3a0>)
 800501a:	2200      	movs	r2, #0
 800501c:	9202      	str	r2, [sp, #8]
 800501e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005022:	9201      	str	r2, [sp, #4]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	9200      	str	r2, [sp, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a09      	ldr	r2, [pc, #36]	; (8005050 <Menu_Analog+0x3a4>)
 800502c:	2164      	movs	r1, #100	; 0x64
 800502e:	2078      	movs	r0, #120	; 0x78
 8005030:	f001 fe12 	bl	8006c58 <ST7735_DrawString>
	cnt1 = 1;
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <Menu_Analog+0x3b4>)
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]
	cnt2 = 1;
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <Menu_Analog+0x3b8>)
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000128 	.word	0x20000128
 800504c:	20000000 	.word	0x20000000
 8005050:	0800bfcc 	.word	0x0800bfcc
 8005054:	0800bec8 	.word	0x0800bec8
 8005058:	0800bfc8 	.word	0x0800bfc8
 800505c:	0800bed0 	.word	0x0800bed0
 8005060:	2000001a 	.word	0x2000001a
 8005064:	2000001b 	.word	0x2000001b

08005068 <Menu_Digital>:
//Функция отрисовки подменю: "Цифровые входы"
void Menu_Digital(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b094      	sub	sp, #80	; 0x50
 800506c:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 800506e:	2000      	movs	r0, #0
 8005070:	f001 fed6 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005074:	4b96      	ldr	r3, [pc, #600]	; (80052d0 <Menu_Digital+0x268>)
 8005076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800507a:	9202      	str	r2, [sp, #8]
 800507c:	221f      	movs	r2, #31
 800507e:	9201      	str	r2, [sp, #4]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	9200      	str	r2, [sp, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a93      	ldr	r2, [pc, #588]	; (80052d4 <Menu_Digital+0x26c>)
 8005088:	2100      	movs	r1, #0
 800508a:	202a      	movs	r0, #42	; 0x2a
 800508c:	f001 fde4 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 30, "- DIN0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005090:	4b91      	ldr	r3, [pc, #580]	; (80052d8 <Menu_Digital+0x270>)
 8005092:	2200      	movs	r2, #0
 8005094:	9202      	str	r2, [sp, #8]
 8005096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800509a:	9201      	str	r2, [sp, #4]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	9200      	str	r2, [sp, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a8e      	ldr	r2, [pc, #568]	; (80052dc <Menu_Digital+0x274>)
 80050a4:	211e      	movs	r1, #30
 80050a6:	2000      	movs	r0, #0
 80050a8:	f001 fdd6 	bl	8006c58 <ST7735_DrawString>
	if(Status_DIN[0] == 0x01)
 80050ac:	4b8c      	ldr	r3, [pc, #560]	; (80052e0 <Menu_Digital+0x278>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10a      	bne.n	80050ca <Menu_Digital+0x62>
	{
		uint16_t a = 29, b = 37;
 80050b4:	231d      	movs	r3, #29
 80050b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80050b8:	2325      	movs	r3, #37	; 0x25
 80050ba:	873b      	strh	r3, [r7, #56]	; 0x38
		Rising(a, b);
 80050bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80050be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fb f90e 	bl	80002e4 <Rising>
 80050c8:	e00d      	b.n	80050e6 <Menu_Digital+0x7e>
	}
	else if(Status_DIN[0] == 0x00)
 80050ca:	4b85      	ldr	r3, [pc, #532]	; (80052e0 <Menu_Digital+0x278>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <Menu_Digital+0x7e>
	{
		uint16_t a = 29, b = 37;
 80050d2:	231d      	movs	r3, #29
 80050d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80050d6:	2325      	movs	r3, #37	; 0x25
 80050d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		Faling(b, a);
 80050da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80050dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050de:	4611      	mov	r1, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fb f94a 	bl	800037a <Faling>
	}
	ST7735_DrawString(0, 40, "- DIN1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80050e6:	4b7c      	ldr	r3, [pc, #496]	; (80052d8 <Menu_Digital+0x270>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	9202      	str	r2, [sp, #8]
 80050ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050f0:	9201      	str	r2, [sp, #4]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	9200      	str	r2, [sp, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a7a      	ldr	r2, [pc, #488]	; (80052e4 <Menu_Digital+0x27c>)
 80050fa:	2128      	movs	r1, #40	; 0x28
 80050fc:	2000      	movs	r0, #0
 80050fe:	f001 fdab 	bl	8006c58 <ST7735_DrawString>
	if(Status_DIN[1] == 0x01)
 8005102:	4b77      	ldr	r3, [pc, #476]	; (80052e0 <Menu_Digital+0x278>)
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d10a      	bne.n	8005120 <Menu_Digital+0xb8>
	{
		uint16_t a = 39, b = 47;
 800510a:	2327      	movs	r3, #39	; 0x27
 800510c:	867b      	strh	r3, [r7, #50]	; 0x32
 800510e:	232f      	movs	r3, #47	; 0x2f
 8005110:	863b      	strh	r3, [r7, #48]	; 0x30
		Rising(a, b);
 8005112:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005114:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb f8e3 	bl	80002e4 <Rising>
 800511e:	e00d      	b.n	800513c <Menu_Digital+0xd4>
	}
	else if(Status_DIN[1] == 0x00)
 8005120:	4b6f      	ldr	r3, [pc, #444]	; (80052e0 <Menu_Digital+0x278>)
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <Menu_Digital+0xd4>
	{
		uint16_t a = 39, b = 47;
 8005128:	2327      	movs	r3, #39	; 0x27
 800512a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800512c:	232f      	movs	r3, #47	; 0x2f
 800512e:	86bb      	strh	r3, [r7, #52]	; 0x34
		Faling(b, a);
 8005130:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005132:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f7fb f91f 	bl	800037a <Faling>
	}
	ST7735_DrawString(0, 50, "- DIN2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800513c:	4b66      	ldr	r3, [pc, #408]	; (80052d8 <Menu_Digital+0x270>)
 800513e:	2200      	movs	r2, #0
 8005140:	9202      	str	r2, [sp, #8]
 8005142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005146:	9201      	str	r2, [sp, #4]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	9200      	str	r2, [sp, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a66      	ldr	r2, [pc, #408]	; (80052e8 <Menu_Digital+0x280>)
 8005150:	2132      	movs	r1, #50	; 0x32
 8005152:	2000      	movs	r0, #0
 8005154:	f001 fd80 	bl	8006c58 <ST7735_DrawString>
	if(Status_DIN[2] == 0x01)
 8005158:	4b61      	ldr	r3, [pc, #388]	; (80052e0 <Menu_Digital+0x278>)
 800515a:	789b      	ldrb	r3, [r3, #2]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10a      	bne.n	8005176 <Menu_Digital+0x10e>
	{
		uint16_t a = 49, b = 57;
 8005160:	2331      	movs	r3, #49	; 0x31
 8005162:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005164:	2339      	movs	r3, #57	; 0x39
 8005166:	853b      	strh	r3, [r7, #40]	; 0x28
		Rising(a, b);
 8005168:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800516a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb f8b8 	bl	80002e4 <Rising>
 8005174:	e00d      	b.n	8005192 <Menu_Digital+0x12a>
	}
	else if(Status_DIN[2] == 0x00)
 8005176:	4b5a      	ldr	r3, [pc, #360]	; (80052e0 <Menu_Digital+0x278>)
 8005178:	789b      	ldrb	r3, [r3, #2]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <Menu_Digital+0x12a>
	{
		uint16_t a = 49, b = 57;
 800517e:	2331      	movs	r3, #49	; 0x31
 8005180:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005182:	2339      	movs	r3, #57	; 0x39
 8005184:	85bb      	strh	r3, [r7, #44]	; 0x2c
		Faling(b, a);
 8005186:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005188:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f7fb f8f4 	bl	800037a <Faling>
	}
	ST7735_DrawString(0, 60, "- DIN3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005192:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <Menu_Digital+0x270>)
 8005194:	2200      	movs	r2, #0
 8005196:	9202      	str	r2, [sp, #8]
 8005198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800519c:	9201      	str	r2, [sp, #4]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	9200      	str	r2, [sp, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a51      	ldr	r2, [pc, #324]	; (80052ec <Menu_Digital+0x284>)
 80051a6:	213c      	movs	r1, #60	; 0x3c
 80051a8:	2000      	movs	r0, #0
 80051aa:	f001 fd55 	bl	8006c58 <ST7735_DrawString>
	if(Status_DIN[3] == 0x01)
 80051ae:	4b4c      	ldr	r3, [pc, #304]	; (80052e0 <Menu_Digital+0x278>)
 80051b0:	78db      	ldrb	r3, [r3, #3]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d10a      	bne.n	80051cc <Menu_Digital+0x164>
	{
		uint16_t a = 59, b = 67;
 80051b6:	233b      	movs	r3, #59	; 0x3b
 80051b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80051ba:	2343      	movs	r3, #67	; 0x43
 80051bc:	843b      	strh	r3, [r7, #32]
		Rising(a, b);
 80051be:	8c3a      	ldrh	r2, [r7, #32]
 80051c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fb f88d 	bl	80002e4 <Rising>
 80051ca:	e00d      	b.n	80051e8 <Menu_Digital+0x180>
	}
	else if(Status_DIN[3] == 0x00)
 80051cc:	4b44      	ldr	r3, [pc, #272]	; (80052e0 <Menu_Digital+0x278>)
 80051ce:	78db      	ldrb	r3, [r3, #3]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <Menu_Digital+0x180>
	{
		uint16_t a = 59, b = 67;
 80051d4:	233b      	movs	r3, #59	; 0x3b
 80051d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80051d8:	2343      	movs	r3, #67	; 0x43
 80051da:	84bb      	strh	r3, [r7, #36]	; 0x24
		Faling(b, a);
 80051dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb f8c9 	bl	800037a <Faling>
	}
	ST7735_DrawString(0, 70, "- DIN4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80051e8:	4b3b      	ldr	r3, [pc, #236]	; (80052d8 <Menu_Digital+0x270>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	9202      	str	r2, [sp, #8]
 80051ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051f2:	9201      	str	r2, [sp, #4]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	9200      	str	r2, [sp, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a3d      	ldr	r2, [pc, #244]	; (80052f0 <Menu_Digital+0x288>)
 80051fc:	2146      	movs	r1, #70	; 0x46
 80051fe:	2000      	movs	r0, #0
 8005200:	f001 fd2a 	bl	8006c58 <ST7735_DrawString>
	if(Status_DIN[4] == 0x01)
 8005204:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <Menu_Digital+0x278>)
 8005206:	791b      	ldrb	r3, [r3, #4]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d10a      	bne.n	8005222 <Menu_Digital+0x1ba>
	{
		uint16_t a = 69, b = 77;
 800520c:	2345      	movs	r3, #69	; 0x45
 800520e:	837b      	strh	r3, [r7, #26]
 8005210:	234d      	movs	r3, #77	; 0x4d
 8005212:	833b      	strh	r3, [r7, #24]
		Rising(a, b);
 8005214:	8b3a      	ldrh	r2, [r7, #24]
 8005216:	8b7b      	ldrh	r3, [r7, #26]
 8005218:	4611      	mov	r1, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f7fb f862 	bl	80002e4 <Rising>
 8005220:	e00d      	b.n	800523e <Menu_Digital+0x1d6>
	}
	else if(Status_DIN[4] == 0x00)
 8005222:	4b2f      	ldr	r3, [pc, #188]	; (80052e0 <Menu_Digital+0x278>)
 8005224:	791b      	ldrb	r3, [r3, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <Menu_Digital+0x1d6>
	{
		uint16_t a = 69, b = 77;
 800522a:	2345      	movs	r3, #69	; 0x45
 800522c:	83fb      	strh	r3, [r7, #30]
 800522e:	234d      	movs	r3, #77	; 0x4d
 8005230:	83bb      	strh	r3, [r7, #28]
		Faling(b, a);
 8005232:	8bfa      	ldrh	r2, [r7, #30]
 8005234:	8bbb      	ldrh	r3, [r7, #28]
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f7fb f89e 	bl	800037a <Faling>
	}
	ST7735_DrawString(0, 80, "- DIN5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800523e:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <Menu_Digital+0x270>)
 8005240:	2200      	movs	r2, #0
 8005242:	9202      	str	r2, [sp, #8]
 8005244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005248:	9201      	str	r2, [sp, #4]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	9200      	str	r2, [sp, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a28      	ldr	r2, [pc, #160]	; (80052f4 <Menu_Digital+0x28c>)
 8005252:	2150      	movs	r1, #80	; 0x50
 8005254:	2000      	movs	r0, #0
 8005256:	f001 fcff 	bl	8006c58 <ST7735_DrawString>
	if(Status_DIN[5] == 0x01)
 800525a:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <Menu_Digital+0x278>)
 800525c:	795b      	ldrb	r3, [r3, #5]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10a      	bne.n	8005278 <Menu_Digital+0x210>
	{
		uint16_t a = 79, b = 87;
 8005262:	234f      	movs	r3, #79	; 0x4f
 8005264:	827b      	strh	r3, [r7, #18]
 8005266:	2357      	movs	r3, #87	; 0x57
 8005268:	823b      	strh	r3, [r7, #16]
		Rising(a, b);
 800526a:	8a3a      	ldrh	r2, [r7, #16]
 800526c:	8a7b      	ldrh	r3, [r7, #18]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f7fb f837 	bl	80002e4 <Rising>
 8005276:	e00d      	b.n	8005294 <Menu_Digital+0x22c>
	}
	else if(Status_DIN[5] == 0x00)
 8005278:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <Menu_Digital+0x278>)
 800527a:	795b      	ldrb	r3, [r3, #5]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <Menu_Digital+0x22c>
	{
		uint16_t a = 79, b = 87;
 8005280:	234f      	movs	r3, #79	; 0x4f
 8005282:	82fb      	strh	r3, [r7, #22]
 8005284:	2357      	movs	r3, #87	; 0x57
 8005286:	82bb      	strh	r3, [r7, #20]
		Faling(b, a);
 8005288:	8afa      	ldrh	r2, [r7, #22]
 800528a:	8abb      	ldrh	r3, [r7, #20]
 800528c:	4611      	mov	r1, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f7fb f873 	bl	800037a <Faling>
	}
	ST7735_DrawString(0, 90, "- DIN6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <Menu_Digital+0x270>)
 8005296:	2200      	movs	r2, #0
 8005298:	9202      	str	r2, [sp, #8]
 800529a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800529e:	9201      	str	r2, [sp, #4]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	9200      	str	r2, [sp, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <Menu_Digital+0x290>)
 80052a8:	215a      	movs	r1, #90	; 0x5a
 80052aa:	2000      	movs	r0, #0
 80052ac:	f001 fcd4 	bl	8006c58 <ST7735_DrawString>
	if(Status_DIN[6] == 0x01)
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <Menu_Digital+0x278>)
 80052b2:	799b      	ldrb	r3, [r3, #6]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d121      	bne.n	80052fc <Menu_Digital+0x294>
	{
		uint16_t a = 89, b = 97;
 80052b8:	2359      	movs	r3, #89	; 0x59
 80052ba:	817b      	strh	r3, [r7, #10]
 80052bc:	2361      	movs	r3, #97	; 0x61
 80052be:	813b      	strh	r3, [r7, #8]
		Rising(a, b);
 80052c0:	893a      	ldrh	r2, [r7, #8]
 80052c2:	897b      	ldrh	r3, [r7, #10]
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fb f80c 	bl	80002e4 <Rising>
 80052cc:	e024      	b.n	8005318 <Menu_Digital+0x2b0>
 80052ce:	bf00      	nop
 80052d0:	20000008 	.word	0x20000008
 80052d4:	0800bed8 	.word	0x0800bed8
 80052d8:	20000000 	.word	0x20000000
 80052dc:	0800bee0 	.word	0x0800bee0
 80052e0:	20000130 	.word	0x20000130
 80052e4:	0800bee8 	.word	0x0800bee8
 80052e8:	0800bef0 	.word	0x0800bef0
 80052ec:	0800bef8 	.word	0x0800bef8
 80052f0:	0800bf00 	.word	0x0800bf00
 80052f4:	0800bf08 	.word	0x0800bf08
 80052f8:	0800bf10 	.word	0x0800bf10
	}
	else if(Status_DIN[6] == 0x00)
 80052fc:	4b21      	ldr	r3, [pc, #132]	; (8005384 <Menu_Digital+0x31c>)
 80052fe:	799b      	ldrb	r3, [r3, #6]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <Menu_Digital+0x2b0>
	{
		uint16_t a = 89, b = 97;
 8005304:	2359      	movs	r3, #89	; 0x59
 8005306:	81fb      	strh	r3, [r7, #14]
 8005308:	2361      	movs	r3, #97	; 0x61
 800530a:	81bb      	strh	r3, [r7, #12]
		Faling(b, a);
 800530c:	89fa      	ldrh	r2, [r7, #14]
 800530e:	89bb      	ldrh	r3, [r7, #12]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f7fb f831 	bl	800037a <Faling>
	}
	ST7735_DrawString(0, 100, "- DIN7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <Menu_Digital+0x320>)
 800531a:	2200      	movs	r2, #0
 800531c:	9202      	str	r2, [sp, #8]
 800531e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005322:	9201      	str	r2, [sp, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	9200      	str	r2, [sp, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a18      	ldr	r2, [pc, #96]	; (800538c <Menu_Digital+0x324>)
 800532c:	2164      	movs	r1, #100	; 0x64
 800532e:	2000      	movs	r0, #0
 8005330:	f001 fc92 	bl	8006c58 <ST7735_DrawString>
	if(Status_DIN[7] == 0x01)
 8005334:	4b13      	ldr	r3, [pc, #76]	; (8005384 <Menu_Digital+0x31c>)
 8005336:	79db      	ldrb	r3, [r3, #7]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10a      	bne.n	8005352 <Menu_Digital+0x2ea>
	{
		uint16_t a = 99, b = 107;
 800533c:	2363      	movs	r3, #99	; 0x63
 800533e:	807b      	strh	r3, [r7, #2]
 8005340:	236b      	movs	r3, #107	; 0x6b
 8005342:	803b      	strh	r3, [r7, #0]
		Rising(a, b);
 8005344:	883a      	ldrh	r2, [r7, #0]
 8005346:	887b      	ldrh	r3, [r7, #2]
 8005348:	4611      	mov	r1, r2
 800534a:	4618      	mov	r0, r3
 800534c:	f7fa ffca 	bl	80002e4 <Rising>
 8005350:	e00d      	b.n	800536e <Menu_Digital+0x306>
	}
	else if(Status_DIN[7] == 0x00)
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <Menu_Digital+0x31c>)
 8005354:	79db      	ldrb	r3, [r3, #7]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <Menu_Digital+0x306>
	{
		uint16_t a = 99, b = 107;
 800535a:	2363      	movs	r3, #99	; 0x63
 800535c:	80fb      	strh	r3, [r7, #6]
 800535e:	236b      	movs	r3, #107	; 0x6b
 8005360:	80bb      	strh	r3, [r7, #4]
		Faling(b, a);
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	88bb      	ldrh	r3, [r7, #4]
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f7fb f806 	bl	800037a <Faling>
	}
	cnt1 = 1;
 800536e:	4b08      	ldr	r3, [pc, #32]	; (8005390 <Menu_Digital+0x328>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
	cnt2 = 1;
 8005374:	4b07      	ldr	r3, [pc, #28]	; (8005394 <Menu_Digital+0x32c>)
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
}
 800537a:	bf00      	nop
 800537c:	3740      	adds	r7, #64	; 0x40
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000130 	.word	0x20000130
 8005388:	20000000 	.word	0x20000000
 800538c:	0800bf18 	.word	0x0800bf18
 8005390:	2000001a 	.word	0x2000001a
 8005394:	2000001b 	.word	0x2000001b

08005398 <Menu_OpenDrain>:
//Функция отрисовки подменю: "Открытый коллектор"
void Menu_OpenDrain(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 800539e:	2000      	movs	r0, #0
 80053a0:	f001 fd3e 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(24, 0, "OPEN DRAIN", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 80053a4:	4b96      	ldr	r3, [pc, #600]	; (8005600 <Menu_OpenDrain+0x268>)
 80053a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053aa:	9202      	str	r2, [sp, #8]
 80053ac:	221f      	movs	r2, #31
 80053ae:	9201      	str	r2, [sp, #4]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	9200      	str	r2, [sp, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a93      	ldr	r2, [pc, #588]	; (8005604 <Menu_OpenDrain+0x26c>)
 80053b8:	2100      	movs	r1, #0
 80053ba:	2018      	movs	r0, #24
 80053bc:	f001 fc4c 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 30, "- OC0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80053c0:	4b91      	ldr	r3, [pc, #580]	; (8005608 <Menu_OpenDrain+0x270>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	9202      	str	r2, [sp, #8]
 80053c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ca:	9201      	str	r2, [sp, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	9200      	str	r2, [sp, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a8e      	ldr	r2, [pc, #568]	; (800560c <Menu_OpenDrain+0x274>)
 80053d4:	211e      	movs	r1, #30
 80053d6:	2000      	movs	r0, #0
 80053d8:	f001 fc3e 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[0] == 0x01)
 80053dc:	4b8c      	ldr	r3, [pc, #560]	; (8005610 <Menu_OpenDrain+0x278>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10e      	bne.n	8005402 <Menu_OpenDrain+0x6a>
		ST7735_DrawString(120, 30, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80053e4:	4b88      	ldr	r3, [pc, #544]	; (8005608 <Menu_OpenDrain+0x270>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	9202      	str	r2, [sp, #8]
 80053ea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80053ee:	9201      	str	r2, [sp, #4]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	9200      	str	r2, [sp, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a87      	ldr	r2, [pc, #540]	; (8005614 <Menu_OpenDrain+0x27c>)
 80053f8:	211e      	movs	r1, #30
 80053fa:	2078      	movs	r0, #120	; 0x78
 80053fc:	f001 fc2c 	bl	8006c58 <ST7735_DrawString>
 8005400:	e011      	b.n	8005426 <Menu_OpenDrain+0x8e>
	else if(Status_OCD[0] == 0x00)
 8005402:	4b83      	ldr	r3, [pc, #524]	; (8005610 <Menu_OpenDrain+0x278>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <Menu_OpenDrain+0x8e>
		ST7735_DrawString(120, 30, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 800540a:	4b7f      	ldr	r3, [pc, #508]	; (8005608 <Menu_OpenDrain+0x270>)
 800540c:	2200      	movs	r2, #0
 800540e:	9202      	str	r2, [sp, #8]
 8005410:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005414:	9201      	str	r2, [sp, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	9200      	str	r2, [sp, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a7e      	ldr	r2, [pc, #504]	; (8005618 <Menu_OpenDrain+0x280>)
 800541e:	211e      	movs	r1, #30
 8005420:	2078      	movs	r0, #120	; 0x78
 8005422:	f001 fc19 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 40, "- OC1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005426:	4b78      	ldr	r3, [pc, #480]	; (8005608 <Menu_OpenDrain+0x270>)
 8005428:	2200      	movs	r2, #0
 800542a:	9202      	str	r2, [sp, #8]
 800542c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005430:	9201      	str	r2, [sp, #4]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	9200      	str	r2, [sp, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a78      	ldr	r2, [pc, #480]	; (800561c <Menu_OpenDrain+0x284>)
 800543a:	2128      	movs	r1, #40	; 0x28
 800543c:	2000      	movs	r0, #0
 800543e:	f001 fc0b 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[1] == 0x01)
 8005442:	4b73      	ldr	r3, [pc, #460]	; (8005610 <Menu_OpenDrain+0x278>)
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10e      	bne.n	8005468 <Menu_OpenDrain+0xd0>
		ST7735_DrawString(120, 40, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800544a:	4b6f      	ldr	r3, [pc, #444]	; (8005608 <Menu_OpenDrain+0x270>)
 800544c:	2200      	movs	r2, #0
 800544e:	9202      	str	r2, [sp, #8]
 8005450:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005454:	9201      	str	r2, [sp, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	9200      	str	r2, [sp, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a6d      	ldr	r2, [pc, #436]	; (8005614 <Menu_OpenDrain+0x27c>)
 800545e:	2128      	movs	r1, #40	; 0x28
 8005460:	2078      	movs	r0, #120	; 0x78
 8005462:	f001 fbf9 	bl	8006c58 <ST7735_DrawString>
 8005466:	e011      	b.n	800548c <Menu_OpenDrain+0xf4>
	else if(Status_OCD[1] == 0x00)
 8005468:	4b69      	ldr	r3, [pc, #420]	; (8005610 <Menu_OpenDrain+0x278>)
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10d      	bne.n	800548c <Menu_OpenDrain+0xf4>
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005470:	4b65      	ldr	r3, [pc, #404]	; (8005608 <Menu_OpenDrain+0x270>)
 8005472:	2200      	movs	r2, #0
 8005474:	9202      	str	r2, [sp, #8]
 8005476:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800547a:	9201      	str	r2, [sp, #4]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	9200      	str	r2, [sp, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a65      	ldr	r2, [pc, #404]	; (8005618 <Menu_OpenDrain+0x280>)
 8005484:	2128      	movs	r1, #40	; 0x28
 8005486:	2078      	movs	r0, #120	; 0x78
 8005488:	f001 fbe6 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 50, "- OC2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800548c:	4b5e      	ldr	r3, [pc, #376]	; (8005608 <Menu_OpenDrain+0x270>)
 800548e:	2200      	movs	r2, #0
 8005490:	9202      	str	r2, [sp, #8]
 8005492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005496:	9201      	str	r2, [sp, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	9200      	str	r2, [sp, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a60      	ldr	r2, [pc, #384]	; (8005620 <Menu_OpenDrain+0x288>)
 80054a0:	2132      	movs	r1, #50	; 0x32
 80054a2:	2000      	movs	r0, #0
 80054a4:	f001 fbd8 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[2] == 0x01)
 80054a8:	4b59      	ldr	r3, [pc, #356]	; (8005610 <Menu_OpenDrain+0x278>)
 80054aa:	789b      	ldrb	r3, [r3, #2]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10e      	bne.n	80054ce <Menu_OpenDrain+0x136>
		ST7735_DrawString(120, 50, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80054b0:	4b55      	ldr	r3, [pc, #340]	; (8005608 <Menu_OpenDrain+0x270>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	9202      	str	r2, [sp, #8]
 80054b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80054ba:	9201      	str	r2, [sp, #4]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	9200      	str	r2, [sp, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a54      	ldr	r2, [pc, #336]	; (8005614 <Menu_OpenDrain+0x27c>)
 80054c4:	2132      	movs	r1, #50	; 0x32
 80054c6:	2078      	movs	r0, #120	; 0x78
 80054c8:	f001 fbc6 	bl	8006c58 <ST7735_DrawString>
 80054cc:	e011      	b.n	80054f2 <Menu_OpenDrain+0x15a>
	else if(Status_OCD[2] == 0x00)
 80054ce:	4b50      	ldr	r3, [pc, #320]	; (8005610 <Menu_OpenDrain+0x278>)
 80054d0:	789b      	ldrb	r3, [r3, #2]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10d      	bne.n	80054f2 <Menu_OpenDrain+0x15a>
		ST7735_DrawString(120, 50, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80054d6:	4b4c      	ldr	r3, [pc, #304]	; (8005608 <Menu_OpenDrain+0x270>)
 80054d8:	2200      	movs	r2, #0
 80054da:	9202      	str	r2, [sp, #8]
 80054dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80054e0:	9201      	str	r2, [sp, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	9200      	str	r2, [sp, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a4b      	ldr	r2, [pc, #300]	; (8005618 <Menu_OpenDrain+0x280>)
 80054ea:	2132      	movs	r1, #50	; 0x32
 80054ec:	2078      	movs	r0, #120	; 0x78
 80054ee:	f001 fbb3 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 60, "- OC3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80054f2:	4b45      	ldr	r3, [pc, #276]	; (8005608 <Menu_OpenDrain+0x270>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	9202      	str	r2, [sp, #8]
 80054f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054fc:	9201      	str	r2, [sp, #4]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	9200      	str	r2, [sp, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a47      	ldr	r2, [pc, #284]	; (8005624 <Menu_OpenDrain+0x28c>)
 8005506:	213c      	movs	r1, #60	; 0x3c
 8005508:	2000      	movs	r0, #0
 800550a:	f001 fba5 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[3] == 0x01)
 800550e:	4b40      	ldr	r3, [pc, #256]	; (8005610 <Menu_OpenDrain+0x278>)
 8005510:	78db      	ldrb	r3, [r3, #3]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d10e      	bne.n	8005534 <Menu_OpenDrain+0x19c>
		ST7735_DrawString(120, 60, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005516:	4b3c      	ldr	r3, [pc, #240]	; (8005608 <Menu_OpenDrain+0x270>)
 8005518:	2200      	movs	r2, #0
 800551a:	9202      	str	r2, [sp, #8]
 800551c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005520:	9201      	str	r2, [sp, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	9200      	str	r2, [sp, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a3a      	ldr	r2, [pc, #232]	; (8005614 <Menu_OpenDrain+0x27c>)
 800552a:	213c      	movs	r1, #60	; 0x3c
 800552c:	2078      	movs	r0, #120	; 0x78
 800552e:	f001 fb93 	bl	8006c58 <ST7735_DrawString>
 8005532:	e011      	b.n	8005558 <Menu_OpenDrain+0x1c0>
	else if(Status_OCD[3] == 0x00)
 8005534:	4b36      	ldr	r3, [pc, #216]	; (8005610 <Menu_OpenDrain+0x278>)
 8005536:	78db      	ldrb	r3, [r3, #3]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10d      	bne.n	8005558 <Menu_OpenDrain+0x1c0>
		ST7735_DrawString(120, 60, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <Menu_OpenDrain+0x270>)
 800553e:	2200      	movs	r2, #0
 8005540:	9202      	str	r2, [sp, #8]
 8005542:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005546:	9201      	str	r2, [sp, #4]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	9200      	str	r2, [sp, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a32      	ldr	r2, [pc, #200]	; (8005618 <Menu_OpenDrain+0x280>)
 8005550:	213c      	movs	r1, #60	; 0x3c
 8005552:	2078      	movs	r0, #120	; 0x78
 8005554:	f001 fb80 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 70, "- OC4", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005558:	4b2b      	ldr	r3, [pc, #172]	; (8005608 <Menu_OpenDrain+0x270>)
 800555a:	2200      	movs	r2, #0
 800555c:	9202      	str	r2, [sp, #8]
 800555e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005562:	9201      	str	r2, [sp, #4]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	9200      	str	r2, [sp, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2f      	ldr	r2, [pc, #188]	; (8005628 <Menu_OpenDrain+0x290>)
 800556c:	2146      	movs	r1, #70	; 0x46
 800556e:	2000      	movs	r0, #0
 8005570:	f001 fb72 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[4] == 0x01)
 8005574:	4b26      	ldr	r3, [pc, #152]	; (8005610 <Menu_OpenDrain+0x278>)
 8005576:	791b      	ldrb	r3, [r3, #4]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d10e      	bne.n	800559a <Menu_OpenDrain+0x202>
		ST7735_DrawString(120, 70, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800557c:	4b22      	ldr	r3, [pc, #136]	; (8005608 <Menu_OpenDrain+0x270>)
 800557e:	2200      	movs	r2, #0
 8005580:	9202      	str	r2, [sp, #8]
 8005582:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005586:	9201      	str	r2, [sp, #4]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	9200      	str	r2, [sp, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a21      	ldr	r2, [pc, #132]	; (8005614 <Menu_OpenDrain+0x27c>)
 8005590:	2146      	movs	r1, #70	; 0x46
 8005592:	2078      	movs	r0, #120	; 0x78
 8005594:	f001 fb60 	bl	8006c58 <ST7735_DrawString>
 8005598:	e011      	b.n	80055be <Menu_OpenDrain+0x226>
	else if(Status_OCD[4] == 0x00)
 800559a:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <Menu_OpenDrain+0x278>)
 800559c:	791b      	ldrb	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <Menu_OpenDrain+0x226>
		ST7735_DrawString(120, 70, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80055a2:	4b19      	ldr	r3, [pc, #100]	; (8005608 <Menu_OpenDrain+0x270>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	9202      	str	r2, [sp, #8]
 80055a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	9200      	str	r2, [sp, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <Menu_OpenDrain+0x280>)
 80055b6:	2146      	movs	r1, #70	; 0x46
 80055b8:	2078      	movs	r0, #120	; 0x78
 80055ba:	f001 fb4d 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 80, "- OC5", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80055be:	4b12      	ldr	r3, [pc, #72]	; (8005608 <Menu_OpenDrain+0x270>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	9202      	str	r2, [sp, #8]
 80055c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055c8:	9201      	str	r2, [sp, #4]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	9200      	str	r2, [sp, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <Menu_OpenDrain+0x294>)
 80055d2:	2150      	movs	r1, #80	; 0x50
 80055d4:	2000      	movs	r0, #0
 80055d6:	f001 fb3f 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[5] == 0x01)
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <Menu_OpenDrain+0x278>)
 80055dc:	795b      	ldrb	r3, [r3, #5]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d126      	bne.n	8005630 <Menu_OpenDrain+0x298>
		ST7735_DrawString(120, 80, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <Menu_OpenDrain+0x270>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	9202      	str	r2, [sp, #8]
 80055e8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80055ec:	9201      	str	r2, [sp, #4]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	9200      	str	r2, [sp, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a07      	ldr	r2, [pc, #28]	; (8005614 <Menu_OpenDrain+0x27c>)
 80055f6:	2150      	movs	r1, #80	; 0x50
 80055f8:	2078      	movs	r0, #120	; 0x78
 80055fa:	f001 fb2d 	bl	8006c58 <ST7735_DrawString>
 80055fe:	e029      	b.n	8005654 <Menu_OpenDrain+0x2bc>
 8005600:	20000008 	.word	0x20000008
 8005604:	0800bf20 	.word	0x0800bf20
 8005608:	20000000 	.word	0x20000000
 800560c:	0800bf2c 	.word	0x0800bf2c
 8005610:	20000140 	.word	0x20000140
 8005614:	0800bfc8 	.word	0x0800bfc8
 8005618:	0800bfcc 	.word	0x0800bfcc
 800561c:	0800bf34 	.word	0x0800bf34
 8005620:	0800bf3c 	.word	0x0800bf3c
 8005624:	0800bf44 	.word	0x0800bf44
 8005628:	0800bf4c 	.word	0x0800bf4c
 800562c:	0800bf54 	.word	0x0800bf54
	else if(Status_OCD[5] == 0x00)
 8005630:	4b40      	ldr	r3, [pc, #256]	; (8005734 <Menu_OpenDrain+0x39c>)
 8005632:	795b      	ldrb	r3, [r3, #5]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10d      	bne.n	8005654 <Menu_OpenDrain+0x2bc>
		ST7735_DrawString(120, 80, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005638:	4b3f      	ldr	r3, [pc, #252]	; (8005738 <Menu_OpenDrain+0x3a0>)
 800563a:	2200      	movs	r2, #0
 800563c:	9202      	str	r2, [sp, #8]
 800563e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005642:	9201      	str	r2, [sp, #4]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	9200      	str	r2, [sp, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a3c      	ldr	r2, [pc, #240]	; (800573c <Menu_OpenDrain+0x3a4>)
 800564c:	2150      	movs	r1, #80	; 0x50
 800564e:	2078      	movs	r0, #120	; 0x78
 8005650:	f001 fb02 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 90, "- OC6", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005654:	4b38      	ldr	r3, [pc, #224]	; (8005738 <Menu_OpenDrain+0x3a0>)
 8005656:	2200      	movs	r2, #0
 8005658:	9202      	str	r2, [sp, #8]
 800565a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800565e:	9201      	str	r2, [sp, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	9200      	str	r2, [sp, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a36      	ldr	r2, [pc, #216]	; (8005740 <Menu_OpenDrain+0x3a8>)
 8005668:	215a      	movs	r1, #90	; 0x5a
 800566a:	2000      	movs	r0, #0
 800566c:	f001 faf4 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[6] == 0x01)
 8005670:	4b30      	ldr	r3, [pc, #192]	; (8005734 <Menu_OpenDrain+0x39c>)
 8005672:	799b      	ldrb	r3, [r3, #6]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d10e      	bne.n	8005696 <Menu_OpenDrain+0x2fe>
		ST7735_DrawString(120, 90, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005678:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <Menu_OpenDrain+0x3a0>)
 800567a:	2200      	movs	r2, #0
 800567c:	9202      	str	r2, [sp, #8]
 800567e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005682:	9201      	str	r2, [sp, #4]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	9200      	str	r2, [sp, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2e      	ldr	r2, [pc, #184]	; (8005744 <Menu_OpenDrain+0x3ac>)
 800568c:	215a      	movs	r1, #90	; 0x5a
 800568e:	2078      	movs	r0, #120	; 0x78
 8005690:	f001 fae2 	bl	8006c58 <ST7735_DrawString>
 8005694:	e011      	b.n	80056ba <Menu_OpenDrain+0x322>
	else if(Status_OCD[6] == 0x00)
 8005696:	4b27      	ldr	r3, [pc, #156]	; (8005734 <Menu_OpenDrain+0x39c>)
 8005698:	799b      	ldrb	r3, [r3, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <Menu_OpenDrain+0x322>
		ST7735_DrawString(120, 90, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 800569e:	4b26      	ldr	r3, [pc, #152]	; (8005738 <Menu_OpenDrain+0x3a0>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	9202      	str	r2, [sp, #8]
 80056a4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80056a8:	9201      	str	r2, [sp, #4]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	9200      	str	r2, [sp, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <Menu_OpenDrain+0x3a4>)
 80056b2:	215a      	movs	r1, #90	; 0x5a
 80056b4:	2078      	movs	r0, #120	; 0x78
 80056b6:	f001 facf 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 100, "- OC7", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80056ba:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <Menu_OpenDrain+0x3a0>)
 80056bc:	2200      	movs	r2, #0
 80056be:	9202      	str	r2, [sp, #8]
 80056c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056c4:	9201      	str	r2, [sp, #4]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	9200      	str	r2, [sp, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <Menu_OpenDrain+0x3b0>)
 80056ce:	2164      	movs	r1, #100	; 0x64
 80056d0:	2000      	movs	r0, #0
 80056d2:	f001 fac1 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[7] == 0x01)
 80056d6:	4b17      	ldr	r3, [pc, #92]	; (8005734 <Menu_OpenDrain+0x39c>)
 80056d8:	79db      	ldrb	r3, [r3, #7]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10e      	bne.n	80056fc <Menu_OpenDrain+0x364>
		ST7735_DrawString(120, 100, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80056de:	4b16      	ldr	r3, [pc, #88]	; (8005738 <Menu_OpenDrain+0x3a0>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	9202      	str	r2, [sp, #8]
 80056e4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80056e8:	9201      	str	r2, [sp, #4]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	9200      	str	r2, [sp, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a14      	ldr	r2, [pc, #80]	; (8005744 <Menu_OpenDrain+0x3ac>)
 80056f2:	2164      	movs	r1, #100	; 0x64
 80056f4:	2078      	movs	r0, #120	; 0x78
 80056f6:	f001 faaf 	bl	8006c58 <ST7735_DrawString>
 80056fa:	e011      	b.n	8005720 <Menu_OpenDrain+0x388>
	else if(Status_OCD[7] == 0x00)
 80056fc:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <Menu_OpenDrain+0x39c>)
 80056fe:	79db      	ldrb	r3, [r3, #7]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10d      	bne.n	8005720 <Menu_OpenDrain+0x388>
		ST7735_DrawString(120, 100, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <Menu_OpenDrain+0x3a0>)
 8005706:	2200      	movs	r2, #0
 8005708:	9202      	str	r2, [sp, #8]
 800570a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800570e:	9201      	str	r2, [sp, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	9200      	str	r2, [sp, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a09      	ldr	r2, [pc, #36]	; (800573c <Menu_OpenDrain+0x3a4>)
 8005718:	2164      	movs	r1, #100	; 0x64
 800571a:	2078      	movs	r0, #120	; 0x78
 800571c:	f001 fa9c 	bl	8006c58 <ST7735_DrawString>
	cnt1 = 1;
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <Menu_OpenDrain+0x3b4>)
 8005722:	2201      	movs	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
	cnt2 = 1;
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <Menu_OpenDrain+0x3b8>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
}
 800572c:	bf00      	nop
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000140 	.word	0x20000140
 8005738:	20000000 	.word	0x20000000
 800573c:	0800bfcc 	.word	0x0800bfcc
 8005740:	0800bf5c 	.word	0x0800bf5c
 8005744:	0800bfc8 	.word	0x0800bfc8
 8005748:	0800bf64 	.word	0x0800bf64
 800574c:	2000001a 	.word	0x2000001a
 8005750:	2000001b 	.word	0x2000001b

08005754 <Menu_1Wire>:
//Функция отрисовки подменю: "1-Wire"
void Menu_1Wire(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 800575a:	2000      	movs	r0, #0
 800575c:	f001 fb60 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(48, 0, "1-WIRE", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005760:	4b3e      	ldr	r3, [pc, #248]	; (800585c <Menu_1Wire+0x108>)
 8005762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005766:	9202      	str	r2, [sp, #8]
 8005768:	221f      	movs	r2, #31
 800576a:	9201      	str	r2, [sp, #4]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	9200      	str	r2, [sp, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a3b      	ldr	r2, [pc, #236]	; (8005860 <Menu_1Wire+0x10c>)
 8005774:	2100      	movs	r1, #0
 8005776:	2030      	movs	r0, #48	; 0x30
 8005778:	f001 fa6e 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 30, "- WIRE0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800577c:	4b39      	ldr	r3, [pc, #228]	; (8005864 <Menu_1Wire+0x110>)
 800577e:	2200      	movs	r2, #0
 8005780:	9202      	str	r2, [sp, #8]
 8005782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005786:	9201      	str	r2, [sp, #4]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	9200      	str	r2, [sp, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a36      	ldr	r2, [pc, #216]	; (8005868 <Menu_1Wire+0x114>)
 8005790:	211e      	movs	r1, #30
 8005792:	2000      	movs	r0, #0
 8005794:	f001 fa60 	bl	8006c58 <ST7735_DrawString>
	if(Status_1WR[0] == 0x01)
 8005798:	4b34      	ldr	r3, [pc, #208]	; (800586c <Menu_1Wire+0x118>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10e      	bne.n	80057be <Menu_1Wire+0x6a>
		ST7735_DrawString(120, 30, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80057a0:	4b30      	ldr	r3, [pc, #192]	; (8005864 <Menu_1Wire+0x110>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	9202      	str	r2, [sp, #8]
 80057a6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80057aa:	9201      	str	r2, [sp, #4]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	9200      	str	r2, [sp, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2f      	ldr	r2, [pc, #188]	; (8005870 <Menu_1Wire+0x11c>)
 80057b4:	211e      	movs	r1, #30
 80057b6:	2078      	movs	r0, #120	; 0x78
 80057b8:	f001 fa4e 	bl	8006c58 <ST7735_DrawString>
 80057bc:	e011      	b.n	80057e2 <Menu_1Wire+0x8e>
	else if(Status_1WR[0] == 0x00)
 80057be:	4b2b      	ldr	r3, [pc, #172]	; (800586c <Menu_1Wire+0x118>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10d      	bne.n	80057e2 <Menu_1Wire+0x8e>
		ST7735_DrawString(120, 30, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80057c6:	4b27      	ldr	r3, [pc, #156]	; (8005864 <Menu_1Wire+0x110>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	9202      	str	r2, [sp, #8]
 80057cc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80057d0:	9201      	str	r2, [sp, #4]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	9200      	str	r2, [sp, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a26      	ldr	r2, [pc, #152]	; (8005874 <Menu_1Wire+0x120>)
 80057da:	211e      	movs	r1, #30
 80057dc:	2078      	movs	r0, #120	; 0x78
 80057de:	f001 fa3b 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 40, "- WIRE1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80057e2:	4b20      	ldr	r3, [pc, #128]	; (8005864 <Menu_1Wire+0x110>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	9202      	str	r2, [sp, #8]
 80057e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ec:	9201      	str	r2, [sp, #4]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	9200      	str	r2, [sp, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a20      	ldr	r2, [pc, #128]	; (8005878 <Menu_1Wire+0x124>)
 80057f6:	2128      	movs	r1, #40	; 0x28
 80057f8:	2000      	movs	r0, #0
 80057fa:	f001 fa2d 	bl	8006c58 <ST7735_DrawString>
	if(Status_1WR[1] == 0x01)
 80057fe:	4b1b      	ldr	r3, [pc, #108]	; (800586c <Menu_1Wire+0x118>)
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d10e      	bne.n	8005824 <Menu_1Wire+0xd0>
		ST7735_DrawString(120, 40, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005806:	4b17      	ldr	r3, [pc, #92]	; (8005864 <Menu_1Wire+0x110>)
 8005808:	2200      	movs	r2, #0
 800580a:	9202      	str	r2, [sp, #8]
 800580c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005810:	9201      	str	r2, [sp, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	9200      	str	r2, [sp, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a15      	ldr	r2, [pc, #84]	; (8005870 <Menu_1Wire+0x11c>)
 800581a:	2128      	movs	r1, #40	; 0x28
 800581c:	2078      	movs	r0, #120	; 0x78
 800581e:	f001 fa1b 	bl	8006c58 <ST7735_DrawString>
 8005822:	e011      	b.n	8005848 <Menu_1Wire+0xf4>
	else if(Status_1WR[1] == 0x00)
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <Menu_1Wire+0x118>)
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <Menu_1Wire+0xf4>
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 800582c:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <Menu_1Wire+0x110>)
 800582e:	2200      	movs	r2, #0
 8005830:	9202      	str	r2, [sp, #8]
 8005832:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005836:	9201      	str	r2, [sp, #4]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	9200      	str	r2, [sp, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a0d      	ldr	r2, [pc, #52]	; (8005874 <Menu_1Wire+0x120>)
 8005840:	2128      	movs	r1, #40	; 0x28
 8005842:	2078      	movs	r0, #120	; 0x78
 8005844:	f001 fa08 	bl	8006c58 <ST7735_DrawString>
	cnt1 = 1;
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <Menu_1Wire+0x128>)
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
	cnt2 = 1;
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <Menu_1Wire+0x12c>)
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000008 	.word	0x20000008
 8005860:	0800bf6c 	.word	0x0800bf6c
 8005864:	20000000 	.word	0x20000000
 8005868:	0800bf74 	.word	0x0800bf74
 800586c:	20000148 	.word	0x20000148
 8005870:	0800bfc8 	.word	0x0800bfc8
 8005874:	0800bfcc 	.word	0x0800bfcc
 8005878:	0800bf7c 	.word	0x0800bf7c
 800587c:	2000001a 	.word	0x2000001a
 8005880:	2000001b 	.word	0x2000001b

08005884 <Menu_PWM>:
//Функция отрисовки подменю: "ШИМ"
void Menu_PWM(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af04      	add	r7, sp, #16
	ST7735_FillScreen(ST7735_BLACK);
 800588a:	2000      	movs	r0, #0
 800588c:	f001 fac8 	bl	8006e20 <ST7735_FillScreen>
	ST7735_DrawString(71, 0, "PWM", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005890:	4b71      	ldr	r3, [pc, #452]	; (8005a58 <Menu_PWM+0x1d4>)
 8005892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005896:	9202      	str	r2, [sp, #8]
 8005898:	221f      	movs	r2, #31
 800589a:	9201      	str	r2, [sp, #4]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	9200      	str	r2, [sp, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6e      	ldr	r2, [pc, #440]	; (8005a5c <Menu_PWM+0x1d8>)
 80058a4:	2100      	movs	r1, #0
 80058a6:	2047      	movs	r0, #71	; 0x47
 80058a8:	f001 f9d6 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 30, "- PWM0", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80058ac:	4b6c      	ldr	r3, [pc, #432]	; (8005a60 <Menu_PWM+0x1dc>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	9202      	str	r2, [sp, #8]
 80058b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b6:	9201      	str	r2, [sp, #4]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	9200      	str	r2, [sp, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a69      	ldr	r2, [pc, #420]	; (8005a64 <Menu_PWM+0x1e0>)
 80058c0:	211e      	movs	r1, #30
 80058c2:	2000      	movs	r0, #0
 80058c4:	f001 f9c8 	bl	8006c58 <ST7735_DrawString>
	if(Status_PWM[0] == 0x01)
 80058c8:	4b67      	ldr	r3, [pc, #412]	; (8005a68 <Menu_PWM+0x1e4>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d10e      	bne.n	80058ee <Menu_PWM+0x6a>
		ST7735_DrawString(120, 30, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80058d0:	4b63      	ldr	r3, [pc, #396]	; (8005a60 <Menu_PWM+0x1dc>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	9202      	str	r2, [sp, #8]
 80058d6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80058da:	9201      	str	r2, [sp, #4]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	9200      	str	r2, [sp, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a62      	ldr	r2, [pc, #392]	; (8005a6c <Menu_PWM+0x1e8>)
 80058e4:	211e      	movs	r1, #30
 80058e6:	2078      	movs	r0, #120	; 0x78
 80058e8:	f001 f9b6 	bl	8006c58 <ST7735_DrawString>
 80058ec:	e011      	b.n	8005912 <Menu_PWM+0x8e>
	else if(Status_PWM[0] == 0x00)
 80058ee:	4b5e      	ldr	r3, [pc, #376]	; (8005a68 <Menu_PWM+0x1e4>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10d      	bne.n	8005912 <Menu_PWM+0x8e>
		ST7735_DrawString(120, 30, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80058f6:	4b5a      	ldr	r3, [pc, #360]	; (8005a60 <Menu_PWM+0x1dc>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	9202      	str	r2, [sp, #8]
 80058fc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005900:	9201      	str	r2, [sp, #4]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	9200      	str	r2, [sp, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a59      	ldr	r2, [pc, #356]	; (8005a70 <Menu_PWM+0x1ec>)
 800590a:	211e      	movs	r1, #30
 800590c:	2078      	movs	r0, #120	; 0x78
 800590e:	f001 f9a3 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 40, "- PWM1", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005912:	4b53      	ldr	r3, [pc, #332]	; (8005a60 <Menu_PWM+0x1dc>)
 8005914:	2200      	movs	r2, #0
 8005916:	9202      	str	r2, [sp, #8]
 8005918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800591c:	9201      	str	r2, [sp, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	9200      	str	r2, [sp, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a53      	ldr	r2, [pc, #332]	; (8005a74 <Menu_PWM+0x1f0>)
 8005926:	2128      	movs	r1, #40	; 0x28
 8005928:	2000      	movs	r0, #0
 800592a:	f001 f995 	bl	8006c58 <ST7735_DrawString>
	if(Status_PWM[1] == 0x01)
 800592e:	4b4e      	ldr	r3, [pc, #312]	; (8005a68 <Menu_PWM+0x1e4>)
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d10e      	bne.n	8005954 <Menu_PWM+0xd0>
		ST7735_DrawString(120, 40, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005936:	4b4a      	ldr	r3, [pc, #296]	; (8005a60 <Menu_PWM+0x1dc>)
 8005938:	2200      	movs	r2, #0
 800593a:	9202      	str	r2, [sp, #8]
 800593c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005940:	9201      	str	r2, [sp, #4]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	9200      	str	r2, [sp, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a48      	ldr	r2, [pc, #288]	; (8005a6c <Menu_PWM+0x1e8>)
 800594a:	2128      	movs	r1, #40	; 0x28
 800594c:	2078      	movs	r0, #120	; 0x78
 800594e:	f001 f983 	bl	8006c58 <ST7735_DrawString>
 8005952:	e011      	b.n	8005978 <Menu_PWM+0xf4>
	else if(Status_PWM[1] == 0x00)
 8005954:	4b44      	ldr	r3, [pc, #272]	; (8005a68 <Menu_PWM+0x1e4>)
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10d      	bne.n	8005978 <Menu_PWM+0xf4>
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 800595c:	4b40      	ldr	r3, [pc, #256]	; (8005a60 <Menu_PWM+0x1dc>)
 800595e:	2200      	movs	r2, #0
 8005960:	9202      	str	r2, [sp, #8]
 8005962:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005966:	9201      	str	r2, [sp, #4]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	9200      	str	r2, [sp, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a40      	ldr	r2, [pc, #256]	; (8005a70 <Menu_PWM+0x1ec>)
 8005970:	2128      	movs	r1, #40	; 0x28
 8005972:	2078      	movs	r0, #120	; 0x78
 8005974:	f001 f970 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 50, "- PWM2", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <Menu_PWM+0x1dc>)
 800597a:	2200      	movs	r2, #0
 800597c:	9202      	str	r2, [sp, #8]
 800597e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005982:	9201      	str	r2, [sp, #4]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	9200      	str	r2, [sp, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3b      	ldr	r2, [pc, #236]	; (8005a78 <Menu_PWM+0x1f4>)
 800598c:	2132      	movs	r1, #50	; 0x32
 800598e:	2000      	movs	r0, #0
 8005990:	f001 f962 	bl	8006c58 <ST7735_DrawString>
	if(Status_PWM[2] == 0x01)
 8005994:	4b34      	ldr	r3, [pc, #208]	; (8005a68 <Menu_PWM+0x1e4>)
 8005996:	789b      	ldrb	r3, [r3, #2]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d10e      	bne.n	80059ba <Menu_PWM+0x136>
		ST7735_DrawString(120, 50, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800599c:	4b30      	ldr	r3, [pc, #192]	; (8005a60 <Menu_PWM+0x1dc>)
 800599e:	2200      	movs	r2, #0
 80059a0:	9202      	str	r2, [sp, #8]
 80059a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80059a6:	9201      	str	r2, [sp, #4]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	9200      	str	r2, [sp, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a2f      	ldr	r2, [pc, #188]	; (8005a6c <Menu_PWM+0x1e8>)
 80059b0:	2132      	movs	r1, #50	; 0x32
 80059b2:	2078      	movs	r0, #120	; 0x78
 80059b4:	f001 f950 	bl	8006c58 <ST7735_DrawString>
 80059b8:	e011      	b.n	80059de <Menu_PWM+0x15a>
	else if(Status_PWM[2] == 0x00)
 80059ba:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <Menu_PWM+0x1e4>)
 80059bc:	789b      	ldrb	r3, [r3, #2]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <Menu_PWM+0x15a>
		ST7735_DrawString(120, 50, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80059c2:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <Menu_PWM+0x1dc>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	9202      	str	r2, [sp, #8]
 80059c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80059cc:	9201      	str	r2, [sp, #4]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	9200      	str	r2, [sp, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <Menu_PWM+0x1ec>)
 80059d6:	2132      	movs	r1, #50	; 0x32
 80059d8:	2078      	movs	r0, #120	; 0x78
 80059da:	f001 f93d 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(0, 60, "- PWM3", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80059de:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <Menu_PWM+0x1dc>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	9202      	str	r2, [sp, #8]
 80059e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e8:	9201      	str	r2, [sp, #4]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	9200      	str	r2, [sp, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <Menu_PWM+0x1f8>)
 80059f2:	213c      	movs	r1, #60	; 0x3c
 80059f4:	2000      	movs	r0, #0
 80059f6:	f001 f92f 	bl	8006c58 <ST7735_DrawString>
	if(Status_PWM[3] == 0x01)
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <Menu_PWM+0x1e4>)
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10e      	bne.n	8005a20 <Menu_PWM+0x19c>
		ST7735_DrawString(120, 60, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <Menu_PWM+0x1dc>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	9202      	str	r2, [sp, #8]
 8005a08:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005a0c:	9201      	str	r2, [sp, #4]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	9200      	str	r2, [sp, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <Menu_PWM+0x1e8>)
 8005a16:	213c      	movs	r1, #60	; 0x3c
 8005a18:	2078      	movs	r0, #120	; 0x78
 8005a1a:	f001 f91d 	bl	8006c58 <ST7735_DrawString>
 8005a1e:	e011      	b.n	8005a44 <Menu_PWM+0x1c0>
	else if(Status_PWM[3] == 0x00)
 8005a20:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <Menu_PWM+0x1e4>)
 8005a22:	78db      	ldrb	r3, [r3, #3]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10d      	bne.n	8005a44 <Menu_PWM+0x1c0>
		ST7735_DrawString(120, 60, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <Menu_PWM+0x1dc>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	9202      	str	r2, [sp, #8]
 8005a2e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005a32:	9201      	str	r2, [sp, #4]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	9200      	str	r2, [sp, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <Menu_PWM+0x1ec>)
 8005a3c:	213c      	movs	r1, #60	; 0x3c
 8005a3e:	2078      	movs	r0, #120	; 0x78
 8005a40:	f001 f90a 	bl	8006c58 <ST7735_DrawString>
	cnt1 = 1;
 8005a44:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <Menu_PWM+0x1fc>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
	cnt2 = 1;
 8005a4a:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <Menu_PWM+0x200>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000008 	.word	0x20000008
 8005a5c:	0800bf84 	.word	0x0800bf84
 8005a60:	20000000 	.word	0x20000000
 8005a64:	0800bf88 	.word	0x0800bf88
 8005a68:	20000138 	.word	0x20000138
 8005a6c:	0800bfc8 	.word	0x0800bfc8
 8005a70:	0800bfcc 	.word	0x0800bfcc
 8005a74:	0800bf90 	.word	0x0800bf90
 8005a78:	0800bf98 	.word	0x0800bf98
 8005a7c:	0800bfa0 	.word	0x0800bfa0
 8005a80:	2000001a 	.word	0x2000001a
 8005a84:	2000001b 	.word	0x2000001b

08005a88 <Filling_Menu_Block>:
//Функция отрисовки подменю во вкладках блоки
void Filling_Menu_Block(uint8_t CMD, uint8_t count, uint8_t Name)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af04      	add	r7, sp, #16
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
 8005a92:	460b      	mov	r3, r1
 8005a94:	71bb      	strb	r3, [r7, #6]
 8005a96:	4613      	mov	r3, r2
 8005a98:	717b      	strb	r3, [r7, #5]
	char item[1] = "";
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	753b      	strb	r3, [r7, #20]
	char str[5] = "";
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	743b      	strb	r3, [r7, #16]

	ST7735_FillScreen(ST7735_BLACK);
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f001 f9ba 	bl	8006e20 <ST7735_FillScreen>
	if(Name == 0)
 8005aac:	797b      	ldrb	r3, [r7, #5]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10d      	bne.n	8005ace <Filling_Menu_Block+0x46>
		ST7735_DrawString(53, 0, "RELAY", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005ab2:	4b70      	ldr	r3, [pc, #448]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab8:	9202      	str	r2, [sp, #8]
 8005aba:	221f      	movs	r2, #31
 8005abc:	9201      	str	r2, [sp, #4]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	9200      	str	r2, [sp, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a6c      	ldr	r2, [pc, #432]	; (8005c78 <Filling_Menu_Block+0x1f0>)
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	2035      	movs	r0, #53	; 0x35
 8005aca:	f001 f8c5 	bl	8006c58 <ST7735_DrawString>
	if(Name == 1)
 8005ace:	797b      	ldrb	r3, [r7, #5]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10d      	bne.n	8005af0 <Filling_Menu_Block+0x68>
		ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005ad4:	4b67      	ldr	r3, [pc, #412]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ada:	9202      	str	r2, [sp, #8]
 8005adc:	221f      	movs	r2, #31
 8005ade:	9201      	str	r2, [sp, #4]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	9200      	str	r2, [sp, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a65      	ldr	r2, [pc, #404]	; (8005c7c <Filling_Menu_Block+0x1f4>)
 8005ae8:	2100      	movs	r1, #0
 8005aea:	202a      	movs	r0, #42	; 0x2a
 8005aec:	f001 f8b4 	bl	8006c58 <ST7735_DrawString>
	if(Name == 2)
 8005af0:	797b      	ldrb	r3, [r7, #5]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d10d      	bne.n	8005b12 <Filling_Menu_Block+0x8a>
		ST7735_DrawString(42, 0, "DIMMING", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005af6:	4b5f      	ldr	r3, [pc, #380]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005afc:	9202      	str	r2, [sp, #8]
 8005afe:	221f      	movs	r2, #31
 8005b00:	9201      	str	r2, [sp, #4]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	9200      	str	r2, [sp, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a5d      	ldr	r2, [pc, #372]	; (8005c80 <Filling_Menu_Block+0x1f8>)
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	202a      	movs	r0, #42	; 0x2a
 8005b0e:	f001 f8a3 	bl	8006c58 <ST7735_DrawString>
	if(Name == 3)
 8005b12:	797b      	ldrb	r3, [r7, #5]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d10d      	bne.n	8005b34 <Filling_Menu_Block+0xac>
		ST7735_DrawString(31, 0, "INTERFACE", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005b18:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1e:	9202      	str	r2, [sp, #8]
 8005b20:	221f      	movs	r2, #31
 8005b22:	9201      	str	r2, [sp, #4]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	9200      	str	r2, [sp, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a56      	ldr	r2, [pc, #344]	; (8005c84 <Filling_Menu_Block+0x1fc>)
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	201f      	movs	r0, #31
 8005b30:	f001 f892 	bl	8006c58 <ST7735_DrawString>
	CSM_L;
 8005b34:	2200      	movs	r2, #0
 8005b36:	2110      	movs	r1, #16
 8005b38:	4853      	ldr	r0, [pc, #332]	; (8005c88 <Filling_Menu_Block+0x200>)
 8005b3a:	f002 fc79 	bl	8008430 <HAL_GPIO_WritePin>
	SPI_RW(CMD);
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fa fb7d 	bl	8000240 <SPI_RW>
	for(uint8_t i = 0, column = 30; i < count; i++, column+=18)
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
 8005b4a:	231e      	movs	r3, #30
 8005b4c:	75bb      	strb	r3, [r7, #22]
 8005b4e:	e083      	b.n	8005c58 <Filling_Menu_Block+0x1d0>
	{
		itoa(i, item, 10);
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	f107 0114 	add.w	r1, r7, #20
 8005b56:	220a      	movs	r2, #10
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f005 fcab 	bl	800b4b4 <itoa>
		itoa(SPI_RW(MCU_NOP), str, 10);
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f7fa fb6e 	bl	8000240 <SPI_RW>
 8005b64:	4603      	mov	r3, r0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f107 030c 	add.w	r3, r7, #12
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f005 fca0 	bl	800b4b4 <itoa>
		if(i <= 4)
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d831      	bhi.n	8005bde <Filling_Menu_Block+0x156>
		{
			ST7735_DrawString(7, column, item, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8005b7a:	7dbb      	ldrb	r3, [r7, #22]
 8005b7c:	b299      	uxth	r1, r3
 8005b7e:	4b3d      	ldr	r3, [pc, #244]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005b80:	f107 0014 	add.w	r0, r7, #20
 8005b84:	2200      	movs	r2, #0
 8005b86:	9202      	str	r2, [sp, #8]
 8005b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b8c:	9201      	str	r2, [sp, #4]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	9200      	str	r2, [sp, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4602      	mov	r2, r0
 8005b96:	2007      	movs	r0, #7
 8005b98:	f001 f85e 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(18, column, "-", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8005b9c:	7dbb      	ldrb	r3, [r7, #22]
 8005b9e:	b299      	uxth	r1, r3
 8005ba0:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	9202      	str	r2, [sp, #8]
 8005ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005baa:	9201      	str	r2, [sp, #4]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	9200      	str	r2, [sp, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a36      	ldr	r2, [pc, #216]	; (8005c8c <Filling_Menu_Block+0x204>)
 8005bb4:	2012      	movs	r0, #18
 8005bb6:	f001 f84f 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(30, column, str, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8005bba:	7dbb      	ldrb	r3, [r7, #22]
 8005bbc:	b299      	uxth	r1, r3
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005bc0:	f107 000c 	add.w	r0, r7, #12
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	9202      	str	r2, [sp, #8]
 8005bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bcc:	9201      	str	r2, [sp, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	9200      	str	r2, [sp, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	201e      	movs	r0, #30
 8005bd8:	f001 f83e 	bl	8006c58 <ST7735_DrawString>
 8005bdc:	e036      	b.n	8005c4c <Filling_Menu_Block+0x1c4>
		}
		else
		{
			ST7735_DrawString(95, (column - 90), item, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8005bde:	7dbb      	ldrb	r3, [r7, #22]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b5a      	subs	r3, #90	; 0x5a
 8005be4:	b299      	uxth	r1, r3
 8005be6:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005be8:	f107 0014 	add.w	r0, r7, #20
 8005bec:	2200      	movs	r2, #0
 8005bee:	9202      	str	r2, [sp, #8]
 8005bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bf4:	9201      	str	r2, [sp, #4]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	9200      	str	r2, [sp, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	205f      	movs	r0, #95	; 0x5f
 8005c00:	f001 f82a 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(105, (column - 90), "-", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8005c04:	7dbb      	ldrb	r3, [r7, #22]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b5a      	subs	r3, #90	; 0x5a
 8005c0a:	b299      	uxth	r1, r3
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	9202      	str	r2, [sp, #8]
 8005c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c16:	9201      	str	r2, [sp, #4]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	9200      	str	r2, [sp, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <Filling_Menu_Block+0x204>)
 8005c20:	2069      	movs	r0, #105	; 0x69
 8005c22:	f001 f819 	bl	8006c58 <ST7735_DrawString>
			ST7735_DrawString(115, (column - 90), str, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8005c26:	7dbb      	ldrb	r3, [r7, #22]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b5a      	subs	r3, #90	; 0x5a
 8005c2c:	b299      	uxth	r1, r3
 8005c2e:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <Filling_Menu_Block+0x1ec>)
 8005c30:	f107 000c 	add.w	r0, r7, #12
 8005c34:	2200      	movs	r2, #0
 8005c36:	9202      	str	r2, [sp, #8]
 8005c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c3c:	9201      	str	r2, [sp, #4]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	9200      	str	r2, [sp, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4602      	mov	r2, r0
 8005c46:	2073      	movs	r0, #115	; 0x73
 8005c48:	f001 f806 	bl	8006c58 <ST7735_DrawString>
	for(uint8_t i = 0, column = 30; i < count; i++, column+=18)
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	75fb      	strb	r3, [r7, #23]
 8005c52:	7dbb      	ldrb	r3, [r7, #22]
 8005c54:	3312      	adds	r3, #18
 8005c56:	75bb      	strb	r3, [r7, #22]
 8005c58:	7dfa      	ldrb	r2, [r7, #23]
 8005c5a:	79bb      	ldrb	r3, [r7, #6]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	f4ff af77 	bcc.w	8005b50 <Filling_Menu_Block+0xc8>
		}
	}
	CSM_H;
 8005c62:	2201      	movs	r2, #1
 8005c64:	2110      	movs	r1, #16
 8005c66:	4808      	ldr	r0, [pc, #32]	; (8005c88 <Filling_Menu_Block+0x200>)
 8005c68:	f002 fbe2 	bl	8008430 <HAL_GPIO_WritePin>
}
 8005c6c:	bf00      	nop
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000008 	.word	0x20000008
 8005c78:	0800bfd0 	.word	0x0800bfd0
 8005c7c:	0800bed8 	.word	0x0800bed8
 8005c80:	0800bfd8 	.word	0x0800bfd8
 8005c84:	0800bfe0 	.word	0x0800bfe0
 8005c88:	40010800 	.word	0x40010800
 8005c8c:	0800bfec 	.word	0x0800bfec

08005c90 <Not_Found_Block>:
//Функция отрисовки сообщения о не найденных блоков
void Not_Found_Block(uint8_t Name)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af04      	add	r7, sp, #16
 8005c96:	4603      	mov	r3, r0
 8005c98:	71fb      	strb	r3, [r7, #7]
	ST7735_FillScreen(ST7735_BLACK);
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f001 f8c0 	bl	8006e20 <ST7735_FillScreen>
	if(Name == 0)
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <Not_Found_Block+0x32>
		ST7735_DrawString(53, 0, "RELAY", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005ca6:	4b30      	ldr	r3, [pc, #192]	; (8005d68 <Not_Found_Block+0xd8>)
 8005ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cac:	9202      	str	r2, [sp, #8]
 8005cae:	221f      	movs	r2, #31
 8005cb0:	9201      	str	r2, [sp, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	9200      	str	r2, [sp, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <Not_Found_Block+0xdc>)
 8005cba:	2100      	movs	r1, #0
 8005cbc:	2035      	movs	r0, #53	; 0x35
 8005cbe:	f000 ffcb 	bl	8006c58 <ST7735_DrawString>
	if(Name == 1)
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10d      	bne.n	8005ce4 <Not_Found_Block+0x54>
		ST7735_DrawString(42, 0, "DIGITAL", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005cc8:	4b27      	ldr	r3, [pc, #156]	; (8005d68 <Not_Found_Block+0xd8>)
 8005cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cce:	9202      	str	r2, [sp, #8]
 8005cd0:	221f      	movs	r2, #31
 8005cd2:	9201      	str	r2, [sp, #4]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	9200      	str	r2, [sp, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a25      	ldr	r2, [pc, #148]	; (8005d70 <Not_Found_Block+0xe0>)
 8005cdc:	2100      	movs	r1, #0
 8005cde:	202a      	movs	r0, #42	; 0x2a
 8005ce0:	f000 ffba 	bl	8006c58 <ST7735_DrawString>
	if(Name == 2)
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d10d      	bne.n	8005d06 <Not_Found_Block+0x76>
		ST7735_DrawString(42, 0, "DIMMING", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005cea:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <Not_Found_Block+0xd8>)
 8005cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cf0:	9202      	str	r2, [sp, #8]
 8005cf2:	221f      	movs	r2, #31
 8005cf4:	9201      	str	r2, [sp, #4]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	9200      	str	r2, [sp, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <Not_Found_Block+0xe4>)
 8005cfe:	2100      	movs	r1, #0
 8005d00:	202a      	movs	r0, #42	; 0x2a
 8005d02:	f000 ffa9 	bl	8006c58 <ST7735_DrawString>
	if(Name == 3)
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d10d      	bne.n	8005d28 <Not_Found_Block+0x98>
		ST7735_DrawString(31, 0, "INTERFACE", Font_11x18, ST7735_BLUE, ST7735_WHITE);
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <Not_Found_Block+0xd8>)
 8005d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d12:	9202      	str	r2, [sp, #8]
 8005d14:	221f      	movs	r2, #31
 8005d16:	9201      	str	r2, [sp, #4]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	9200      	str	r2, [sp, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a16      	ldr	r2, [pc, #88]	; (8005d78 <Not_Found_Block+0xe8>)
 8005d20:	2100      	movs	r1, #0
 8005d22:	201f      	movs	r0, #31
 8005d24:	f000 ff98 	bl	8006c58 <ST7735_DrawString>

	ST7735_DrawString(48, 54, "BLOCKS", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <Not_Found_Block+0xd8>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	9202      	str	r2, [sp, #8]
 8005d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d32:	9201      	str	r2, [sp, #4]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	9200      	str	r2, [sp, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a10      	ldr	r2, [pc, #64]	; (8005d7c <Not_Found_Block+0xec>)
 8005d3c:	2136      	movs	r1, #54	; 0x36
 8005d3e:	2030      	movs	r0, #48	; 0x30
 8005d40:	f000 ff8a 	bl	8006c58 <ST7735_DrawString>
	ST7735_DrawString(31, 72, "NOT FOUND", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <Not_Found_Block+0xd8>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	9202      	str	r2, [sp, #8]
 8005d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d4e:	9201      	str	r2, [sp, #4]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	9200      	str	r2, [sp, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <Not_Found_Block+0xf0>)
 8005d58:	2148      	movs	r1, #72	; 0x48
 8005d5a:	201f      	movs	r0, #31
 8005d5c:	f000 ff7c 	bl	8006c58 <ST7735_DrawString>


}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000008 	.word	0x20000008
 8005d6c:	0800bfd0 	.word	0x0800bfd0
 8005d70:	0800bed8 	.word	0x0800bed8
 8005d74:	0800bfd8 	.word	0x0800bfd8
 8005d78:	0800bfe0 	.word	0x0800bfe0
 8005d7c:	0800be24 	.word	0x0800be24
 8005d80:	0800bff0 	.word	0x0800bff0

08005d84 <Visible_Analog>:
//Функция отображения состояния меню аналоговых входов
void Visible_Analog(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af04      	add	r7, sp, #16
	if(Status_AIN[0] == 0x01)
 8005d8a:	4b95      	ldr	r3, [pc, #596]	; (8005fe0 <Visible_Analog+0x25c>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d10e      	bne.n	8005db0 <Visible_Analog+0x2c>
		ST7735_DrawString(120, 30, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005d92:	4b94      	ldr	r3, [pc, #592]	; (8005fe4 <Visible_Analog+0x260>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	9202      	str	r2, [sp, #8]
 8005d98:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005d9c:	9201      	str	r2, [sp, #4]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	9200      	str	r2, [sp, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a90      	ldr	r2, [pc, #576]	; (8005fe8 <Visible_Analog+0x264>)
 8005da6:	211e      	movs	r1, #30
 8005da8:	2078      	movs	r0, #120	; 0x78
 8005daa:	f000 ff55 	bl	8006c58 <ST7735_DrawString>
 8005dae:	e011      	b.n	8005dd4 <Visible_Analog+0x50>
	else if(Status_AIN[0] == 0x00)
 8005db0:	4b8b      	ldr	r3, [pc, #556]	; (8005fe0 <Visible_Analog+0x25c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <Visible_Analog+0x50>
		ST7735_DrawString(120, 30, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005db8:	4b8a      	ldr	r3, [pc, #552]	; (8005fe4 <Visible_Analog+0x260>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	9202      	str	r2, [sp, #8]
 8005dbe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005dc2:	9201      	str	r2, [sp, #4]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	9200      	str	r2, [sp, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a88      	ldr	r2, [pc, #544]	; (8005fec <Visible_Analog+0x268>)
 8005dcc:	211e      	movs	r1, #30
 8005dce:	2078      	movs	r0, #120	; 0x78
 8005dd0:	f000 ff42 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[1] == 0x01)
 8005dd4:	4b82      	ldr	r3, [pc, #520]	; (8005fe0 <Visible_Analog+0x25c>)
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d10e      	bne.n	8005dfa <Visible_Analog+0x76>
		ST7735_DrawString(120, 40, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005ddc:	4b81      	ldr	r3, [pc, #516]	; (8005fe4 <Visible_Analog+0x260>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	9202      	str	r2, [sp, #8]
 8005de2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005de6:	9201      	str	r2, [sp, #4]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	9200      	str	r2, [sp, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a7e      	ldr	r2, [pc, #504]	; (8005fe8 <Visible_Analog+0x264>)
 8005df0:	2128      	movs	r1, #40	; 0x28
 8005df2:	2078      	movs	r0, #120	; 0x78
 8005df4:	f000 ff30 	bl	8006c58 <ST7735_DrawString>
 8005df8:	e011      	b.n	8005e1e <Visible_Analog+0x9a>
	else if(Status_AIN[1] == 0x00)
 8005dfa:	4b79      	ldr	r3, [pc, #484]	; (8005fe0 <Visible_Analog+0x25c>)
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <Visible_Analog+0x9a>
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005e02:	4b78      	ldr	r3, [pc, #480]	; (8005fe4 <Visible_Analog+0x260>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	9202      	str	r2, [sp, #8]
 8005e08:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005e0c:	9201      	str	r2, [sp, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	9200      	str	r2, [sp, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a75      	ldr	r2, [pc, #468]	; (8005fec <Visible_Analog+0x268>)
 8005e16:	2128      	movs	r1, #40	; 0x28
 8005e18:	2078      	movs	r0, #120	; 0x78
 8005e1a:	f000 ff1d 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[2] == 0x01)
 8005e1e:	4b70      	ldr	r3, [pc, #448]	; (8005fe0 <Visible_Analog+0x25c>)
 8005e20:	789b      	ldrb	r3, [r3, #2]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d10e      	bne.n	8005e44 <Visible_Analog+0xc0>
		ST7735_DrawString(120, 50, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005e26:	4b6f      	ldr	r3, [pc, #444]	; (8005fe4 <Visible_Analog+0x260>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	9202      	str	r2, [sp, #8]
 8005e2c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005e30:	9201      	str	r2, [sp, #4]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	9200      	str	r2, [sp, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a6b      	ldr	r2, [pc, #428]	; (8005fe8 <Visible_Analog+0x264>)
 8005e3a:	2132      	movs	r1, #50	; 0x32
 8005e3c:	2078      	movs	r0, #120	; 0x78
 8005e3e:	f000 ff0b 	bl	8006c58 <ST7735_DrawString>
 8005e42:	e011      	b.n	8005e68 <Visible_Analog+0xe4>
	else if(Status_AIN[2] == 0x00)
 8005e44:	4b66      	ldr	r3, [pc, #408]	; (8005fe0 <Visible_Analog+0x25c>)
 8005e46:	789b      	ldrb	r3, [r3, #2]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10d      	bne.n	8005e68 <Visible_Analog+0xe4>
		ST7735_DrawString(120, 50, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005e4c:	4b65      	ldr	r3, [pc, #404]	; (8005fe4 <Visible_Analog+0x260>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	9202      	str	r2, [sp, #8]
 8005e52:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005e56:	9201      	str	r2, [sp, #4]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	9200      	str	r2, [sp, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a63      	ldr	r2, [pc, #396]	; (8005fec <Visible_Analog+0x268>)
 8005e60:	2132      	movs	r1, #50	; 0x32
 8005e62:	2078      	movs	r0, #120	; 0x78
 8005e64:	f000 fef8 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[3] == 0x01)
 8005e68:	4b5d      	ldr	r3, [pc, #372]	; (8005fe0 <Visible_Analog+0x25c>)
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d10e      	bne.n	8005e8e <Visible_Analog+0x10a>
		ST7735_DrawString(120, 60, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005e70:	4b5c      	ldr	r3, [pc, #368]	; (8005fe4 <Visible_Analog+0x260>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	9202      	str	r2, [sp, #8]
 8005e76:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005e7a:	9201      	str	r2, [sp, #4]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	9200      	str	r2, [sp, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a59      	ldr	r2, [pc, #356]	; (8005fe8 <Visible_Analog+0x264>)
 8005e84:	213c      	movs	r1, #60	; 0x3c
 8005e86:	2078      	movs	r0, #120	; 0x78
 8005e88:	f000 fee6 	bl	8006c58 <ST7735_DrawString>
 8005e8c:	e011      	b.n	8005eb2 <Visible_Analog+0x12e>
	else if(Status_AIN[3] == 0x00)
 8005e8e:	4b54      	ldr	r3, [pc, #336]	; (8005fe0 <Visible_Analog+0x25c>)
 8005e90:	78db      	ldrb	r3, [r3, #3]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10d      	bne.n	8005eb2 <Visible_Analog+0x12e>
		ST7735_DrawString(120, 60, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005e96:	4b53      	ldr	r3, [pc, #332]	; (8005fe4 <Visible_Analog+0x260>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	9202      	str	r2, [sp, #8]
 8005e9c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005ea0:	9201      	str	r2, [sp, #4]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	9200      	str	r2, [sp, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a50      	ldr	r2, [pc, #320]	; (8005fec <Visible_Analog+0x268>)
 8005eaa:	213c      	movs	r1, #60	; 0x3c
 8005eac:	2078      	movs	r0, #120	; 0x78
 8005eae:	f000 fed3 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[4] == 0x01)
 8005eb2:	4b4b      	ldr	r3, [pc, #300]	; (8005fe0 <Visible_Analog+0x25c>)
 8005eb4:	791b      	ldrb	r3, [r3, #4]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d10e      	bne.n	8005ed8 <Visible_Analog+0x154>
		ST7735_DrawString(120, 70, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005eba:	4b4a      	ldr	r3, [pc, #296]	; (8005fe4 <Visible_Analog+0x260>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	9202      	str	r2, [sp, #8]
 8005ec0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005ec4:	9201      	str	r2, [sp, #4]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	9200      	str	r2, [sp, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a46      	ldr	r2, [pc, #280]	; (8005fe8 <Visible_Analog+0x264>)
 8005ece:	2146      	movs	r1, #70	; 0x46
 8005ed0:	2078      	movs	r0, #120	; 0x78
 8005ed2:	f000 fec1 	bl	8006c58 <ST7735_DrawString>
 8005ed6:	e011      	b.n	8005efc <Visible_Analog+0x178>
	else if(Status_AIN[4] == 0x00)
 8005ed8:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <Visible_Analog+0x25c>)
 8005eda:	791b      	ldrb	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10d      	bne.n	8005efc <Visible_Analog+0x178>
		ST7735_DrawString(120, 70, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005ee0:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <Visible_Analog+0x260>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	9202      	str	r2, [sp, #8]
 8005ee6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005eea:	9201      	str	r2, [sp, #4]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	9200      	str	r2, [sp, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a3e      	ldr	r2, [pc, #248]	; (8005fec <Visible_Analog+0x268>)
 8005ef4:	2146      	movs	r1, #70	; 0x46
 8005ef6:	2078      	movs	r0, #120	; 0x78
 8005ef8:	f000 feae 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[5] == 0x01)
 8005efc:	4b38      	ldr	r3, [pc, #224]	; (8005fe0 <Visible_Analog+0x25c>)
 8005efe:	795b      	ldrb	r3, [r3, #5]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d10e      	bne.n	8005f22 <Visible_Analog+0x19e>
		ST7735_DrawString(120, 80, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005f04:	4b37      	ldr	r3, [pc, #220]	; (8005fe4 <Visible_Analog+0x260>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	9202      	str	r2, [sp, #8]
 8005f0a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005f0e:	9201      	str	r2, [sp, #4]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	9200      	str	r2, [sp, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a34      	ldr	r2, [pc, #208]	; (8005fe8 <Visible_Analog+0x264>)
 8005f18:	2150      	movs	r1, #80	; 0x50
 8005f1a:	2078      	movs	r0, #120	; 0x78
 8005f1c:	f000 fe9c 	bl	8006c58 <ST7735_DrawString>
 8005f20:	e011      	b.n	8005f46 <Visible_Analog+0x1c2>
	else if(Status_AIN[5] == 0x00)
 8005f22:	4b2f      	ldr	r3, [pc, #188]	; (8005fe0 <Visible_Analog+0x25c>)
 8005f24:	795b      	ldrb	r3, [r3, #5]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10d      	bne.n	8005f46 <Visible_Analog+0x1c2>
		ST7735_DrawString(120, 80, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005f2a:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <Visible_Analog+0x260>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	9202      	str	r2, [sp, #8]
 8005f30:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005f34:	9201      	str	r2, [sp, #4]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	9200      	str	r2, [sp, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	; (8005fec <Visible_Analog+0x268>)
 8005f3e:	2150      	movs	r1, #80	; 0x50
 8005f40:	2078      	movs	r0, #120	; 0x78
 8005f42:	f000 fe89 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[6] == 0x01)
 8005f46:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <Visible_Analog+0x25c>)
 8005f48:	799b      	ldrb	r3, [r3, #6]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d10e      	bne.n	8005f6c <Visible_Analog+0x1e8>
		ST7735_DrawString(120, 90, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005f4e:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <Visible_Analog+0x260>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	9202      	str	r2, [sp, #8]
 8005f54:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005f58:	9201      	str	r2, [sp, #4]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	9200      	str	r2, [sp, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <Visible_Analog+0x264>)
 8005f62:	215a      	movs	r1, #90	; 0x5a
 8005f64:	2078      	movs	r0, #120	; 0x78
 8005f66:	f000 fe77 	bl	8006c58 <ST7735_DrawString>
 8005f6a:	e011      	b.n	8005f90 <Visible_Analog+0x20c>
	else if(Status_AIN[6] == 0x00)
 8005f6c:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <Visible_Analog+0x25c>)
 8005f6e:	799b      	ldrb	r3, [r3, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10d      	bne.n	8005f90 <Visible_Analog+0x20c>
		ST7735_DrawString(120, 90, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005f74:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <Visible_Analog+0x260>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	9202      	str	r2, [sp, #8]
 8005f7a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005f7e:	9201      	str	r2, [sp, #4]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	9200      	str	r2, [sp, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a19      	ldr	r2, [pc, #100]	; (8005fec <Visible_Analog+0x268>)
 8005f88:	215a      	movs	r1, #90	; 0x5a
 8005f8a:	2078      	movs	r0, #120	; 0x78
 8005f8c:	f000 fe64 	bl	8006c58 <ST7735_DrawString>
	if(Status_AIN[7] == 0x01)
 8005f90:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <Visible_Analog+0x25c>)
 8005f92:	79db      	ldrb	r3, [r3, #7]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d10e      	bne.n	8005fb6 <Visible_Analog+0x232>
		ST7735_DrawString(120, 100, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8005f98:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <Visible_Analog+0x260>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	9202      	str	r2, [sp, #8]
 8005f9e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005fa2:	9201      	str	r2, [sp, #4]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	9200      	str	r2, [sp, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a0f      	ldr	r2, [pc, #60]	; (8005fe8 <Visible_Analog+0x264>)
 8005fac:	2164      	movs	r1, #100	; 0x64
 8005fae:	2078      	movs	r0, #120	; 0x78
 8005fb0:	f000 fe52 	bl	8006c58 <ST7735_DrawString>
	else if(Status_AIN[7] == 0x00)
		ST7735_DrawString(120, 100, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
}
 8005fb4:	e011      	b.n	8005fda <Visible_Analog+0x256>
	else if(Status_AIN[7] == 0x00)
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <Visible_Analog+0x25c>)
 8005fb8:	79db      	ldrb	r3, [r3, #7]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10d      	bne.n	8005fda <Visible_Analog+0x256>
		ST7735_DrawString(120, 100, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <Visible_Analog+0x260>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	9202      	str	r2, [sp, #8]
 8005fc4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005fc8:	9201      	str	r2, [sp, #4]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	9200      	str	r2, [sp, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a06      	ldr	r2, [pc, #24]	; (8005fec <Visible_Analog+0x268>)
 8005fd2:	2164      	movs	r1, #100	; 0x64
 8005fd4:	2078      	movs	r0, #120	; 0x78
 8005fd6:	f000 fe3f 	bl	8006c58 <ST7735_DrawString>
}
 8005fda:	bf00      	nop
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000128 	.word	0x20000128
 8005fe4:	20000000 	.word	0x20000000
 8005fe8:	0800bfc8 	.word	0x0800bfc8
 8005fec:	0800bfcc 	.word	0x0800bfcc

08005ff0 <Visible_Digital>:
//Функция отображения состояния меню цифровых входов
void Visible_Digital(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b090      	sub	sp, #64	; 0x40
 8005ff4:	af00      	add	r7, sp, #0
	if(Status_DIN[0] == 0x01)
 8005ff6:	4b76      	ldr	r3, [pc, #472]	; (80061d0 <Visible_Digital+0x1e0>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d10a      	bne.n	8006014 <Visible_Digital+0x24>
	{
		uint16_t a = 29, b = 37;
 8005ffe:	231d      	movs	r3, #29
 8006000:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006002:	2325      	movs	r3, #37	; 0x25
 8006004:	873b      	strh	r3, [r7, #56]	; 0x38
		Rising(a, b);
 8006006:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006008:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800600a:	4611      	mov	r1, r2
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa f969 	bl	80002e4 <Rising>
 8006012:	e00d      	b.n	8006030 <Visible_Digital+0x40>
	}
	else if(Status_DIN[0] == 0x00)
 8006014:	4b6e      	ldr	r3, [pc, #440]	; (80061d0 <Visible_Digital+0x1e0>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <Visible_Digital+0x40>
	{
		uint16_t a = 29, b = 37;
 800601c:	231d      	movs	r3, #29
 800601e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006020:	2325      	movs	r3, #37	; 0x25
 8006022:	87bb      	strh	r3, [r7, #60]	; 0x3c
		Faling(b, a);
 8006024:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006026:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f7fa f9a5 	bl	800037a <Faling>
	}
	if(Status_DIN[1] == 0x01)
 8006030:	4b67      	ldr	r3, [pc, #412]	; (80061d0 <Visible_Digital+0x1e0>)
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d10a      	bne.n	800604e <Visible_Digital+0x5e>
	{
		uint16_t a = 39, b = 47;
 8006038:	2327      	movs	r3, #39	; 0x27
 800603a:	867b      	strh	r3, [r7, #50]	; 0x32
 800603c:	232f      	movs	r3, #47	; 0x2f
 800603e:	863b      	strh	r3, [r7, #48]	; 0x30
		Rising(a, b);
 8006040:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006042:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f7fa f94c 	bl	80002e4 <Rising>
 800604c:	e00d      	b.n	800606a <Visible_Digital+0x7a>
	}
	else if(Status_DIN[1] == 0x00)
 800604e:	4b60      	ldr	r3, [pc, #384]	; (80061d0 <Visible_Digital+0x1e0>)
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <Visible_Digital+0x7a>
	{
		uint16_t a = 39, b = 47;
 8006056:	2327      	movs	r3, #39	; 0x27
 8006058:	86fb      	strh	r3, [r7, #54]	; 0x36
 800605a:	232f      	movs	r3, #47	; 0x2f
 800605c:	86bb      	strh	r3, [r7, #52]	; 0x34
		Faling(b, a);
 800605e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006060:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f7fa f988 	bl	800037a <Faling>
	}
	if(Status_DIN[2] == 0x01)
 800606a:	4b59      	ldr	r3, [pc, #356]	; (80061d0 <Visible_Digital+0x1e0>)
 800606c:	789b      	ldrb	r3, [r3, #2]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10a      	bne.n	8006088 <Visible_Digital+0x98>
	{
		uint16_t a = 49, b = 57;
 8006072:	2331      	movs	r3, #49	; 0x31
 8006074:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006076:	2339      	movs	r3, #57	; 0x39
 8006078:	853b      	strh	r3, [r7, #40]	; 0x28
		Rising(a, b);
 800607a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800607c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800607e:	4611      	mov	r1, r2
 8006080:	4618      	mov	r0, r3
 8006082:	f7fa f92f 	bl	80002e4 <Rising>
 8006086:	e00d      	b.n	80060a4 <Visible_Digital+0xb4>
	}
	else if(Status_DIN[2] == 0x00)
 8006088:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <Visible_Digital+0x1e0>)
 800608a:	789b      	ldrb	r3, [r3, #2]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <Visible_Digital+0xb4>
	{
		uint16_t a = 49, b = 57;
 8006090:	2331      	movs	r3, #49	; 0x31
 8006092:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006094:	2339      	movs	r3, #57	; 0x39
 8006096:	85bb      	strh	r3, [r7, #44]	; 0x2c
		Faling(b, a);
 8006098:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800609a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fa f96b 	bl	800037a <Faling>
	}
	if(Status_DIN[3] == 0x01)
 80060a4:	4b4a      	ldr	r3, [pc, #296]	; (80061d0 <Visible_Digital+0x1e0>)
 80060a6:	78db      	ldrb	r3, [r3, #3]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d10a      	bne.n	80060c2 <Visible_Digital+0xd2>
	{
		uint16_t a = 59, b = 67;
 80060ac:	233b      	movs	r3, #59	; 0x3b
 80060ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80060b0:	2343      	movs	r3, #67	; 0x43
 80060b2:	843b      	strh	r3, [r7, #32]
		Rising(a, b);
 80060b4:	8c3a      	ldrh	r2, [r7, #32]
 80060b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060b8:	4611      	mov	r1, r2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fa f912 	bl	80002e4 <Rising>
 80060c0:	e00d      	b.n	80060de <Visible_Digital+0xee>
	}
	else if(Status_DIN[3] == 0x00)
 80060c2:	4b43      	ldr	r3, [pc, #268]	; (80061d0 <Visible_Digital+0x1e0>)
 80060c4:	78db      	ldrb	r3, [r3, #3]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <Visible_Digital+0xee>
	{
		uint16_t a = 59, b = 67;
 80060ca:	233b      	movs	r3, #59	; 0x3b
 80060cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80060ce:	2343      	movs	r3, #67	; 0x43
 80060d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		Faling(b, a);
 80060d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fa f94e 	bl	800037a <Faling>
	}
	if(Status_DIN[4] == 0x01)
 80060de:	4b3c      	ldr	r3, [pc, #240]	; (80061d0 <Visible_Digital+0x1e0>)
 80060e0:	791b      	ldrb	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10a      	bne.n	80060fc <Visible_Digital+0x10c>
	{
		uint16_t a = 69, b = 77;
 80060e6:	2345      	movs	r3, #69	; 0x45
 80060e8:	837b      	strh	r3, [r7, #26]
 80060ea:	234d      	movs	r3, #77	; 0x4d
 80060ec:	833b      	strh	r3, [r7, #24]
		Rising(a, b);
 80060ee:	8b3a      	ldrh	r2, [r7, #24]
 80060f0:	8b7b      	ldrh	r3, [r7, #26]
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fa f8f5 	bl	80002e4 <Rising>
 80060fa:	e00d      	b.n	8006118 <Visible_Digital+0x128>
	}
	else if(Status_DIN[4] == 0x00)
 80060fc:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <Visible_Digital+0x1e0>)
 80060fe:	791b      	ldrb	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d109      	bne.n	8006118 <Visible_Digital+0x128>
	{
		uint16_t a = 69, b = 77;
 8006104:	2345      	movs	r3, #69	; 0x45
 8006106:	83fb      	strh	r3, [r7, #30]
 8006108:	234d      	movs	r3, #77	; 0x4d
 800610a:	83bb      	strh	r3, [r7, #28]
		Faling(b, a);
 800610c:	8bfa      	ldrh	r2, [r7, #30]
 800610e:	8bbb      	ldrh	r3, [r7, #28]
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f7fa f931 	bl	800037a <Faling>
	}
	if(Status_DIN[5] == 0x01)
 8006118:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <Visible_Digital+0x1e0>)
 800611a:	795b      	ldrb	r3, [r3, #5]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10a      	bne.n	8006136 <Visible_Digital+0x146>
	{
		uint16_t a = 79, b = 87;
 8006120:	234f      	movs	r3, #79	; 0x4f
 8006122:	827b      	strh	r3, [r7, #18]
 8006124:	2357      	movs	r3, #87	; 0x57
 8006126:	823b      	strh	r3, [r7, #16]
		Rising(a, b);
 8006128:	8a3a      	ldrh	r2, [r7, #16]
 800612a:	8a7b      	ldrh	r3, [r7, #18]
 800612c:	4611      	mov	r1, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa f8d8 	bl	80002e4 <Rising>
 8006134:	e00d      	b.n	8006152 <Visible_Digital+0x162>
	}
	else if(Status_DIN[5] == 0x00)
 8006136:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <Visible_Digital+0x1e0>)
 8006138:	795b      	ldrb	r3, [r3, #5]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d109      	bne.n	8006152 <Visible_Digital+0x162>
	{
		uint16_t a = 79, b = 87;
 800613e:	234f      	movs	r3, #79	; 0x4f
 8006140:	82fb      	strh	r3, [r7, #22]
 8006142:	2357      	movs	r3, #87	; 0x57
 8006144:	82bb      	strh	r3, [r7, #20]
		Faling(b, a);
 8006146:	8afa      	ldrh	r2, [r7, #22]
 8006148:	8abb      	ldrh	r3, [r7, #20]
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f7fa f914 	bl	800037a <Faling>
	}
	if(Status_DIN[6] == 0x01)
 8006152:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <Visible_Digital+0x1e0>)
 8006154:	799b      	ldrb	r3, [r3, #6]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10a      	bne.n	8006170 <Visible_Digital+0x180>
	{
		uint16_t a = 89, b = 97;
 800615a:	2359      	movs	r3, #89	; 0x59
 800615c:	817b      	strh	r3, [r7, #10]
 800615e:	2361      	movs	r3, #97	; 0x61
 8006160:	813b      	strh	r3, [r7, #8]
		Rising(a, b);
 8006162:	893a      	ldrh	r2, [r7, #8]
 8006164:	897b      	ldrh	r3, [r7, #10]
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f7fa f8bb 	bl	80002e4 <Rising>
 800616e:	e00d      	b.n	800618c <Visible_Digital+0x19c>
	}
	else if(Status_DIN[6] == 0x00)
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <Visible_Digital+0x1e0>)
 8006172:	799b      	ldrb	r3, [r3, #6]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <Visible_Digital+0x19c>
	{
		uint16_t a = 89, b = 97;
 8006178:	2359      	movs	r3, #89	; 0x59
 800617a:	81fb      	strh	r3, [r7, #14]
 800617c:	2361      	movs	r3, #97	; 0x61
 800617e:	81bb      	strh	r3, [r7, #12]
		Faling(b, a);
 8006180:	89fa      	ldrh	r2, [r7, #14]
 8006182:	89bb      	ldrh	r3, [r7, #12]
 8006184:	4611      	mov	r1, r2
 8006186:	4618      	mov	r0, r3
 8006188:	f7fa f8f7 	bl	800037a <Faling>
	}
	if(Status_DIN[7] == 0x01)
 800618c:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <Visible_Digital+0x1e0>)
 800618e:	79db      	ldrb	r3, [r3, #7]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10a      	bne.n	80061aa <Visible_Digital+0x1ba>
	{
		uint16_t a = 99, b = 107;
 8006194:	2363      	movs	r3, #99	; 0x63
 8006196:	807b      	strh	r3, [r7, #2]
 8006198:	236b      	movs	r3, #107	; 0x6b
 800619a:	803b      	strh	r3, [r7, #0]
		Rising(a, b);
 800619c:	883a      	ldrh	r2, [r7, #0]
 800619e:	887b      	ldrh	r3, [r7, #2]
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa f89e 	bl	80002e4 <Rising>
	else if(Status_DIN[7] == 0x00)
	{
		uint16_t a = 99, b = 107;
		Faling(b, a);
	}
}
 80061a8:	e00d      	b.n	80061c6 <Visible_Digital+0x1d6>
	else if(Status_DIN[7] == 0x00)
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <Visible_Digital+0x1e0>)
 80061ac:	79db      	ldrb	r3, [r3, #7]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <Visible_Digital+0x1d6>
		uint16_t a = 99, b = 107;
 80061b2:	2363      	movs	r3, #99	; 0x63
 80061b4:	80fb      	strh	r3, [r7, #6]
 80061b6:	236b      	movs	r3, #107	; 0x6b
 80061b8:	80bb      	strh	r3, [r7, #4]
		Faling(b, a);
 80061ba:	88fa      	ldrh	r2, [r7, #6]
 80061bc:	88bb      	ldrh	r3, [r7, #4]
 80061be:	4611      	mov	r1, r2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fa f8da 	bl	800037a <Faling>
}
 80061c6:	bf00      	nop
 80061c8:	3740      	adds	r7, #64	; 0x40
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000130 	.word	0x20000130

080061d4 <Visible_PWM>:
//Функция отображения состояния меню выходов ШИМ
void Visible_PWM(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af04      	add	r7, sp, #16
	if(Status_PWM[0] == 0x01)
 80061da:	4b4b      	ldr	r3, [pc, #300]	; (8006308 <Visible_PWM+0x134>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d10e      	bne.n	8006200 <Visible_PWM+0x2c>
		ST7735_DrawString(120, 30, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80061e2:	4b4a      	ldr	r3, [pc, #296]	; (800630c <Visible_PWM+0x138>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	9202      	str	r2, [sp, #8]
 80061e8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80061ec:	9201      	str	r2, [sp, #4]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	9200      	str	r2, [sp, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a46      	ldr	r2, [pc, #280]	; (8006310 <Visible_PWM+0x13c>)
 80061f6:	211e      	movs	r1, #30
 80061f8:	2078      	movs	r0, #120	; 0x78
 80061fa:	f000 fd2d 	bl	8006c58 <ST7735_DrawString>
 80061fe:	e011      	b.n	8006224 <Visible_PWM+0x50>
	else if(Status_PWM[0] == 0x00)
 8006200:	4b41      	ldr	r3, [pc, #260]	; (8006308 <Visible_PWM+0x134>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10d      	bne.n	8006224 <Visible_PWM+0x50>
		ST7735_DrawString(120, 30, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8006208:	4b40      	ldr	r3, [pc, #256]	; (800630c <Visible_PWM+0x138>)
 800620a:	2200      	movs	r2, #0
 800620c:	9202      	str	r2, [sp, #8]
 800620e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006212:	9201      	str	r2, [sp, #4]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	9200      	str	r2, [sp, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3e      	ldr	r2, [pc, #248]	; (8006314 <Visible_PWM+0x140>)
 800621c:	211e      	movs	r1, #30
 800621e:	2078      	movs	r0, #120	; 0x78
 8006220:	f000 fd1a 	bl	8006c58 <ST7735_DrawString>
	if(Status_PWM[1] == 0x01)
 8006224:	4b38      	ldr	r3, [pc, #224]	; (8006308 <Visible_PWM+0x134>)
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d10e      	bne.n	800624a <Visible_PWM+0x76>
		ST7735_DrawString(120, 40, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800622c:	4b37      	ldr	r3, [pc, #220]	; (800630c <Visible_PWM+0x138>)
 800622e:	2200      	movs	r2, #0
 8006230:	9202      	str	r2, [sp, #8]
 8006232:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006236:	9201      	str	r2, [sp, #4]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	9200      	str	r2, [sp, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a34      	ldr	r2, [pc, #208]	; (8006310 <Visible_PWM+0x13c>)
 8006240:	2128      	movs	r1, #40	; 0x28
 8006242:	2078      	movs	r0, #120	; 0x78
 8006244:	f000 fd08 	bl	8006c58 <ST7735_DrawString>
 8006248:	e011      	b.n	800626e <Visible_PWM+0x9a>
	else if(Status_PWM[1] == 0x00)
 800624a:	4b2f      	ldr	r3, [pc, #188]	; (8006308 <Visible_PWM+0x134>)
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10d      	bne.n	800626e <Visible_PWM+0x9a>
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8006252:	4b2e      	ldr	r3, [pc, #184]	; (800630c <Visible_PWM+0x138>)
 8006254:	2200      	movs	r2, #0
 8006256:	9202      	str	r2, [sp, #8]
 8006258:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800625c:	9201      	str	r2, [sp, #4]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	9200      	str	r2, [sp, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2b      	ldr	r2, [pc, #172]	; (8006314 <Visible_PWM+0x140>)
 8006266:	2128      	movs	r1, #40	; 0x28
 8006268:	2078      	movs	r0, #120	; 0x78
 800626a:	f000 fcf5 	bl	8006c58 <ST7735_DrawString>
	if(Status_PWM[2] == 0x01)
 800626e:	4b26      	ldr	r3, [pc, #152]	; (8006308 <Visible_PWM+0x134>)
 8006270:	789b      	ldrb	r3, [r3, #2]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d10e      	bne.n	8006294 <Visible_PWM+0xc0>
		ST7735_DrawString(120, 50, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8006276:	4b25      	ldr	r3, [pc, #148]	; (800630c <Visible_PWM+0x138>)
 8006278:	2200      	movs	r2, #0
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006280:	9201      	str	r2, [sp, #4]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	9200      	str	r2, [sp, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a21      	ldr	r2, [pc, #132]	; (8006310 <Visible_PWM+0x13c>)
 800628a:	2132      	movs	r1, #50	; 0x32
 800628c:	2078      	movs	r0, #120	; 0x78
 800628e:	f000 fce3 	bl	8006c58 <ST7735_DrawString>
 8006292:	e011      	b.n	80062b8 <Visible_PWM+0xe4>
	else if(Status_PWM[2] == 0x00)
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <Visible_PWM+0x134>)
 8006296:	789b      	ldrb	r3, [r3, #2]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10d      	bne.n	80062b8 <Visible_PWM+0xe4>
		ST7735_DrawString(120, 50, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 800629c:	4b1b      	ldr	r3, [pc, #108]	; (800630c <Visible_PWM+0x138>)
 800629e:	2200      	movs	r2, #0
 80062a0:	9202      	str	r2, [sp, #8]
 80062a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80062a6:	9201      	str	r2, [sp, #4]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	9200      	str	r2, [sp, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a19      	ldr	r2, [pc, #100]	; (8006314 <Visible_PWM+0x140>)
 80062b0:	2132      	movs	r1, #50	; 0x32
 80062b2:	2078      	movs	r0, #120	; 0x78
 80062b4:	f000 fcd0 	bl	8006c58 <ST7735_DrawString>
	if(Status_PWM[3] == 0x01)
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <Visible_PWM+0x134>)
 80062ba:	78db      	ldrb	r3, [r3, #3]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d10e      	bne.n	80062de <Visible_PWM+0x10a>
		ST7735_DrawString(120, 60, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <Visible_PWM+0x138>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	9202      	str	r2, [sp, #8]
 80062c6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80062ca:	9201      	str	r2, [sp, #4]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	9200      	str	r2, [sp, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a0f      	ldr	r2, [pc, #60]	; (8006310 <Visible_PWM+0x13c>)
 80062d4:	213c      	movs	r1, #60	; 0x3c
 80062d6:	2078      	movs	r0, #120	; 0x78
 80062d8:	f000 fcbe 	bl	8006c58 <ST7735_DrawString>
	else if(Status_PWM[3] == 0x00)
		ST7735_DrawString(120, 60, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
}
 80062dc:	e011      	b.n	8006302 <Visible_PWM+0x12e>
	else if(Status_PWM[3] == 0x00)
 80062de:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <Visible_PWM+0x134>)
 80062e0:	78db      	ldrb	r3, [r3, #3]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10d      	bne.n	8006302 <Visible_PWM+0x12e>
		ST7735_DrawString(120, 60, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <Visible_PWM+0x138>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	9202      	str	r2, [sp, #8]
 80062ec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80062f0:	9201      	str	r2, [sp, #4]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	9200      	str	r2, [sp, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a06      	ldr	r2, [pc, #24]	; (8006314 <Visible_PWM+0x140>)
 80062fa:	213c      	movs	r1, #60	; 0x3c
 80062fc:	2078      	movs	r0, #120	; 0x78
 80062fe:	f000 fcab 	bl	8006c58 <ST7735_DrawString>
}
 8006302:	bf00      	nop
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20000138 	.word	0x20000138
 800630c:	20000000 	.word	0x20000000
 8006310:	0800bfc8 	.word	0x0800bfc8
 8006314:	0800bfcc 	.word	0x0800bfcc

08006318 <Visible_1Wire>:
//Функция отображения состояния меню выходов интерфейса 1-Wire
void Visible_1Wire(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af04      	add	r7, sp, #16
	if(Status_1WR[0] == 0x01)
 800631e:	4b26      	ldr	r3, [pc, #152]	; (80063b8 <Visible_1Wire+0xa0>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10e      	bne.n	8006344 <Visible_1Wire+0x2c>
		ST7735_DrawString(120, 30, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8006326:	4b25      	ldr	r3, [pc, #148]	; (80063bc <Visible_1Wire+0xa4>)
 8006328:	2200      	movs	r2, #0
 800632a:	9202      	str	r2, [sp, #8]
 800632c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006330:	9201      	str	r2, [sp, #4]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	9200      	str	r2, [sp, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <Visible_1Wire+0xa8>)
 800633a:	211e      	movs	r1, #30
 800633c:	2078      	movs	r0, #120	; 0x78
 800633e:	f000 fc8b 	bl	8006c58 <ST7735_DrawString>
 8006342:	e011      	b.n	8006368 <Visible_1Wire+0x50>
	else if(Status_1WR[0] == 0x00)
 8006344:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <Visible_1Wire+0xa0>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10d      	bne.n	8006368 <Visible_1Wire+0x50>
		ST7735_DrawString(120, 30, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <Visible_1Wire+0xa4>)
 800634e:	2200      	movs	r2, #0
 8006350:	9202      	str	r2, [sp, #8]
 8006352:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006356:	9201      	str	r2, [sp, #4]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	9200      	str	r2, [sp, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <Visible_1Wire+0xac>)
 8006360:	211e      	movs	r1, #30
 8006362:	2078      	movs	r0, #120	; 0x78
 8006364:	f000 fc78 	bl	8006c58 <ST7735_DrawString>
	if(Status_1WR[1] == 0x01)
 8006368:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <Visible_1Wire+0xa0>)
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d10e      	bne.n	800638e <Visible_1Wire+0x76>
		ST7735_DrawString(120, 40, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <Visible_1Wire+0xa4>)
 8006372:	2200      	movs	r2, #0
 8006374:	9202      	str	r2, [sp, #8]
 8006376:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800637a:	9201      	str	r2, [sp, #4]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	9200      	str	r2, [sp, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a0f      	ldr	r2, [pc, #60]	; (80063c0 <Visible_1Wire+0xa8>)
 8006384:	2128      	movs	r1, #40	; 0x28
 8006386:	2078      	movs	r0, #120	; 0x78
 8006388:	f000 fc66 	bl	8006c58 <ST7735_DrawString>
	else if(Status_1WR[1] == 0x00)
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
}
 800638c:	e011      	b.n	80063b2 <Visible_1Wire+0x9a>
	else if(Status_1WR[1] == 0x00)
 800638e:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <Visible_1Wire+0xa0>)
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10d      	bne.n	80063b2 <Visible_1Wire+0x9a>
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <Visible_1Wire+0xa4>)
 8006398:	2200      	movs	r2, #0
 800639a:	9202      	str	r2, [sp, #8]
 800639c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80063a0:	9201      	str	r2, [sp, #4]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	9200      	str	r2, [sp, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a06      	ldr	r2, [pc, #24]	; (80063c4 <Visible_1Wire+0xac>)
 80063aa:	2128      	movs	r1, #40	; 0x28
 80063ac:	2078      	movs	r0, #120	; 0x78
 80063ae:	f000 fc53 	bl	8006c58 <ST7735_DrawString>
}
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000148 	.word	0x20000148
 80063bc:	20000000 	.word	0x20000000
 80063c0:	0800bfc8 	.word	0x0800bfc8
 80063c4:	0800bfcc 	.word	0x0800bfcc

080063c8 <Visible_OpenDrain>:
//Функция отображения состояния меню выходов открытый коллектор
void Visible_OpenDrain(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af04      	add	r7, sp, #16
	if(Status_OCD[0] == 0x01)
 80063ce:	4b95      	ldr	r3, [pc, #596]	; (8006624 <Visible_OpenDrain+0x25c>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d10e      	bne.n	80063f4 <Visible_OpenDrain+0x2c>
		ST7735_DrawString(120, 30, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80063d6:	4b94      	ldr	r3, [pc, #592]	; (8006628 <Visible_OpenDrain+0x260>)
 80063d8:	2200      	movs	r2, #0
 80063da:	9202      	str	r2, [sp, #8]
 80063dc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80063e0:	9201      	str	r2, [sp, #4]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	9200      	str	r2, [sp, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a90      	ldr	r2, [pc, #576]	; (800662c <Visible_OpenDrain+0x264>)
 80063ea:	211e      	movs	r1, #30
 80063ec:	2078      	movs	r0, #120	; 0x78
 80063ee:	f000 fc33 	bl	8006c58 <ST7735_DrawString>
 80063f2:	e011      	b.n	8006418 <Visible_OpenDrain+0x50>
	else if(Status_OCD[0] == 0x00)
 80063f4:	4b8b      	ldr	r3, [pc, #556]	; (8006624 <Visible_OpenDrain+0x25c>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10d      	bne.n	8006418 <Visible_OpenDrain+0x50>
		ST7735_DrawString(120, 30, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80063fc:	4b8a      	ldr	r3, [pc, #552]	; (8006628 <Visible_OpenDrain+0x260>)
 80063fe:	2200      	movs	r2, #0
 8006400:	9202      	str	r2, [sp, #8]
 8006402:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006406:	9201      	str	r2, [sp, #4]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	9200      	str	r2, [sp, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a88      	ldr	r2, [pc, #544]	; (8006630 <Visible_OpenDrain+0x268>)
 8006410:	211e      	movs	r1, #30
 8006412:	2078      	movs	r0, #120	; 0x78
 8006414:	f000 fc20 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[1] == 0x01)
 8006418:	4b82      	ldr	r3, [pc, #520]	; (8006624 <Visible_OpenDrain+0x25c>)
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d10e      	bne.n	800643e <Visible_OpenDrain+0x76>
		ST7735_DrawString(120, 40, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8006420:	4b81      	ldr	r3, [pc, #516]	; (8006628 <Visible_OpenDrain+0x260>)
 8006422:	2200      	movs	r2, #0
 8006424:	9202      	str	r2, [sp, #8]
 8006426:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	9200      	str	r2, [sp, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a7e      	ldr	r2, [pc, #504]	; (800662c <Visible_OpenDrain+0x264>)
 8006434:	2128      	movs	r1, #40	; 0x28
 8006436:	2078      	movs	r0, #120	; 0x78
 8006438:	f000 fc0e 	bl	8006c58 <ST7735_DrawString>
 800643c:	e011      	b.n	8006462 <Visible_OpenDrain+0x9a>
	else if(Status_OCD[1] == 0x00)
 800643e:	4b79      	ldr	r3, [pc, #484]	; (8006624 <Visible_OpenDrain+0x25c>)
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10d      	bne.n	8006462 <Visible_OpenDrain+0x9a>
		ST7735_DrawString(120, 40, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8006446:	4b78      	ldr	r3, [pc, #480]	; (8006628 <Visible_OpenDrain+0x260>)
 8006448:	2200      	movs	r2, #0
 800644a:	9202      	str	r2, [sp, #8]
 800644c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006450:	9201      	str	r2, [sp, #4]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	9200      	str	r2, [sp, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a75      	ldr	r2, [pc, #468]	; (8006630 <Visible_OpenDrain+0x268>)
 800645a:	2128      	movs	r1, #40	; 0x28
 800645c:	2078      	movs	r0, #120	; 0x78
 800645e:	f000 fbfb 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[2] == 0x01)
 8006462:	4b70      	ldr	r3, [pc, #448]	; (8006624 <Visible_OpenDrain+0x25c>)
 8006464:	789b      	ldrb	r3, [r3, #2]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10e      	bne.n	8006488 <Visible_OpenDrain+0xc0>
		ST7735_DrawString(120, 50, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800646a:	4b6f      	ldr	r3, [pc, #444]	; (8006628 <Visible_OpenDrain+0x260>)
 800646c:	2200      	movs	r2, #0
 800646e:	9202      	str	r2, [sp, #8]
 8006470:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006474:	9201      	str	r2, [sp, #4]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	9200      	str	r2, [sp, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a6b      	ldr	r2, [pc, #428]	; (800662c <Visible_OpenDrain+0x264>)
 800647e:	2132      	movs	r1, #50	; 0x32
 8006480:	2078      	movs	r0, #120	; 0x78
 8006482:	f000 fbe9 	bl	8006c58 <ST7735_DrawString>
 8006486:	e011      	b.n	80064ac <Visible_OpenDrain+0xe4>
	else if(Status_OCD[2] == 0x00)
 8006488:	4b66      	ldr	r3, [pc, #408]	; (8006624 <Visible_OpenDrain+0x25c>)
 800648a:	789b      	ldrb	r3, [r3, #2]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10d      	bne.n	80064ac <Visible_OpenDrain+0xe4>
		ST7735_DrawString(120, 50, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8006490:	4b65      	ldr	r3, [pc, #404]	; (8006628 <Visible_OpenDrain+0x260>)
 8006492:	2200      	movs	r2, #0
 8006494:	9202      	str	r2, [sp, #8]
 8006496:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800649a:	9201      	str	r2, [sp, #4]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	9200      	str	r2, [sp, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a63      	ldr	r2, [pc, #396]	; (8006630 <Visible_OpenDrain+0x268>)
 80064a4:	2132      	movs	r1, #50	; 0x32
 80064a6:	2078      	movs	r0, #120	; 0x78
 80064a8:	f000 fbd6 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[3] == 0x01)
 80064ac:	4b5d      	ldr	r3, [pc, #372]	; (8006624 <Visible_OpenDrain+0x25c>)
 80064ae:	78db      	ldrb	r3, [r3, #3]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d10e      	bne.n	80064d2 <Visible_OpenDrain+0x10a>
		ST7735_DrawString(120, 60, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80064b4:	4b5c      	ldr	r3, [pc, #368]	; (8006628 <Visible_OpenDrain+0x260>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80064be:	9201      	str	r2, [sp, #4]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	9200      	str	r2, [sp, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a59      	ldr	r2, [pc, #356]	; (800662c <Visible_OpenDrain+0x264>)
 80064c8:	213c      	movs	r1, #60	; 0x3c
 80064ca:	2078      	movs	r0, #120	; 0x78
 80064cc:	f000 fbc4 	bl	8006c58 <ST7735_DrawString>
 80064d0:	e011      	b.n	80064f6 <Visible_OpenDrain+0x12e>
	else if(Status_OCD[3] == 0x00)
 80064d2:	4b54      	ldr	r3, [pc, #336]	; (8006624 <Visible_OpenDrain+0x25c>)
 80064d4:	78db      	ldrb	r3, [r3, #3]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10d      	bne.n	80064f6 <Visible_OpenDrain+0x12e>
		ST7735_DrawString(120, 60, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80064da:	4b53      	ldr	r3, [pc, #332]	; (8006628 <Visible_OpenDrain+0x260>)
 80064dc:	2200      	movs	r2, #0
 80064de:	9202      	str	r2, [sp, #8]
 80064e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80064e4:	9201      	str	r2, [sp, #4]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	9200      	str	r2, [sp, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a50      	ldr	r2, [pc, #320]	; (8006630 <Visible_OpenDrain+0x268>)
 80064ee:	213c      	movs	r1, #60	; 0x3c
 80064f0:	2078      	movs	r0, #120	; 0x78
 80064f2:	f000 fbb1 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[4] == 0x01)
 80064f6:	4b4b      	ldr	r3, [pc, #300]	; (8006624 <Visible_OpenDrain+0x25c>)
 80064f8:	791b      	ldrb	r3, [r3, #4]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10e      	bne.n	800651c <Visible_OpenDrain+0x154>
		ST7735_DrawString(120, 70, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80064fe:	4b4a      	ldr	r3, [pc, #296]	; (8006628 <Visible_OpenDrain+0x260>)
 8006500:	2200      	movs	r2, #0
 8006502:	9202      	str	r2, [sp, #8]
 8006504:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006508:	9201      	str	r2, [sp, #4]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	9200      	str	r2, [sp, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a46      	ldr	r2, [pc, #280]	; (800662c <Visible_OpenDrain+0x264>)
 8006512:	2146      	movs	r1, #70	; 0x46
 8006514:	2078      	movs	r0, #120	; 0x78
 8006516:	f000 fb9f 	bl	8006c58 <ST7735_DrawString>
 800651a:	e011      	b.n	8006540 <Visible_OpenDrain+0x178>
	else if(Status_OCD[4] == 0x00)
 800651c:	4b41      	ldr	r3, [pc, #260]	; (8006624 <Visible_OpenDrain+0x25c>)
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10d      	bne.n	8006540 <Visible_OpenDrain+0x178>
		ST7735_DrawString(120, 70, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8006524:	4b40      	ldr	r3, [pc, #256]	; (8006628 <Visible_OpenDrain+0x260>)
 8006526:	2200      	movs	r2, #0
 8006528:	9202      	str	r2, [sp, #8]
 800652a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800652e:	9201      	str	r2, [sp, #4]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	9200      	str	r2, [sp, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a3e      	ldr	r2, [pc, #248]	; (8006630 <Visible_OpenDrain+0x268>)
 8006538:	2146      	movs	r1, #70	; 0x46
 800653a:	2078      	movs	r0, #120	; 0x78
 800653c:	f000 fb8c 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[5] == 0x01)
 8006540:	4b38      	ldr	r3, [pc, #224]	; (8006624 <Visible_OpenDrain+0x25c>)
 8006542:	795b      	ldrb	r3, [r3, #5]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10e      	bne.n	8006566 <Visible_OpenDrain+0x19e>
		ST7735_DrawString(120, 80, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8006548:	4b37      	ldr	r3, [pc, #220]	; (8006628 <Visible_OpenDrain+0x260>)
 800654a:	2200      	movs	r2, #0
 800654c:	9202      	str	r2, [sp, #8]
 800654e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006552:	9201      	str	r2, [sp, #4]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	9200      	str	r2, [sp, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a34      	ldr	r2, [pc, #208]	; (800662c <Visible_OpenDrain+0x264>)
 800655c:	2150      	movs	r1, #80	; 0x50
 800655e:	2078      	movs	r0, #120	; 0x78
 8006560:	f000 fb7a 	bl	8006c58 <ST7735_DrawString>
 8006564:	e011      	b.n	800658a <Visible_OpenDrain+0x1c2>
	else if(Status_OCD[5] == 0x00)
 8006566:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <Visible_OpenDrain+0x25c>)
 8006568:	795b      	ldrb	r3, [r3, #5]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10d      	bne.n	800658a <Visible_OpenDrain+0x1c2>
		ST7735_DrawString(120, 80, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 800656e:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <Visible_OpenDrain+0x260>)
 8006570:	2200      	movs	r2, #0
 8006572:	9202      	str	r2, [sp, #8]
 8006574:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006578:	9201      	str	r2, [sp, #4]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	9200      	str	r2, [sp, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2b      	ldr	r2, [pc, #172]	; (8006630 <Visible_OpenDrain+0x268>)
 8006582:	2150      	movs	r1, #80	; 0x50
 8006584:	2078      	movs	r0, #120	; 0x78
 8006586:	f000 fb67 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[6] == 0x01)
 800658a:	4b26      	ldr	r3, [pc, #152]	; (8006624 <Visible_OpenDrain+0x25c>)
 800658c:	799b      	ldrb	r3, [r3, #6]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10e      	bne.n	80065b0 <Visible_OpenDrain+0x1e8>
		ST7735_DrawString(120, 90, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8006592:	4b25      	ldr	r3, [pc, #148]	; (8006628 <Visible_OpenDrain+0x260>)
 8006594:	2200      	movs	r2, #0
 8006596:	9202      	str	r2, [sp, #8]
 8006598:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800659c:	9201      	str	r2, [sp, #4]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	9200      	str	r2, [sp, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a21      	ldr	r2, [pc, #132]	; (800662c <Visible_OpenDrain+0x264>)
 80065a6:	215a      	movs	r1, #90	; 0x5a
 80065a8:	2078      	movs	r0, #120	; 0x78
 80065aa:	f000 fb55 	bl	8006c58 <ST7735_DrawString>
 80065ae:	e011      	b.n	80065d4 <Visible_OpenDrain+0x20c>
	else if(Status_OCD[6] == 0x00)
 80065b0:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <Visible_OpenDrain+0x25c>)
 80065b2:	799b      	ldrb	r3, [r3, #6]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10d      	bne.n	80065d4 <Visible_OpenDrain+0x20c>
		ST7735_DrawString(120, 90, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <Visible_OpenDrain+0x260>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	9202      	str	r2, [sp, #8]
 80065be:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80065c2:	9201      	str	r2, [sp, #4]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	9200      	str	r2, [sp, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a19      	ldr	r2, [pc, #100]	; (8006630 <Visible_OpenDrain+0x268>)
 80065cc:	215a      	movs	r1, #90	; 0x5a
 80065ce:	2078      	movs	r0, #120	; 0x78
 80065d0:	f000 fb42 	bl	8006c58 <ST7735_DrawString>
	if(Status_OCD[7] == 0x01)
 80065d4:	4b13      	ldr	r3, [pc, #76]	; (8006624 <Visible_OpenDrain+0x25c>)
 80065d6:	79db      	ldrb	r3, [r3, #7]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d10e      	bne.n	80065fa <Visible_OpenDrain+0x232>
		ST7735_DrawString(120, 100, " ON", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80065dc:	4b12      	ldr	r3, [pc, #72]	; (8006628 <Visible_OpenDrain+0x260>)
 80065de:	2200      	movs	r2, #0
 80065e0:	9202      	str	r2, [sp, #8]
 80065e2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80065e6:	9201      	str	r2, [sp, #4]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	9200      	str	r2, [sp, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a0f      	ldr	r2, [pc, #60]	; (800662c <Visible_OpenDrain+0x264>)
 80065f0:	2164      	movs	r1, #100	; 0x64
 80065f2:	2078      	movs	r0, #120	; 0x78
 80065f4:	f000 fb30 	bl	8006c58 <ST7735_DrawString>
	else if(Status_OCD[7] == 0x00)
		ST7735_DrawString(120, 100, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
}
 80065f8:	e011      	b.n	800661e <Visible_OpenDrain+0x256>
	else if(Status_OCD[7] == 0x00)
 80065fa:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <Visible_OpenDrain+0x25c>)
 80065fc:	79db      	ldrb	r3, [r3, #7]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10d      	bne.n	800661e <Visible_OpenDrain+0x256>
		ST7735_DrawString(120, 100, "OFF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <Visible_OpenDrain+0x260>)
 8006604:	2200      	movs	r2, #0
 8006606:	9202      	str	r2, [sp, #8]
 8006608:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	9200      	str	r2, [sp, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a06      	ldr	r2, [pc, #24]	; (8006630 <Visible_OpenDrain+0x268>)
 8006616:	2164      	movs	r1, #100	; 0x64
 8006618:	2078      	movs	r0, #120	; 0x78
 800661a:	f000 fb1d 	bl	8006c58 <ST7735_DrawString>
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000140 	.word	0x20000140
 8006628:	20000000 	.word	0x20000000
 800662c:	0800bfc8 	.word	0x0800bfc8
 8006630:	0800bfcc 	.word	0x0800bfcc

08006634 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	2100      	movs	r1, #0
 800663e:	460a      	mov	r2, r1
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	460a      	mov	r2, r1
 8006644:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8006646:	2300      	movs	r3, #0
 8006648:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <MX_RTC_Init+0x8c>)
 800664c:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <MX_RTC_Init+0x90>)
 800664e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8006650:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <MX_RTC_Init+0x8c>)
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8006658:	4b19      	ldr	r3, [pc, #100]	; (80066c0 <MX_RTC_Init+0x8c>)
 800665a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800665e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006660:	4817      	ldr	r0, [pc, #92]	; (80066c0 <MX_RTC_Init+0x8c>)
 8006662:	f002 fca1 	bl	8008fa8 <HAL_RTC_Init>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800666c:	f7fa fba2 	bl	8000db4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8006670:	2311      	movs	r3, #17
 8006672:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 40;
 8006674:	2328      	movs	r3, #40	; 0x28
 8006676:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800667c:	1d3b      	adds	r3, r7, #4
 800667e:	2200      	movs	r2, #0
 8006680:	4619      	mov	r1, r3
 8006682:	480f      	ldr	r0, [pc, #60]	; (80066c0 <MX_RTC_Init+0x8c>)
 8006684:	f002 fd26 	bl	80090d4 <HAL_RTC_SetTime>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800668e:	f7fa fb91 	bl	8000db4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8006692:	2302      	movs	r3, #2
 8006694:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 8006696:	2304      	movs	r3, #4
 8006698:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 20;
 800669a:	2314      	movs	r3, #20
 800669c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 21;
 800669e:	2315      	movs	r3, #21
 80066a0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80066a2:	463b      	mov	r3, r7
 80066a4:	2200      	movs	r2, #0
 80066a6:	4619      	mov	r1, r3
 80066a8:	4805      	ldr	r0, [pc, #20]	; (80066c0 <MX_RTC_Init+0x8c>)
 80066aa:	f002 fe83 	bl	80093b4 <HAL_RTC_SetDate>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80066b4:	f7fa fb7e 	bl	8000db4 <Error_Handler>
  }

}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000194 	.word	0x20000194
 80066c4:	40002800 	.word	0x40002800

080066c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <HAL_RTC_MspInit+0x3c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d110      	bne.n	80066fc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80066da:	f001 fed9 	bl	8008490 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <HAL_RTC_MspInit+0x40>)
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	4a09      	ldr	r2, [pc, #36]	; (8006708 <HAL_RTC_MspInit+0x40>)
 80066e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e8:	61d3      	str	r3, [r2, #28]
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <HAL_RTC_MspInit+0x40>)
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80066f6:	4b05      	ldr	r3, [pc, #20]	; (800670c <HAL_RTC_MspInit+0x44>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40002800 	.word	0x40002800
 8006708:	40021000 	.word	0x40021000
 800670c:	4242043c 	.word	0x4242043c

08006710 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8006714:	4b17      	ldr	r3, [pc, #92]	; (8006774 <MX_SPI1_Init+0x64>)
 8006716:	4a18      	ldr	r2, [pc, #96]	; (8006778 <MX_SPI1_Init+0x68>)
 8006718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <MX_SPI1_Init+0x64>)
 800671c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006722:	4b14      	ldr	r3, [pc, #80]	; (8006774 <MX_SPI1_Init+0x64>)
 8006724:	2200      	movs	r2, #0
 8006726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <MX_SPI1_Init+0x64>)
 800672a:	2200      	movs	r2, #0
 800672c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800672e:	4b11      	ldr	r3, [pc, #68]	; (8006774 <MX_SPI1_Init+0x64>)
 8006730:	2200      	movs	r2, #0
 8006732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006734:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <MX_SPI1_Init+0x64>)
 8006736:	2200      	movs	r2, #0
 8006738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800673a:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <MX_SPI1_Init+0x64>)
 800673c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006742:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <MX_SPI1_Init+0x64>)
 8006744:	2238      	movs	r2, #56	; 0x38
 8006746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <MX_SPI1_Init+0x64>)
 800674a:	2200      	movs	r2, #0
 800674c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <MX_SPI1_Init+0x64>)
 8006750:	2200      	movs	r2, #0
 8006752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006754:	4b07      	ldr	r3, [pc, #28]	; (8006774 <MX_SPI1_Init+0x64>)
 8006756:	2200      	movs	r2, #0
 8006758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <MX_SPI1_Init+0x64>)
 800675c:	220a      	movs	r2, #10
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006760:	4804      	ldr	r0, [pc, #16]	; (8006774 <MX_SPI1_Init+0x64>)
 8006762:	f003 f9d3 	bl	8009b0c <HAL_SPI_Init>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800676c:	f7fa fb22 	bl	8000db4 <Error_Handler>
  }

}
 8006770:	bf00      	nop
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000200 	.word	0x20000200
 8006778:	40013000 	.word	0x40013000

0800677c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8006780:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <MX_SPI2_Init+0x64>)
 8006782:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <MX_SPI2_Init+0x68>)
 8006784:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006786:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <MX_SPI2_Init+0x64>)
 8006788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800678c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800678e:	4b14      	ldr	r3, [pc, #80]	; (80067e0 <MX_SPI2_Init+0x64>)
 8006790:	2200      	movs	r2, #0
 8006792:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <MX_SPI2_Init+0x64>)
 8006796:	2200      	movs	r2, #0
 8006798:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <MX_SPI2_Init+0x64>)
 800679c:	2200      	movs	r2, #0
 800679e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <MX_SPI2_Init+0x64>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80067a6:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <MX_SPI2_Init+0x64>)
 80067a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067ae:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <MX_SPI2_Init+0x64>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <MX_SPI2_Init+0x64>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <MX_SPI2_Init+0x64>)
 80067bc:	2200      	movs	r2, #0
 80067be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c0:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <MX_SPI2_Init+0x64>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <MX_SPI2_Init+0x64>)
 80067c8:	220a      	movs	r2, #10
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80067cc:	4804      	ldr	r0, [pc, #16]	; (80067e0 <MX_SPI2_Init+0x64>)
 80067ce:	f003 f99d 	bl	8009b0c <HAL_SPI_Init>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80067d8:	f7fa faec 	bl	8000db4 <Error_Handler>
  }

}
 80067dc:	bf00      	nop
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	200001a8 	.word	0x200001a8
 80067e4:	40003800 	.word	0x40003800

080067e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f0:	f107 0318 	add.w	r3, r7, #24
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	609a      	str	r2, [r3, #8]
 80067fc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a35      	ldr	r2, [pc, #212]	; (80068d8 <HAL_SPI_MspInit+0xf0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d138      	bne.n	800687a <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006808:	4b34      	ldr	r3, [pc, #208]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4a33      	ldr	r2, [pc, #204]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 800680e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006812:	6193      	str	r3, [r2, #24]
 8006814:	4b31      	ldr	r3, [pc, #196]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006820:	4b2e      	ldr	r3, [pc, #184]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	4a2d      	ldr	r2, [pc, #180]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 8006826:	f043 0304 	orr.w	r3, r3, #4
 800682a:	6193      	str	r3, [r2, #24]
 800682c:	4b2b      	ldr	r3, [pc, #172]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_M_Pin|MOSI_M_Pin;
 8006838:	23a0      	movs	r3, #160	; 0xa0
 800683a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800683c:	2302      	movs	r3, #2
 800683e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006840:	2303      	movs	r3, #3
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006844:	f107 0318 	add.w	r3, r7, #24
 8006848:	4619      	mov	r1, r3
 800684a:	4825      	ldr	r0, [pc, #148]	; (80068e0 <HAL_SPI_MspInit+0xf8>)
 800684c:	f001 fc6c 	bl	8008128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_M_Pin;
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006858:	2300      	movs	r3, #0
 800685a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MISO_M_GPIO_Port, &GPIO_InitStruct);
 800685c:	f107 0318 	add.w	r3, r7, #24
 8006860:	4619      	mov	r1, r3
 8006862:	481f      	ldr	r0, [pc, #124]	; (80068e0 <HAL_SPI_MspInit+0xf8>)
 8006864:	f001 fc60 	bl	8008128 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006868:	2200      	movs	r2, #0
 800686a:	2100      	movs	r1, #0
 800686c:	2023      	movs	r0, #35	; 0x23
 800686e:	f001 fbae 	bl	8007fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006872:	2023      	movs	r0, #35	; 0x23
 8006874:	f001 fbc7 	bl	8008006 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006878:	e029      	b.n	80068ce <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a19      	ldr	r2, [pc, #100]	; (80068e4 <HAL_SPI_MspInit+0xfc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d124      	bne.n	80068ce <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006884:	4b15      	ldr	r3, [pc, #84]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	4a14      	ldr	r2, [pc, #80]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 800688a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800688e:	61d3      	str	r3, [r2, #28]
 8006890:	4b12      	ldr	r3, [pc, #72]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800689c:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	4a0e      	ldr	r2, [pc, #56]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 80068a2:	f043 0308 	orr.w	r3, r3, #8
 80068a6:	6193      	str	r3, [r2, #24]
 80068a8:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <HAL_SPI_MspInit+0xf4>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SCK_L_Pin|MOSI_L_Pin;
 80068b4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80068b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068ba:	2302      	movs	r3, #2
 80068bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068be:	2303      	movs	r3, #3
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068c2:	f107 0318 	add.w	r3, r7, #24
 80068c6:	4619      	mov	r1, r3
 80068c8:	4807      	ldr	r0, [pc, #28]	; (80068e8 <HAL_SPI_MspInit+0x100>)
 80068ca:	f001 fc2d 	bl	8008128 <HAL_GPIO_Init>
}
 80068ce:	bf00      	nop
 80068d0:	3728      	adds	r7, #40	; 0x28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40013000 	.word	0x40013000
 80068dc:	40021000 	.word	0x40021000
 80068e0:	40010800 	.word	0x40010800
 80068e4:	40003800 	.word	0x40003800
 80068e8:	40010c00 	.word	0x40010c00

080068ec <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <ST7735_Reset>:

static void ST7735_Reset()
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
	TFT_RES_L();
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <ST7735_Reset+0x1c>)
 80068fe:	2210      	movs	r2, #16
 8006900:	615a      	str	r2, [r3, #20]
	HAL_Delay(20);
 8006902:	2014      	movs	r0, #20
 8006904:	f000 fe58 	bl	80075b8 <HAL_Delay>
	TFT_RES_H();
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <ST7735_Reset+0x1c>)
 800690a:	2210      	movs	r2, #16
 800690c:	611a      	str	r2, [r3, #16]
}
 800690e:	bf00      	nop
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40010c00 	.word	0x40010c00

08006918 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <ST7735_WriteCommand+0x28>)
 8006924:	2220      	movs	r2, #32
 8006926:	615a      	str	r2, [r3, #20]
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006928:	1df9      	adds	r1, r7, #7
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	2201      	movs	r2, #1
 8006930:	4804      	ldr	r0, [pc, #16]	; (8006944 <ST7735_WriteCommand+0x2c>)
 8006932:	f003 f96f 	bl	8009c14 <HAL_SPI_Transmit>
#endif
}
 8006936:	bf00      	nop
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40010c00 	.word	0x40010c00
 8006944:	200001a8 	.word	0x200001a8

08006948 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <ST7735_WriteData+0x28>)
 8006954:	2220      	movs	r2, #32
 8006956:	611a      	str	r2, [r3, #16]
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	b29a      	uxth	r2, r3
 800695c:	f04f 33ff 	mov.w	r3, #4294967295
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4804      	ldr	r0, [pc, #16]	; (8006974 <ST7735_WriteData+0x2c>)
 8006964:	f003 f956 	bl	8009c14 <HAL_SPI_Transmit>
#endif
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40010c00 	.word	0x40010c00
 8006974:	200001a8 	.word	0x200001a8

08006978 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 800698a:	e034      	b.n	80069f6 <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff ffbd 	bl	8006918 <ST7735_WriteCommand>

        numArgs = *addr++;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80069a8:	7abb      	ldrb	r3, [r7, #10]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80069b2:	7abb      	ldrb	r3, [r7, #10]
 80069b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b8:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 80069ba:	7abb      	ldrb	r3, [r7, #10]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80069c0:	7abb      	ldrb	r3, [r7, #10]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff ffbf 	bl	8006948 <ST7735_WriteData>
            addr += numArgs;
 80069ca:	7abb      	ldrb	r3, [r7, #10]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	4413      	add	r3, r2
 80069d0:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 80069d2:	89bb      	ldrh	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00e      	beq.n	80069f6 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80069e2:	89bb      	ldrh	r3, [r7, #12]
 80069e4:	2bff      	cmp	r3, #255	; 0xff
 80069e6:	d102      	bne.n	80069ee <ST7735_ExecuteCommandList+0x76>
 80069e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80069ec:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80069ee:	89bb      	ldrh	r3, [r7, #12]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fde1 	bl	80075b8 <HAL_Delay>
    while(numCommands--)
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	1e5a      	subs	r2, r3, #1
 80069fa:	73fa      	strb	r2, [r7, #15]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1c5      	bne.n	800698c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4623      	mov	r3, r4
 8006a1c:	71fb      	strb	r3, [r7, #7]
 8006a1e:	4603      	mov	r3, r0
 8006a20:	71bb      	strb	r3, [r7, #6]
 8006a22:	460b      	mov	r3, r1
 8006a24:	717b      	strb	r3, [r7, #5]
 8006a26:	4613      	mov	r3, r2
 8006a28:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8006a2a:	202a      	movs	r0, #42	; 0x2a
 8006a2c:	f7ff ff74 	bl	8006918 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8006a30:	2300      	movs	r3, #0
 8006a32:	733b      	strb	r3, [r7, #12]
 8006a34:	4b17      	ldr	r3, [pc, #92]	; (8006a94 <ST7735_SetAddressWindow+0x88>)
 8006a36:	781a      	ldrb	r2, [r3, #0]
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	737b      	strb	r3, [r7, #13]
 8006a40:	2300      	movs	r3, #0
 8006a42:	73bb      	strb	r3, [r7, #14]
 8006a44:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <ST7735_SetAddressWindow+0x88>)
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	797b      	ldrb	r3, [r7, #5]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8006a50:	f107 030c 	add.w	r3, r7, #12
 8006a54:	2104      	movs	r1, #4
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff ff76 	bl	8006948 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8006a5c:	202b      	movs	r0, #43	; 0x2b
 8006a5e:	f7ff ff5b 	bl	8006918 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8006a62:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <ST7735_SetAddressWindow+0x8c>)
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	79bb      	ldrb	r3, [r7, #6]
 8006a68:	4413      	add	r3, r2
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <ST7735_SetAddressWindow+0x8c>)
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	793b      	ldrb	r3, [r7, #4]
 8006a74:	4413      	add	r3, r2
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	2104      	movs	r1, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff ff61 	bl	8006948 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8006a86:	202c      	movs	r0, #44	; 0x2c
 8006a88:	f7ff ff46 	bl	8006918 <ST7735_WriteCommand>
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd90      	pop	{r4, r7, pc}
 8006a94:	20000024 	.word	0x20000024
 8006a98:	20000025 	.word	0x20000025

08006a9c <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	b590      	push	{r4, r7, lr}
 8006aa0:	b089      	sub	sp, #36	; 0x24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	80fb      	strh	r3, [r7, #6]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	80bb      	strh	r3, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	b2d8      	uxtb	r0, r3
 8006ab6:	88bb      	ldrh	r3, [r7, #4]
 8006ab8:	b2d9      	uxtb	r1, r3
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006ac2:	4413      	add	r3, r2
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b2dc      	uxtb	r4, r3
 8006aca:	88bb      	ldrh	r3, [r7, #4]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006ad2:	4413      	add	r3, r2
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	4622      	mov	r2, r4
 8006adc:	f7ff ff96 	bl	8006a0c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61fb      	str	r3, [r7, #28]
 8006ae4:	e043      	b.n	8006b6e <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8006ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	3b20      	subs	r3, #32
 8006aec:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	4619      	mov	r1, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	440b      	add	r3, r1
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8006b02:	2300      	movs	r3, #0
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	e029      	b.n	8006b5c <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00e      	beq.n	8006b36 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8006b18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b1a:	0a1b      	lsrs	r3, r3, #8
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	743b      	strb	r3, [r7, #16]
 8006b22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8006b28:	f107 0310 	add.w	r3, r7, #16
 8006b2c:	2102      	movs	r1, #2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff ff0a 	bl	8006948 <ST7735_WriteData>
 8006b34:	e00f      	b.n	8006b56 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8006b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b3a:	0a1b      	lsrs	r3, r3, #8
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	733b      	strb	r3, [r7, #12]
 8006b42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8006b4a:	f107 030c 	add.w	r3, r7, #12
 8006b4e:	2102      	movs	r1, #2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff fef9 	bl	8006948 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006b60:	461a      	mov	r2, r3
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d3cf      	bcc.n	8006b08 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006b72:	461a      	mov	r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d3b5      	bcc.n	8006ae6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	3724      	adds	r7, #36	; 0x24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006b86:	b002      	add	sp, #8
 8006b88:	4770      	bx	lr
	...

08006b8c <ST7735_Init>:

void ST7735_Init()
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8006b90:	f7ff feac 	bl	80068ec <ST7735_GPIO_Init>
	TFT_CS_L();
 8006b94:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <ST7735_Init+0x34>)
 8006b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b9a:	615a      	str	r2, [r3, #20]
    ST7735_Reset();
 8006b9c:	f7ff feac 	bl	80068f8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8006ba0:	4808      	ldr	r0, [pc, #32]	; (8006bc4 <ST7735_Init+0x38>)
 8006ba2:	f7ff fee9 	bl	8006978 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8006ba6:	4808      	ldr	r0, [pc, #32]	; (8006bc8 <ST7735_Init+0x3c>)
 8006ba8:	f7ff fee6 	bl	8006978 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8006bac:	4807      	ldr	r0, [pc, #28]	; (8006bcc <ST7735_Init+0x40>)
 8006bae:	f7ff fee3 	bl	8006978 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8006bb2:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <ST7735_Init+0x34>)
 8006bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bb8:	611a      	str	r2, [r3, #16]
}
 8006bba:	bf00      	nop
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40010c00 	.word	0x40010c00
 8006bc4:	0800e830 	.word	0x0800e830
 8006bc8:	0800e86c 	.word	0x0800e86c
 8006bcc:	0800e87c 	.word	0x0800e87c

08006bd0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	80fb      	strh	r3, [r7, #6]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	80bb      	strh	r3, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <ST7735_DrawPixel+0x7c>)
 8006be6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006bea:	4293      	cmp	r3, r2
 8006bec:	da2a      	bge.n	8006c44 <ST7735_DrawPixel+0x74>
 8006bee:	88bb      	ldrh	r3, [r7, #4]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <ST7735_DrawPixel+0x80>)
 8006bf2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	da24      	bge.n	8006c44 <ST7735_DrawPixel+0x74>
        return;

    TFT_CS_L();
 8006bfa:	4b16      	ldr	r3, [pc, #88]	; (8006c54 <ST7735_DrawPixel+0x84>)
 8006bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c00:	615a      	str	r2, [r3, #20]

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	b2d8      	uxtb	r0, r3
 8006c06:	88bb      	ldrh	r3, [r7, #4]
 8006c08:	b2d9      	uxtb	r1, r3
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	3301      	adds	r3, #1
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	88bb      	ldrh	r3, [r7, #4]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	3301      	adds	r3, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f7ff fef7 	bl	8006a0c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8006c1e:	887b      	ldrh	r3, [r7, #2]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	733b      	strb	r3, [r7, #12]
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8006c2e:	f107 030c 	add.w	r3, r7, #12
 8006c32:	2102      	movs	r1, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fe87 	bl	8006948 <ST7735_WriteData>

    TFT_CS_H();
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <ST7735_DrawPixel+0x84>)
 8006c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c40:	611a      	str	r2, [r3, #16]
 8006c42:	e000      	b.n	8006c46 <ST7735_DrawPixel+0x76>
        return;
 8006c44:	bf00      	nop
}
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20000022 	.word	0x20000022
 8006c50:	20000020 	.word	0x20000020
 8006c54:	40010c00 	.word	0x40010c00

08006c58 <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8006c58:	b082      	sub	sp, #8
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b086      	sub	sp, #24
 8006c5e:	af04      	add	r7, sp, #16
 8006c60:	603a      	str	r2, [r7, #0]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	4603      	mov	r3, r0
 8006c66:	80fb      	strh	r3, [r7, #6]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8006c6c:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <ST7735_DrawString+0xa8>)
 8006c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c72:	615a      	str	r2, [r3, #20]

    while(*str)
 8006c74:	e033      	b.n	8006cde <ST7735_DrawString+0x86>
    {
        if(x + font.width >= _width)
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	7d3a      	ldrb	r2, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <ST7735_DrawString+0xac>)
 8006c7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006c82:	4293      	cmp	r3, r2
 8006c84:	db16      	blt.n	8006cb4 <ST7735_DrawString+0x5c>
        {
            x = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8006c8a:	7d7b      	ldrb	r3, [r7, #21]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	88bb      	ldrh	r3, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8006c94:	88bb      	ldrh	r3, [r7, #4]
 8006c96:	7d7a      	ldrb	r2, [r7, #21]
 8006c98:	4413      	add	r3, r2
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <ST7735_DrawString+0xb0>)
 8006c9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	da21      	bge.n	8006ce8 <ST7735_DrawString+0x90>
            {
                break;
            }

            if(*str == ' ')
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d103      	bne.n	8006cb4 <ST7735_DrawString+0x5c>
            {
                // skip spaces in the beginning of the new line
                str++;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	603b      	str	r3, [r7, #0]
                continue;
 8006cb2:	e014      	b.n	8006cde <ST7735_DrawString+0x86>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781a      	ldrb	r2, [r3, #0]
 8006cb8:	88b9      	ldrh	r1, [r7, #4]
 8006cba:	88f8      	ldrh	r0, [r7, #6]
 8006cbc:	8c3b      	ldrh	r3, [r7, #32]
 8006cbe:	9302      	str	r3, [sp, #8]
 8006cc0:	8bbb      	ldrh	r3, [r7, #28]
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f7ff fee7 	bl	8006a9c <ST7735_WriteChar>
        x += font.width;
 8006cce:	7d3b      	ldrb	r3, [r7, #20]
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	80fb      	strh	r3, [r7, #6]
        str++;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	603b      	str	r3, [r7, #0]
    while(*str)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1c7      	bne.n	8006c76 <ST7735_DrawString+0x1e>
 8006ce6:	e000      	b.n	8006cea <ST7735_DrawString+0x92>
                break;
 8006ce8:	bf00      	nop
    }
    TFT_CS_H();
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <ST7735_DrawString+0xa8>)
 8006cec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cf0:	611a      	str	r2, [r3, #16]
}
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cfc:	b002      	add	sp, #8
 8006cfe:	4770      	bx	lr
 8006d00:	40010c00 	.word	0x40010c00
 8006d04:	20000022 	.word	0x20000022
 8006d08:	20000020 	.word	0x20000020

08006d0c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8006d0c:	b590      	push	{r4, r7, lr}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4623      	mov	r3, r4
 8006d1c:	80fb      	strh	r3, [r7, #6]
 8006d1e:	4603      	mov	r3, r0
 8006d20:	80bb      	strh	r3, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	807b      	strh	r3, [r7, #2]
 8006d26:	4613      	mov	r3, r2
 8006d28:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	4a38      	ldr	r2, [pc, #224]	; (8006e10 <ST7735_FillRectangle+0x104>)
 8006d2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d32:	4293      	cmp	r3, r2
 8006d34:	da68      	bge.n	8006e08 <ST7735_FillRectangle+0xfc>
 8006d36:	88bb      	ldrh	r3, [r7, #4]
 8006d38:	4a36      	ldr	r2, [pc, #216]	; (8006e14 <ST7735_FillRectangle+0x108>)
 8006d3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	da62      	bge.n	8006e08 <ST7735_FillRectangle+0xfc>
    if((x + w - 1) >= _width) w = _width - x;
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	887b      	ldrh	r3, [r7, #2]
 8006d46:	4413      	add	r3, r2
 8006d48:	4a31      	ldr	r2, [pc, #196]	; (8006e10 <ST7735_FillRectangle+0x104>)
 8006d4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	dd06      	ble.n	8006d60 <ST7735_FillRectangle+0x54>
 8006d52:	4b2f      	ldr	r3, [pc, #188]	; (8006e10 <ST7735_FillRectangle+0x104>)
 8006d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8006d60:	88ba      	ldrh	r2, [r7, #4]
 8006d62:	883b      	ldrh	r3, [r7, #0]
 8006d64:	4413      	add	r3, r2
 8006d66:	4a2b      	ldr	r2, [pc, #172]	; (8006e14 <ST7735_FillRectangle+0x108>)
 8006d68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	dd06      	ble.n	8006d7e <ST7735_FillRectangle+0x72>
 8006d70:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <ST7735_FillRectangle+0x108>)
 8006d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	88bb      	ldrh	r3, [r7, #4]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8006d7e:	4b26      	ldr	r3, [pc, #152]	; (8006e18 <ST7735_FillRectangle+0x10c>)
 8006d80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d84:	615a      	str	r2, [r3, #20]
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	b2d8      	uxtb	r0, r3
 8006d8a:	88bb      	ldrh	r3, [r7, #4]
 8006d8c:	b2d9      	uxtb	r1, r3
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	887b      	ldrh	r3, [r7, #2]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	4413      	add	r3, r2
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b2dc      	uxtb	r4, r3
 8006d9e:	88bb      	ldrh	r3, [r7, #4]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	883b      	ldrh	r3, [r7, #0]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	4622      	mov	r2, r4
 8006db0:	f7ff fe2c 	bl	8006a0c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8006db4:	8c3b      	ldrh	r3, [r7, #32]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	733b      	strb	r3, [r7, #12]
 8006dbe:	8c3b      	ldrh	r3, [r7, #32]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8006dc4:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <ST7735_FillRectangle+0x10c>)
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	611a      	str	r2, [r3, #16]
    for(y = h; y > 0; y--)
 8006dca:	883b      	ldrh	r3, [r7, #0]
 8006dcc:	80bb      	strh	r3, [r7, #4]
 8006dce:	e013      	b.n	8006df8 <ST7735_FillRectangle+0xec>
    {
        for(x = w; x > 0; x--)
 8006dd0:	887b      	ldrh	r3, [r7, #2]
 8006dd2:	80fb      	strh	r3, [r7, #6]
 8006dd4:	e00a      	b.n	8006dec <ST7735_FillRectangle+0xe0>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
        	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006dd6:	f107 010c 	add.w	r1, r7, #12
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295
 8006dde:	2202      	movs	r2, #2
 8006de0:	480e      	ldr	r0, [pc, #56]	; (8006e1c <ST7735_FillRectangle+0x110>)
 8006de2:	f002 ff17 	bl	8009c14 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	80fb      	strh	r3, [r7, #6]
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f1      	bne.n	8006dd6 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--)
 8006df2:	88bb      	ldrh	r3, [r7, #4]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	80bb      	strh	r3, [r7, #4]
 8006df8:	88bb      	ldrh	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e8      	bne.n	8006dd0 <ST7735_FillRectangle+0xc4>
#endif
        }
    }
    TFT_CS_H();
 8006dfe:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <ST7735_FillRectangle+0x10c>)
 8006e00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e04:	611a      	str	r2, [r3, #16]
 8006e06:	e000      	b.n	8006e0a <ST7735_FillRectangle+0xfe>
    if((x >= _width) || (y >= _height)) return;
 8006e08:	bf00      	nop
}
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd90      	pop	{r4, r7, pc}
 8006e10:	20000022 	.word	0x20000022
 8006e14:	20000020 	.word	0x20000020
 8006e18:	40010c00 	.word	0x40010c00
 8006e1c:	200001a8 	.word	0x200001a8

08006e20 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	4603      	mov	r3, r0
 8006e28:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <ST7735_FillScreen+0x30>)
 8006e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <ST7735_FillScreen+0x34>)
 8006e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e38:	b299      	uxth	r1, r3
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	2100      	movs	r1, #0
 8006e42:	2000      	movs	r0, #0
 8006e44:	f7ff ff62 	bl	8006d0c <ST7735_FillRectangle>
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000022 	.word	0x20000022
 8006e54:	20000020 	.word	0x20000020

08006e58 <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4608      	mov	r0, r1
 8006e62:	4611      	mov	r1, r2
 8006e64:	461a      	mov	r2, r3
 8006e66:	4623      	mov	r3, r4
 8006e68:	80fb      	strh	r3, [r7, #6]
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	80bb      	strh	r3, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	807b      	strh	r3, [r7, #2]
 8006e72:	4613      	mov	r3, r2
 8006e74:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8006e76:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006e7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8006e84:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8006e88:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e90:	1acb      	subs	r3, r1, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bfb8      	it	lt
 8006e96:	425b      	neglt	r3, r3
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bfcc      	ite	gt
 8006e9c:	2301      	movgt	r3, #1
 8006e9e:	2300      	movle	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	837b      	strh	r3, [r7, #26]
	if (steep)
 8006ea4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <ST7735_DrawLine+0x6c>
	{
		SWAP_INT16_T(x0, y0);
 8006eac:	88fb      	ldrh	r3, [r7, #6]
 8006eae:	833b      	strh	r3, [r7, #24]
 8006eb0:	88bb      	ldrh	r3, [r7, #4]
 8006eb2:	80fb      	strh	r3, [r7, #6]
 8006eb4:	8b3b      	ldrh	r3, [r7, #24]
 8006eb6:	80bb      	strh	r3, [r7, #4]
		SWAP_INT16_T(x1, y1);
 8006eb8:	887b      	ldrh	r3, [r7, #2]
 8006eba:	82fb      	strh	r3, [r7, #22]
 8006ebc:	883b      	ldrh	r3, [r7, #0]
 8006ebe:	807b      	strh	r3, [r7, #2]
 8006ec0:	8afb      	ldrh	r3, [r7, #22]
 8006ec2:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 8006ec4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ec8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	dd0b      	ble.n	8006ee8 <ST7735_DrawLine+0x90>
	{
		SWAP_INT16_T(x0, x1);
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	82bb      	strh	r3, [r7, #20]
 8006ed4:	887b      	ldrh	r3, [r7, #2]
 8006ed6:	80fb      	strh	r3, [r7, #6]
 8006ed8:	8abb      	ldrh	r3, [r7, #20]
 8006eda:	807b      	strh	r3, [r7, #2]
		SWAP_INT16_T(y0, y1);
 8006edc:	88bb      	ldrh	r3, [r7, #4]
 8006ede:	827b      	strh	r3, [r7, #18]
 8006ee0:	883b      	ldrh	r3, [r7, #0]
 8006ee2:	80bb      	strh	r3, [r7, #4]
 8006ee4:	8a7b      	ldrh	r3, [r7, #18]
 8006ee6:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8006ee8:	887a      	ldrh	r2, [r7, #2]
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8006ef2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006ef6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bfb8      	it	lt
 8006f00:	425b      	neglt	r3, r3
 8006f02:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8006f04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f08:	0fda      	lsrs	r2, r3, #31
 8006f0a:	4413      	add	r3, r2
 8006f0c:	105b      	asrs	r3, r3, #1
 8006f0e:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 8006f10:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f14:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	da02      	bge.n	8006f22 <ST7735_DrawLine+0xca>
	{
		ystep = 1;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	83bb      	strh	r3, [r7, #28]
 8006f20:	e02d      	b.n	8006f7e <ST7735_DrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8006f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f26:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0<=x1; x0++)
 8006f28:	e029      	b.n	8006f7e <ST7735_DrawLine+0x126>
	{
		if (steep)
 8006f2a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <ST7735_DrawLine+0xe8>
		{
			ST7735_DrawPixel(y0, x0, color);
 8006f32:	88bb      	ldrh	r3, [r7, #4]
 8006f34:	88f9      	ldrh	r1, [r7, #6]
 8006f36:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fe49 	bl	8006bd0 <ST7735_DrawPixel>
 8006f3e:	e005      	b.n	8006f4c <ST7735_DrawLine+0xf4>
		}
		else
		{
			ST7735_DrawPixel(x0, y0, color);
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	88b9      	ldrh	r1, [r7, #4]
 8006f44:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff fe42 	bl	8006bd0 <ST7735_DrawPixel>
		}
		err -= dy;
 8006f4c:	8bfa      	ldrh	r2, [r7, #30]
 8006f4e:	89fb      	ldrh	r3, [r7, #14]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8006f56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	da09      	bge.n	8006f72 <ST7735_DrawLine+0x11a>
		{
			y0 += ystep;
 8006f5e:	88ba      	ldrh	r2, [r7, #4]
 8006f60:	8bbb      	ldrh	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8006f68:	8bfa      	ldrh	r2, [r7, #30]
 8006f6a:	8a3b      	ldrh	r3, [r7, #16]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++)
 8006f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3301      	adds	r3, #1
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	80fb      	strh	r3, [r7, #6]
 8006f7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	ddcf      	ble.n	8006f2a <ST7735_DrawLine+0xd2>
		}
	}
}
 8006f8a:	bf00      	nop
 8006f8c:	bf00      	nop
 8006f8e:	3724      	adds	r7, #36	; 0x24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd90      	pop	{r4, r7, pc}

08006f94 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	4b48      	ldr	r3, [pc, #288]	; (80070c8 <ST7735_SetRotation+0x134>)
 8006fa8:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 8006faa:	4b48      	ldr	r3, [pc, #288]	; (80070cc <ST7735_SetRotation+0x138>)
 8006fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fb0:	615a      	str	r2, [r3, #20]

  ST7735_WriteCommand(ST7735_MADCTL);
 8006fb2:	2036      	movs	r0, #54	; 0x36
 8006fb4:	f7ff fcb0 	bl	8006918 <ST7735_WriteCommand>

  switch (_value_rotation)
 8006fb8:	4b43      	ldr	r3, [pc, #268]	; (80070c8 <ST7735_SetRotation+0x134>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d87b      	bhi.n	80070b8 <ST7735_SetRotation+0x124>
 8006fc0:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <ST7735_SetRotation+0x34>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08007015 	.word	0x08007015
 8006fd0:	08007051 	.word	0x08007051
 8006fd4:	0800707d 	.word	0x0800707d
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8006fd8:	4b3d      	ldr	r3, [pc, #244]	; (80070d0 <ST7735_SetRotation+0x13c>)
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	4b3c      	ldr	r3, [pc, #240]	; (80070d0 <ST7735_SetRotation+0x13c>)
 8006fde:	785b      	ldrb	r3, [r3, #1]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	4b3a      	ldr	r3, [pc, #232]	; (80070d0 <ST7735_SetRotation+0x13c>)
 8006fe6:	78db      	ldrb	r3, [r3, #3]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8006fee:	f107 030f 	add.w	r3, r7, #15
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff fca7 	bl	8006948 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 8006ffa:	4b36      	ldr	r3, [pc, #216]	; (80070d4 <ST7735_SetRotation+0x140>)
 8006ffc:	2280      	movs	r2, #128	; 0x80
 8006ffe:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8007000:	4b35      	ldr	r3, [pc, #212]	; (80070d8 <ST7735_SetRotation+0x144>)
 8007002:	22a0      	movs	r2, #160	; 0xa0
 8007004:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 8007006:	4b35      	ldr	r3, [pc, #212]	; (80070dc <ST7735_SetRotation+0x148>)
 8007008:	2202      	movs	r2, #2
 800700a:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 800700c:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <ST7735_SetRotation+0x14c>)
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
    }
     break;
 8007012:	e051      	b.n	80070b8 <ST7735_SetRotation+0x124>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8007014:	4b2e      	ldr	r3, [pc, #184]	; (80070d0 <ST7735_SetRotation+0x13c>)
 8007016:	785a      	ldrb	r2, [r3, #1]
 8007018:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <ST7735_SetRotation+0x13c>)
 800701a:	789b      	ldrb	r3, [r3, #2]
 800701c:	4313      	orrs	r3, r2
 800701e:	b2da      	uxtb	r2, r3
 8007020:	4b2b      	ldr	r3, [pc, #172]	; (80070d0 <ST7735_SetRotation+0x13c>)
 8007022:	78db      	ldrb	r3, [r3, #3]
 8007024:	4313      	orrs	r3, r2
 8007026:	b2db      	uxtb	r3, r3
 8007028:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800702a:	f107 030e 	add.w	r3, r7, #14
 800702e:	2101      	movs	r1, #1
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fc89 	bl	8006948 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8007036:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <ST7735_SetRotation+0x140>)
 8007038:	22a0      	movs	r2, #160	; 0xa0
 800703a:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 800703c:	4b26      	ldr	r3, [pc, #152]	; (80070d8 <ST7735_SetRotation+0x144>)
 800703e:	2280      	movs	r2, #128	; 0x80
 8007040:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8007042:	4b26      	ldr	r3, [pc, #152]	; (80070dc <ST7735_SetRotation+0x148>)
 8007044:	2201      	movs	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8007048:	4b25      	ldr	r3, [pc, #148]	; (80070e0 <ST7735_SetRotation+0x14c>)
 800704a:	2202      	movs	r2, #2
 800704c:	701a      	strb	r2, [r3, #0]
    }
      break;
 800704e:	e033      	b.n	80070b8 <ST7735_SetRotation+0x124>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8007050:	4b1f      	ldr	r3, [pc, #124]	; (80070d0 <ST7735_SetRotation+0x13c>)
 8007052:	78db      	ldrb	r3, [r3, #3]
 8007054:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8007056:	f107 030d 	add.w	r3, r7, #13
 800705a:	2101      	movs	r1, #1
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff fc73 	bl	8006948 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <ST7735_SetRotation+0x140>)
 8007064:	2280      	movs	r2, #128	; 0x80
 8007066:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 8007068:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <ST7735_SetRotation+0x144>)
 800706a:	22a0      	movs	r2, #160	; 0xa0
 800706c:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <ST7735_SetRotation+0x148>)
 8007070:	2202      	movs	r2, #2
 8007072:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 8007074:	4b1a      	ldr	r3, [pc, #104]	; (80070e0 <ST7735_SetRotation+0x14c>)
 8007076:	2201      	movs	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]
    }
      break;
 800707a:	e01d      	b.n	80070b8 <ST7735_SetRotation+0x124>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 800707c:	4b14      	ldr	r3, [pc, #80]	; (80070d0 <ST7735_SetRotation+0x13c>)
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <ST7735_SetRotation+0x13c>)
 8007082:	789b      	ldrb	r3, [r3, #2]
 8007084:	4313      	orrs	r3, r2
 8007086:	b2da      	uxtb	r2, r3
 8007088:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <ST7735_SetRotation+0x13c>)
 800708a:	78db      	ldrb	r3, [r3, #3]
 800708c:	4313      	orrs	r3, r2
 800708e:	b2db      	uxtb	r3, r3
 8007090:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8007092:	f107 030c 	add.w	r3, r7, #12
 8007096:	2101      	movs	r1, #1
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fc55 	bl	8006948 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <ST7735_SetRotation+0x140>)
 80070a0:	22a0      	movs	r2, #160	; 0xa0
 80070a2:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 80070a4:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <ST7735_SetRotation+0x144>)
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 80070aa:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <ST7735_SetRotation+0x148>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <ST7735_SetRotation+0x14c>)
 80070b2:	2202      	movs	r2, #2
 80070b4:	701a      	strb	r2, [r3, #0]
    }
      break;
 80070b6:	bf00      	nop
  }
  TFT_CS_H();
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <ST7735_SetRotation+0x138>)
 80070ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070be:	611a      	str	r2, [r3, #16]
}
 80070c0:	bf00      	nop
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000154 	.word	0x20000154
 80070cc:	40010c00 	.word	0x40010c00
 80070d0:	2000001c 	.word	0x2000001c
 80070d4:	20000022 	.word	0x20000022
 80070d8:	20000020 	.word	0x20000020
 80070dc:	20000024 	.word	0x20000024
 80070e0:	20000025 	.word	0x20000025

080070e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80070ea:	4b15      	ldr	r3, [pc, #84]	; (8007140 <HAL_MspInit+0x5c>)
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	4a14      	ldr	r2, [pc, #80]	; (8007140 <HAL_MspInit+0x5c>)
 80070f0:	f043 0301 	orr.w	r3, r3, #1
 80070f4:	6193      	str	r3, [r2, #24]
 80070f6:	4b12      	ldr	r3, [pc, #72]	; (8007140 <HAL_MspInit+0x5c>)
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	60bb      	str	r3, [r7, #8]
 8007100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007102:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <HAL_MspInit+0x5c>)
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	4a0e      	ldr	r2, [pc, #56]	; (8007140 <HAL_MspInit+0x5c>)
 8007108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800710c:	61d3      	str	r3, [r2, #28]
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <HAL_MspInit+0x5c>)
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <HAL_MspInit+0x60>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	4a04      	ldr	r2, [pc, #16]	; (8007144 <HAL_MspInit+0x60>)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr
 8007140:	40021000 	.word	0x40021000
 8007144:	40010000 	.word	0x40010000

08007148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800714c:	bf00      	nop
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007158:	e7fe      	b.n	8007158 <HardFault_Handler+0x4>

0800715a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800715a:	b480      	push	{r7}
 800715c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800715e:	e7fe      	b.n	800715e <MemManage_Handler+0x4>

08007160 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007164:	e7fe      	b.n	8007164 <BusFault_Handler+0x4>

08007166 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007166:	b480      	push	{r7}
 8007168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800716a:	e7fe      	b.n	800716a <UsageFault_Handler+0x4>

0800716c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007170:	bf00      	nop
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007188:	bf00      	nop
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007194:	f000 f9f4 	bl	8007580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007198:	bf00      	nop
 800719a:	bd80      	pop	{r7, pc}

0800719c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80071a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80071a4:	f001 f95c 	bl	8008460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80071a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80071ac:	f001 f958 	bl	8008460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80071b8:	4802      	ldr	r0, [pc, #8]	; (80071c4 <TIM1_UP_IRQHandler+0x10>)
 80071ba:	f003 fb77 	bl	800a8ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80071be:	bf00      	nop
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000258 	.word	0x20000258

080071c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80071cc:	4802      	ldr	r0, [pc, #8]	; (80071d8 <SPI1_IRQHandler+0x10>)
 80071ce:	f002 fef1 	bl	8009fb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80071d2:	bf00      	nop
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000200 	.word	0x20000200

080071dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80071e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80071e4:	f001 f93c 	bl	8008460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80071e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80071ec:	f001 f938 	bl	8008460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80071f0:	bf00      	nop
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071fc:	4a14      	ldr	r2, [pc, #80]	; (8007250 <_sbrk+0x5c>)
 80071fe:	4b15      	ldr	r3, [pc, #84]	; (8007254 <_sbrk+0x60>)
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007208:	4b13      	ldr	r3, [pc, #76]	; (8007258 <_sbrk+0x64>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007210:	4b11      	ldr	r3, [pc, #68]	; (8007258 <_sbrk+0x64>)
 8007212:	4a12      	ldr	r2, [pc, #72]	; (800725c <_sbrk+0x68>)
 8007214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007216:	4b10      	ldr	r3, [pc, #64]	; (8007258 <_sbrk+0x64>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	429a      	cmp	r2, r3
 8007222:	d207      	bcs.n	8007234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007224:	f004 f904 	bl	800b430 <__errno>
 8007228:	4603      	mov	r3, r0
 800722a:	220c      	movs	r2, #12
 800722c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800722e:	f04f 33ff 	mov.w	r3, #4294967295
 8007232:	e009      	b.n	8007248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007234:	4b08      	ldr	r3, [pc, #32]	; (8007258 <_sbrk+0x64>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <_sbrk+0x64>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	4a05      	ldr	r2, [pc, #20]	; (8007258 <_sbrk+0x64>)
 8007244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20005000 	.word	0x20005000
 8007254:	00000400 	.word	0x00000400
 8007258:	20000158 	.word	0x20000158
 800725c:	20000300 	.word	0x20000300

08007260 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007272:	f107 0308 	add.w	r3, r7, #8
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	605a      	str	r2, [r3, #4]
 800727c:	609a      	str	r2, [r3, #8]
 800727e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007280:	463b      	mov	r3, r7
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8007288:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <MX_TIM1_Init+0x9c>)
 800728a:	4a20      	ldr	r2, [pc, #128]	; (800730c <MX_TIM1_Init+0xa0>)
 800728c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1439;
 800728e:	4b1e      	ldr	r3, [pc, #120]	; (8007308 <MX_TIM1_Init+0x9c>)
 8007290:	f240 529f 	movw	r2, #1439	; 0x59f
 8007294:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007296:	4b1c      	ldr	r3, [pc, #112]	; (8007308 <MX_TIM1_Init+0x9c>)
 8007298:	2200      	movs	r2, #0
 800729a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800729c:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <MX_TIM1_Init+0x9c>)
 800729e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80072a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072a4:	4b18      	ldr	r3, [pc, #96]	; (8007308 <MX_TIM1_Init+0x9c>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80072aa:	4b17      	ldr	r3, [pc, #92]	; (8007308 <MX_TIM1_Init+0x9c>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072b0:	4b15      	ldr	r3, [pc, #84]	; (8007308 <MX_TIM1_Init+0x9c>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80072b6:	4814      	ldr	r0, [pc, #80]	; (8007308 <MX_TIM1_Init+0x9c>)
 80072b8:	f003 f964 	bl	800a584 <HAL_TIM_Base_Init>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80072c2:	f7f9 fd77 	bl	8000db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80072cc:	f107 0308 	add.w	r3, r7, #8
 80072d0:	4619      	mov	r1, r3
 80072d2:	480d      	ldr	r0, [pc, #52]	; (8007308 <MX_TIM1_Init+0x9c>)
 80072d4:	f003 fcb0 	bl	800ac38 <HAL_TIM_ConfigClockSource>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80072de:	f7f9 fd69 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072e2:	2300      	movs	r3, #0
 80072e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072e6:	2300      	movs	r3, #0
 80072e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80072ea:	463b      	mov	r3, r7
 80072ec:	4619      	mov	r1, r3
 80072ee:	4806      	ldr	r0, [pc, #24]	; (8007308 <MX_TIM1_Init+0x9c>)
 80072f0:	f004 f82e 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80072fa:	f7f9 fd5b 	bl	8000db4 <Error_Handler>
  }

}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000258 	.word	0x20000258
 800730c:	40012c00 	.word	0x40012c00

08007310 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007316:	f107 0320 	add.w	r3, r7, #32
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007320:	1d3b      	adds	r3, r7, #4
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	605a      	str	r2, [r3, #4]
 8007328:	609a      	str	r2, [r3, #8]
 800732a:	60da      	str	r2, [r3, #12]
 800732c:	611a      	str	r2, [r3, #16]
 800732e:	615a      	str	r2, [r3, #20]
 8007330:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8007332:	4b23      	ldr	r3, [pc, #140]	; (80073c0 <MX_TIM2_Init+0xb0>)
 8007334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007338:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800733a:	4b21      	ldr	r3, [pc, #132]	; (80073c0 <MX_TIM2_Init+0xb0>)
 800733c:	2200      	movs	r2, #0
 800733e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007340:	4b1f      	ldr	r3, [pc, #124]	; (80073c0 <MX_TIM2_Init+0xb0>)
 8007342:	2200      	movs	r2, #0
 8007344:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8007346:	4b1e      	ldr	r3, [pc, #120]	; (80073c0 <MX_TIM2_Init+0xb0>)
 8007348:	f640 72ff 	movw	r2, #4095	; 0xfff
 800734c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800734e:	4b1c      	ldr	r3, [pc, #112]	; (80073c0 <MX_TIM2_Init+0xb0>)
 8007350:	2200      	movs	r2, #0
 8007352:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007354:	4b1a      	ldr	r3, [pc, #104]	; (80073c0 <MX_TIM2_Init+0xb0>)
 8007356:	2200      	movs	r2, #0
 8007358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800735a:	4819      	ldr	r0, [pc, #100]	; (80073c0 <MX_TIM2_Init+0xb0>)
 800735c:	f003 f9b4 	bl	800a6c8 <HAL_TIM_PWM_Init>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8007366:	f7f9 fd25 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800736a:	2300      	movs	r3, #0
 800736c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800736e:	2300      	movs	r3, #0
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007372:	f107 0320 	add.w	r3, r7, #32
 8007376:	4619      	mov	r1, r3
 8007378:	4811      	ldr	r0, [pc, #68]	; (80073c0 <MX_TIM2_Init+0xb0>)
 800737a:	f003 ffe9 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007384:	f7f9 fd16 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007388:	2360      	movs	r3, #96	; 0x60
 800738a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4095;
 800738c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800739a:	1d3b      	adds	r3, r7, #4
 800739c:	2200      	movs	r2, #0
 800739e:	4619      	mov	r1, r3
 80073a0:	4807      	ldr	r0, [pc, #28]	; (80073c0 <MX_TIM2_Init+0xb0>)
 80073a2:	f003 fb8b 	bl	800aabc <HAL_TIM_PWM_ConfigChannel>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80073ac:	f7f9 fd02 	bl	8000db4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80073b0:	4803      	ldr	r0, [pc, #12]	; (80073c0 <MX_TIM2_Init+0xb0>)
 80073b2:	f000 f849 	bl	8007448 <HAL_TIM_MspPostInit>

}
 80073b6:	bf00      	nop
 80073b8:	3728      	adds	r7, #40	; 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	200002a0 	.word	0x200002a0

080073c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0d      	ldr	r2, [pc, #52]	; (8007408 <HAL_TIM_Base_MspInit+0x44>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d113      	bne.n	80073fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80073d6:	4b0d      	ldr	r3, [pc, #52]	; (800740c <HAL_TIM_Base_MspInit+0x48>)
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	4a0c      	ldr	r2, [pc, #48]	; (800740c <HAL_TIM_Base_MspInit+0x48>)
 80073dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073e0:	6193      	str	r3, [r2, #24]
 80073e2:	4b0a      	ldr	r3, [pc, #40]	; (800740c <HAL_TIM_Base_MspInit+0x48>)
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80073ee:	2200      	movs	r2, #0
 80073f0:	2100      	movs	r1, #0
 80073f2:	2019      	movs	r0, #25
 80073f4:	f000 fdeb 	bl	8007fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80073f8:	2019      	movs	r0, #25
 80073fa:	f000 fe04 	bl	8008006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40021000 	.word	0x40021000

08007410 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007420:	d10b      	bne.n	800743a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007422:	4b08      	ldr	r3, [pc, #32]	; (8007444 <HAL_TIM_PWM_MspInit+0x34>)
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <HAL_TIM_PWM_MspInit+0x34>)
 8007428:	f043 0301 	orr.w	r3, r3, #1
 800742c:	61d3      	str	r3, [r2, #28]
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_TIM_PWM_MspInit+0x34>)
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800743a:	bf00      	nop
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	bc80      	pop	{r7}
 8007442:	4770      	bx	lr
 8007444:	40021000 	.word	0x40021000

08007448 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007450:	f107 0310 	add.w	r3, r7, #16
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	609a      	str	r2, [r3, #8]
 800745c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007466:	d117      	bne.n	8007498 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007468:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <HAL_TIM_MspPostInit+0x58>)
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <HAL_TIM_MspPostInit+0x58>)
 800746e:	f043 0304 	orr.w	r3, r3, #4
 8007472:	6193      	str	r3, [r2, #24]
 8007474:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <HAL_TIM_MspPostInit+0x58>)
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8007480:	2301      	movs	r3, #1
 8007482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007484:	2302      	movs	r3, #2
 8007486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007488:	2302      	movs	r3, #2
 800748a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	4619      	mov	r1, r3
 8007492:	4804      	ldr	r0, [pc, #16]	; (80074a4 <HAL_TIM_MspPostInit+0x5c>)
 8007494:	f000 fe48 	bl	8008128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007498:	bf00      	nop
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40021000 	.word	0x40021000
 80074a4:	40010800 	.word	0x40010800

080074a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80074a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80074aa:	e003      	b.n	80074b4 <LoopCopyDataInit>

080074ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80074ac:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80074ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80074b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80074b2:	3104      	adds	r1, #4

080074b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80074b4:	480a      	ldr	r0, [pc, #40]	; (80074e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80074b6:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80074b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80074ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80074bc:	d3f6      	bcc.n	80074ac <CopyDataInit>
  ldr r2, =_sbss
 80074be:	4a0a      	ldr	r2, [pc, #40]	; (80074e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80074c0:	e002      	b.n	80074c8 <LoopFillZerobss>

080074c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80074c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80074c4:	f842 3b04 	str.w	r3, [r2], #4

080074c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80074c8:	4b08      	ldr	r3, [pc, #32]	; (80074ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80074ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80074cc:	d3f9      	bcc.n	80074c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80074ce:	f7ff fec7 	bl	8007260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074d2:	f003 ffb3 	bl	800b43c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80074d6:	f7f9 f835 	bl	8000544 <main>
  bx lr
 80074da:	4770      	bx	lr
  ldr r3, =_sidata
 80074dc:	0800e920 	.word	0x0800e920
  ldr r0, =_sdata
 80074e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80074e4:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 80074e8:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 80074ec:	200002fc 	.word	0x200002fc

080074f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80074f0:	e7fe      	b.n	80074f0 <ADC1_2_IRQHandler>
	...

080074f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074f8:	4b08      	ldr	r3, [pc, #32]	; (800751c <HAL_Init+0x28>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a07      	ldr	r2, [pc, #28]	; (800751c <HAL_Init+0x28>)
 80074fe:	f043 0310 	orr.w	r3, r3, #16
 8007502:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007504:	2003      	movs	r0, #3
 8007506:	f000 fd57 	bl	8007fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800750a:	2000      	movs	r0, #0
 800750c:	f000 f808 	bl	8007520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007510:	f7ff fde8 	bl	80070e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40022000 	.word	0x40022000

08007520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007528:	4b12      	ldr	r3, [pc, #72]	; (8007574 <HAL_InitTick+0x54>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	4b12      	ldr	r3, [pc, #72]	; (8007578 <HAL_InitTick+0x58>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	4619      	mov	r1, r3
 8007532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007536:	fbb3 f3f1 	udiv	r3, r3, r1
 800753a:	fbb2 f3f3 	udiv	r3, r2, r3
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fd6f 	bl	8008022 <HAL_SYSTICK_Config>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e00e      	b.n	800756c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b0f      	cmp	r3, #15
 8007552:	d80a      	bhi.n	800756a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007554:	2200      	movs	r2, #0
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	f000 fd37 	bl	8007fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007560:	4a06      	ldr	r2, [pc, #24]	; (800757c <HAL_InitTick+0x5c>)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	e000      	b.n	800756c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20000028 	.word	0x20000028
 8007578:	20000030 	.word	0x20000030
 800757c:	2000002c 	.word	0x2000002c

08007580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <HAL_IncTick+0x1c>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <HAL_IncTick+0x20>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4413      	add	r3, r2
 8007590:	4a03      	ldr	r2, [pc, #12]	; (80075a0 <HAL_IncTick+0x20>)
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr
 800759c:	20000030 	.word	0x20000030
 80075a0:	200002e8 	.word	0x200002e8

080075a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
  return uwTick;
 80075a8:	4b02      	ldr	r3, [pc, #8]	; (80075b4 <HAL_GetTick+0x10>)
 80075aa:	681b      	ldr	r3, [r3, #0]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr
 80075b4:	200002e8 	.word	0x200002e8

080075b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80075c0:	f7ff fff0 	bl	80075a4 <HAL_GetTick>
 80075c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d005      	beq.n	80075de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <HAL_Delay+0x44>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80075de:	bf00      	nop
 80075e0:	f7ff ffe0 	bl	80075a4 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d8f7      	bhi.n	80075e0 <HAL_Delay+0x28>
  {
  }
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20000030 	.word	0x20000030

08007600 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0be      	b.n	80077a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	2b00      	cmp	r3, #0
 800762e:	d109      	bne.n	8007644 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7f8 fdc2 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fbb1 	bl	8007dac <ADC_ConversionStop_Disable>
 800764a:	4603      	mov	r3, r0
 800764c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 8099 	bne.w	800778e <HAL_ADC_Init+0x18e>
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f040 8095 	bne.w	800778e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800766c:	f023 0302 	bic.w	r3, r3, #2
 8007670:	f043 0202 	orr.w	r2, r3, #2
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007680:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7b1b      	ldrb	r3, [r3, #12]
 8007686:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007688:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4313      	orrs	r3, r2
 800768e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007698:	d003      	beq.n	80076a2 <HAL_ADC_Init+0xa2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d102      	bne.n	80076a8 <HAL_ADC_Init+0xa8>
 80076a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076a6:	e000      	b.n	80076aa <HAL_ADC_Init+0xaa>
 80076a8:	2300      	movs	r3, #0
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	7d1b      	ldrb	r3, [r3, #20]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d119      	bne.n	80076ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7b1b      	ldrb	r3, [r3, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d109      	bne.n	80076d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	035a      	lsls	r2, r3, #13
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	e00b      	b.n	80076ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	f043 0201 	orr.w	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	4b28      	ldr	r3, [pc, #160]	; (80077a8 <HAL_ADC_Init+0x1a8>)
 8007708:	4013      	ands	r3, r2
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	430b      	orrs	r3, r1
 8007712:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800771c:	d003      	beq.n	8007726 <HAL_ADC_Init+0x126>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d104      	bne.n	8007730 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	3b01      	subs	r3, #1
 800772c:	051b      	lsls	r3, r3, #20
 800772e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	430a      	orrs	r2, r1
 8007742:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	4b18      	ldr	r3, [pc, #96]	; (80077ac <HAL_ADC_Init+0x1ac>)
 800774c:	4013      	ands	r3, r2
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	d10b      	bne.n	800776c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	f043 0201 	orr.w	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800776a:	e018      	b.n	800779e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	f023 0312 	bic.w	r3, r3, #18
 8007774:	f043 0210 	orr.w	r2, r3, #16
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	f043 0201 	orr.w	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800778c:	e007      	b.n	800779e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	f043 0210 	orr.w	r2, r3, #16
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	ffe1f7fd 	.word	0xffe1f7fd
 80077ac:	ff1f0efe 	.word	0xff1f0efe

080077b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d101      	bne.n	80077ca <HAL_ADC_Start+0x1a>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e098      	b.n	80078fc <HAL_ADC_Start+0x14c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa98 	bl	8007d08 <ADC_Enable>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f040 8087 	bne.w	80078f2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ec:	f023 0301 	bic.w	r3, r3, #1
 80077f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a41      	ldr	r2, [pc, #260]	; (8007904 <HAL_ADC_Start+0x154>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d105      	bne.n	800780e <HAL_ADC_Start+0x5e>
 8007802:	4b41      	ldr	r3, [pc, #260]	; (8007908 <HAL_ADC_Start+0x158>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d115      	bne.n	800783a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007824:	2b00      	cmp	r3, #0
 8007826:	d026      	beq.n	8007876 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007830:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007838:	e01d      	b.n	8007876 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2f      	ldr	r2, [pc, #188]	; (8007908 <HAL_ADC_Start+0x158>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d004      	beq.n	800785a <HAL_ADC_Start+0xaa>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2b      	ldr	r2, [pc, #172]	; (8007904 <HAL_ADC_Start+0x154>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d10d      	bne.n	8007876 <HAL_ADC_Start+0xc6>
 800785a:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <HAL_ADC_Start+0x158>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800786e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d006      	beq.n	8007890 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	f023 0206 	bic.w	r2, r3, #6
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	62da      	str	r2, [r3, #44]	; 0x2c
 800788e:	e002      	b.n	8007896 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f06f 0202 	mvn.w	r2, #2
 80078a6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80078b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80078b6:	d113      	bne.n	80078e0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80078bc:	4a11      	ldr	r2, [pc, #68]	; (8007904 <HAL_ADC_Start+0x154>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d105      	bne.n	80078ce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80078c2:	4b11      	ldr	r3, [pc, #68]	; (8007908 <HAL_ADC_Start+0x158>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d108      	bne.n	80078e0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80078dc:	609a      	str	r2, [r3, #8]
 80078de:	e00c      	b.n	80078fa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80078ee:	609a      	str	r2, [r3, #8]
 80078f0:	e003      	b.n	80078fa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40012800 	.word	0x40012800
 8007908:	40012400 	.word	0x40012400

0800790c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8007922:	f7ff fe3f 	bl	80075a4 <HAL_GetTick>
 8007926:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	f043 0220 	orr.w	r2, r3, #32
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e0c8      	b.n	8007ae0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d12a      	bne.n	80079b2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007966:	2b00      	cmp	r3, #0
 8007968:	d123      	bne.n	80079b2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800796a:	e01a      	b.n	80079a2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007972:	d016      	beq.n	80079a2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_ADC_PollForConversion+0x7e>
 800797a:	f7ff fe13 	bl	80075a4 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d20b      	bcs.n	80079a2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	f043 0204 	orr.w	r2, r3, #4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e09e      	b.n	8007ae0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0dd      	beq.n	800796c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80079b0:	e06c      	b.n	8007a8c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80079b2:	4b4d      	ldr	r3, [pc, #308]	; (8007ae8 <HAL_ADC_PollForConversion+0x1dc>)
 80079b4:	681c      	ldr	r4, [r3, #0]
 80079b6:	2002      	movs	r0, #2
 80079b8:	f001 fa32 	bl	8008e20 <HAL_RCCEx_GetPeriphCLKFreq>
 80079bc:	4603      	mov	r3, r0
 80079be:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6919      	ldr	r1, [r3, #16]
 80079c8:	4b48      	ldr	r3, [pc, #288]	; (8007aec <HAL_ADC_PollForConversion+0x1e0>)
 80079ca:	400b      	ands	r3, r1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d118      	bne.n	8007a02 <HAL_ADC_PollForConversion+0xf6>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68d9      	ldr	r1, [r3, #12]
 80079d6:	4b46      	ldr	r3, [pc, #280]	; (8007af0 <HAL_ADC_PollForConversion+0x1e4>)
 80079d8:	400b      	ands	r3, r1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d111      	bne.n	8007a02 <HAL_ADC_PollForConversion+0xf6>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6919      	ldr	r1, [r3, #16]
 80079e4:	4b43      	ldr	r3, [pc, #268]	; (8007af4 <HAL_ADC_PollForConversion+0x1e8>)
 80079e6:	400b      	ands	r3, r1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d108      	bne.n	80079fe <HAL_ADC_PollForConversion+0xf2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68d9      	ldr	r1, [r3, #12]
 80079f2:	4b41      	ldr	r3, [pc, #260]	; (8007af8 <HAL_ADC_PollForConversion+0x1ec>)
 80079f4:	400b      	ands	r3, r1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_ADC_PollForConversion+0xf2>
 80079fa:	2314      	movs	r3, #20
 80079fc:	e020      	b.n	8007a40 <HAL_ADC_PollForConversion+0x134>
 80079fe:	2329      	movs	r3, #41	; 0x29
 8007a00:	e01e      	b.n	8007a40 <HAL_ADC_PollForConversion+0x134>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6919      	ldr	r1, [r3, #16]
 8007a08:	4b3a      	ldr	r3, [pc, #232]	; (8007af4 <HAL_ADC_PollForConversion+0x1e8>)
 8007a0a:	400b      	ands	r3, r1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <HAL_ADC_PollForConversion+0x112>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68d9      	ldr	r1, [r3, #12]
 8007a16:	4b38      	ldr	r3, [pc, #224]	; (8007af8 <HAL_ADC_PollForConversion+0x1ec>)
 8007a18:	400b      	ands	r3, r1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <HAL_ADC_PollForConversion+0x12e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6919      	ldr	r1, [r3, #16]
 8007a24:	4b35      	ldr	r3, [pc, #212]	; (8007afc <HAL_ADC_PollForConversion+0x1f0>)
 8007a26:	400b      	ands	r3, r1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d108      	bne.n	8007a3e <HAL_ADC_PollForConversion+0x132>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68d9      	ldr	r1, [r3, #12]
 8007a32:	4b32      	ldr	r3, [pc, #200]	; (8007afc <HAL_ADC_PollForConversion+0x1f0>)
 8007a34:	400b      	ands	r3, r1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_ADC_PollForConversion+0x132>
 8007a3a:	2354      	movs	r3, #84	; 0x54
 8007a3c:	e000      	b.n	8007a40 <HAL_ADC_PollForConversion+0x134>
 8007a3e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007a46:	e01d      	b.n	8007a84 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4e:	d016      	beq.n	8007a7e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <HAL_ADC_PollForConversion+0x15a>
 8007a56:	f7ff fda5 	bl	80075a4 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d20b      	bcs.n	8007a7e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e030      	b.n	8007ae0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d8dd      	bhi.n	8007a48 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0212 	mvn.w	r2, #18
 8007a94:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007aac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007ab0:	d115      	bne.n	8007ade <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d111      	bne.n	8007ade <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	f043 0201 	orr.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	371c      	adds	r7, #28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd90      	pop	{r4, r7, pc}
 8007ae8:	20000028 	.word	0x20000028
 8007aec:	24924924 	.word	0x24924924
 8007af0:	00924924 	.word	0x00924924
 8007af4:	12492492 	.word	0x12492492
 8007af8:	00492492 	.word	0x00492492
 8007afc:	00249249 	.word	0x00249249

08007b00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr

08007b18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_ADC_ConfigChannel+0x20>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e0dc      	b.n	8007cf2 <HAL_ADC_ConfigChannel+0x1da>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	d81c      	bhi.n	8007b82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	3b05      	subs	r3, #5
 8007b5a:	221f      	movs	r2, #31
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	43db      	mvns	r3, r3
 8007b62:	4019      	ands	r1, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	3b05      	subs	r3, #5
 8007b74:	fa00 f203 	lsl.w	r2, r0, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	635a      	str	r2, [r3, #52]	; 0x34
 8007b80:	e03c      	b.n	8007bfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b0c      	cmp	r3, #12
 8007b88:	d81c      	bhi.n	8007bc4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	3b23      	subs	r3, #35	; 0x23
 8007b9c:	221f      	movs	r2, #31
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	4019      	ands	r1, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3b23      	subs	r3, #35	; 0x23
 8007bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8007bc2:	e01b      	b.n	8007bfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3b41      	subs	r3, #65	; 0x41
 8007bd6:	221f      	movs	r2, #31
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	4019      	ands	r1, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	3b41      	subs	r3, #65	; 0x41
 8007bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d91c      	bls.n	8007c3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68d9      	ldr	r1, [r3, #12]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	3b1e      	subs	r3, #30
 8007c16:	2207      	movs	r2, #7
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	43db      	mvns	r3, r3
 8007c1e:	4019      	ands	r1, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	6898      	ldr	r0, [r3, #8]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	4413      	add	r3, r2
 8007c2e:	3b1e      	subs	r3, #30
 8007c30:	fa00 f203 	lsl.w	r2, r0, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	60da      	str	r2, [r3, #12]
 8007c3c:	e019      	b.n	8007c72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6919      	ldr	r1, [r3, #16]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	4413      	add	r3, r2
 8007c4e:	2207      	movs	r2, #7
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	43db      	mvns	r3, r3
 8007c56:	4019      	ands	r1, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6898      	ldr	r0, [r3, #8]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	4613      	mov	r3, r2
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	4413      	add	r3, r2
 8007c66:	fa00 f203 	lsl.w	r2, r0, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d003      	beq.n	8007c82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007c7e:	2b11      	cmp	r3, #17
 8007c80:	d132      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a1d      	ldr	r2, [pc, #116]	; (8007cfc <HAL_ADC_ConfigChannel+0x1e4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d125      	bne.n	8007cd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d126      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007ca8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b10      	cmp	r3, #16
 8007cb0:	d11a      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007cb2:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <HAL_ADC_ConfigChannel+0x1e8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <HAL_ADC_ConfigChannel+0x1ec>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	0c9a      	lsrs	r2, r3, #18
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007cc8:	e002      	b.n	8007cd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f9      	bne.n	8007cca <HAL_ADC_ConfigChannel+0x1b2>
 8007cd6:	e007      	b.n	8007ce8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f043 0220 	orr.w	r2, r3, #32
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr
 8007cfc:	40012400 	.word	0x40012400
 8007d00:	20000028 	.word	0x20000028
 8007d04:	431bde83 	.word	0x431bde83

08007d08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d039      	beq.n	8007d9a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0201 	orr.w	r2, r2, #1
 8007d34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007d36:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <ADC_Enable+0x9c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	; (8007da8 <ADC_Enable+0xa0>)
 8007d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d40:	0c9b      	lsrs	r3, r3, #18
 8007d42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007d44:	e002      	b.n	8007d4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f9      	bne.n	8007d46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007d52:	f7ff fc27 	bl	80075a4 <HAL_GetTick>
 8007d56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007d58:	e018      	b.n	8007d8c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007d5a:	f7ff fc23 	bl	80075a4 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d911      	bls.n	8007d8c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f043 0210 	orr.w	r2, r3, #16
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	f043 0201 	orr.w	r2, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e007      	b.n	8007d9c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d1df      	bne.n	8007d5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000028 	.word	0x20000028
 8007da8:	431bde83 	.word	0x431bde83

08007dac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d127      	bne.n	8007e16 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0201 	bic.w	r2, r2, #1
 8007dd4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007dd6:	f7ff fbe5 	bl	80075a4 <HAL_GetTick>
 8007dda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007ddc:	e014      	b.n	8007e08 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007dde:	f7ff fbe1 	bl	80075a4 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d90d      	bls.n	8007e08 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	f043 0210 	orr.w	r2, r3, #16
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	f043 0201 	orr.w	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e007      	b.n	8007e18 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d0e3      	beq.n	8007dde <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <__NVIC_SetPriorityGrouping+0x44>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e52:	4a04      	ldr	r2, [pc, #16]	; (8007e64 <__NVIC_SetPriorityGrouping+0x44>)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	60d3      	str	r3, [r2, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc80      	pop	{r7}
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	e000ed00 	.word	0xe000ed00

08007e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e6c:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <__NVIC_GetPriorityGrouping+0x18>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	0a1b      	lsrs	r3, r3, #8
 8007e72:	f003 0307 	and.w	r3, r3, #7
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	e000ed00 	.word	0xe000ed00

08007e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	db0b      	blt.n	8007eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	f003 021f 	and.w	r2, r3, #31
 8007e9c:	4906      	ldr	r1, [pc, #24]	; (8007eb8 <__NVIC_EnableIRQ+0x34>)
 8007e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8007eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr
 8007eb8:	e000e100 	.word	0xe000e100

08007ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6039      	str	r1, [r7, #0]
 8007ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	db0a      	blt.n	8007ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	490c      	ldr	r1, [pc, #48]	; (8007f08 <__NVIC_SetPriority+0x4c>)
 8007ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eda:	0112      	lsls	r2, r2, #4
 8007edc:	b2d2      	uxtb	r2, r2
 8007ede:	440b      	add	r3, r1
 8007ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ee4:	e00a      	b.n	8007efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	4908      	ldr	r1, [pc, #32]	; (8007f0c <__NVIC_SetPriority+0x50>)
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	3b04      	subs	r3, #4
 8007ef4:	0112      	lsls	r2, r2, #4
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	440b      	add	r3, r1
 8007efa:	761a      	strb	r2, [r3, #24]
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	e000e100 	.word	0xe000e100
 8007f0c:	e000ed00 	.word	0xe000ed00

08007f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b089      	sub	sp, #36	; 0x24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f1c3 0307 	rsb	r3, r3, #7
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	bf28      	it	cs
 8007f2e:	2304      	movcs	r3, #4
 8007f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	3304      	adds	r3, #4
 8007f36:	2b06      	cmp	r3, #6
 8007f38:	d902      	bls.n	8007f40 <NVIC_EncodePriority+0x30>
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	3b03      	subs	r3, #3
 8007f3e:	e000      	b.n	8007f42 <NVIC_EncodePriority+0x32>
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f44:	f04f 32ff 	mov.w	r2, #4294967295
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4e:	43da      	mvns	r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	401a      	ands	r2, r3
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f58:	f04f 31ff 	mov.w	r1, #4294967295
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f62:	43d9      	mvns	r1, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f68:	4313      	orrs	r3, r2
         );
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3724      	adds	r7, #36	; 0x24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bc80      	pop	{r7}
 8007f72:	4770      	bx	lr

08007f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f84:	d301      	bcc.n	8007f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f86:	2301      	movs	r3, #1
 8007f88:	e00f      	b.n	8007faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f8a:	4a0a      	ldr	r2, [pc, #40]	; (8007fb4 <SysTick_Config+0x40>)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f92:	210f      	movs	r1, #15
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	f7ff ff90 	bl	8007ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f9c:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <SysTick_Config+0x40>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fa2:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <SysTick_Config+0x40>)
 8007fa4:	2207      	movs	r2, #7
 8007fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	e000e010 	.word	0xe000e010

08007fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff2d 	bl	8007e20 <__NVIC_SetPriorityGrouping>
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b086      	sub	sp, #24
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fe0:	f7ff ff42 	bl	8007e68 <__NVIC_GetPriorityGrouping>
 8007fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	6978      	ldr	r0, [r7, #20]
 8007fec:	f7ff ff90 	bl	8007f10 <NVIC_EncodePriority>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff ff5f 	bl	8007ebc <__NVIC_SetPriority>
}
 8007ffe:	bf00      	nop
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	4603      	mov	r3, r0
 800800e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff ff35 	bl	8007e84 <__NVIC_EnableIRQ>
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff ffa2 	bl	8007f74 <SysTick_Config>
 8008030:	4603      	mov	r3, r0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800804e:	2b02      	cmp	r3, #2
 8008050:	d005      	beq.n	800805e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2204      	movs	r2, #4
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	e051      	b.n	8008102 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 020e 	bic.w	r2, r2, #14
 800806c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0201 	bic.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a22      	ldr	r2, [pc, #136]	; (800810c <HAL_DMA_Abort_IT+0xd0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d029      	beq.n	80080dc <HAL_DMA_Abort_IT+0xa0>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a20      	ldr	r2, [pc, #128]	; (8008110 <HAL_DMA_Abort_IT+0xd4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d022      	beq.n	80080d8 <HAL_DMA_Abort_IT+0x9c>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a1f      	ldr	r2, [pc, #124]	; (8008114 <HAL_DMA_Abort_IT+0xd8>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d01a      	beq.n	80080d2 <HAL_DMA_Abort_IT+0x96>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1d      	ldr	r2, [pc, #116]	; (8008118 <HAL_DMA_Abort_IT+0xdc>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d012      	beq.n	80080cc <HAL_DMA_Abort_IT+0x90>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a1c      	ldr	r2, [pc, #112]	; (800811c <HAL_DMA_Abort_IT+0xe0>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00a      	beq.n	80080c6 <HAL_DMA_Abort_IT+0x8a>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1a      	ldr	r2, [pc, #104]	; (8008120 <HAL_DMA_Abort_IT+0xe4>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d102      	bne.n	80080c0 <HAL_DMA_Abort_IT+0x84>
 80080ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80080be:	e00e      	b.n	80080de <HAL_DMA_Abort_IT+0xa2>
 80080c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080c4:	e00b      	b.n	80080de <HAL_DMA_Abort_IT+0xa2>
 80080c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080ca:	e008      	b.n	80080de <HAL_DMA_Abort_IT+0xa2>
 80080cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d0:	e005      	b.n	80080de <HAL_DMA_Abort_IT+0xa2>
 80080d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080d6:	e002      	b.n	80080de <HAL_DMA_Abort_IT+0xa2>
 80080d8:	2310      	movs	r3, #16
 80080da:	e000      	b.n	80080de <HAL_DMA_Abort_IT+0xa2>
 80080dc:	2301      	movs	r3, #1
 80080de:	4a11      	ldr	r2, [pc, #68]	; (8008124 <HAL_DMA_Abort_IT+0xe8>)
 80080e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
    } 
  }
  return status;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	40020008 	.word	0x40020008
 8008110:	4002001c 	.word	0x4002001c
 8008114:	40020030 	.word	0x40020030
 8008118:	40020044 	.word	0x40020044
 800811c:	40020058 	.word	0x40020058
 8008120:	4002006c 	.word	0x4002006c
 8008124:	40020000 	.word	0x40020000

08008128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008128:	b480      	push	{r7}
 800812a:	b08b      	sub	sp, #44	; 0x2c
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008132:	2300      	movs	r3, #0
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008136:	2300      	movs	r3, #0
 8008138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800813a:	e169      	b.n	8008410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800813c:	2201      	movs	r2, #1
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	fa02 f303 	lsl.w	r3, r2, r3
 8008144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	4013      	ands	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	429a      	cmp	r2, r3
 8008156:	f040 8158 	bne.w	800840a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	4a9a      	ldr	r2, [pc, #616]	; (80083c8 <HAL_GPIO_Init+0x2a0>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d05e      	beq.n	8008222 <HAL_GPIO_Init+0xfa>
 8008164:	4a98      	ldr	r2, [pc, #608]	; (80083c8 <HAL_GPIO_Init+0x2a0>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d875      	bhi.n	8008256 <HAL_GPIO_Init+0x12e>
 800816a:	4a98      	ldr	r2, [pc, #608]	; (80083cc <HAL_GPIO_Init+0x2a4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d058      	beq.n	8008222 <HAL_GPIO_Init+0xfa>
 8008170:	4a96      	ldr	r2, [pc, #600]	; (80083cc <HAL_GPIO_Init+0x2a4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d86f      	bhi.n	8008256 <HAL_GPIO_Init+0x12e>
 8008176:	4a96      	ldr	r2, [pc, #600]	; (80083d0 <HAL_GPIO_Init+0x2a8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d052      	beq.n	8008222 <HAL_GPIO_Init+0xfa>
 800817c:	4a94      	ldr	r2, [pc, #592]	; (80083d0 <HAL_GPIO_Init+0x2a8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d869      	bhi.n	8008256 <HAL_GPIO_Init+0x12e>
 8008182:	4a94      	ldr	r2, [pc, #592]	; (80083d4 <HAL_GPIO_Init+0x2ac>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d04c      	beq.n	8008222 <HAL_GPIO_Init+0xfa>
 8008188:	4a92      	ldr	r2, [pc, #584]	; (80083d4 <HAL_GPIO_Init+0x2ac>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d863      	bhi.n	8008256 <HAL_GPIO_Init+0x12e>
 800818e:	4a92      	ldr	r2, [pc, #584]	; (80083d8 <HAL_GPIO_Init+0x2b0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d046      	beq.n	8008222 <HAL_GPIO_Init+0xfa>
 8008194:	4a90      	ldr	r2, [pc, #576]	; (80083d8 <HAL_GPIO_Init+0x2b0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d85d      	bhi.n	8008256 <HAL_GPIO_Init+0x12e>
 800819a:	2b12      	cmp	r3, #18
 800819c:	d82a      	bhi.n	80081f4 <HAL_GPIO_Init+0xcc>
 800819e:	2b12      	cmp	r3, #18
 80081a0:	d859      	bhi.n	8008256 <HAL_GPIO_Init+0x12e>
 80081a2:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <HAL_GPIO_Init+0x80>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	08008223 	.word	0x08008223
 80081ac:	080081fd 	.word	0x080081fd
 80081b0:	0800820f 	.word	0x0800820f
 80081b4:	08008251 	.word	0x08008251
 80081b8:	08008257 	.word	0x08008257
 80081bc:	08008257 	.word	0x08008257
 80081c0:	08008257 	.word	0x08008257
 80081c4:	08008257 	.word	0x08008257
 80081c8:	08008257 	.word	0x08008257
 80081cc:	08008257 	.word	0x08008257
 80081d0:	08008257 	.word	0x08008257
 80081d4:	08008257 	.word	0x08008257
 80081d8:	08008257 	.word	0x08008257
 80081dc:	08008257 	.word	0x08008257
 80081e0:	08008257 	.word	0x08008257
 80081e4:	08008257 	.word	0x08008257
 80081e8:	08008257 	.word	0x08008257
 80081ec:	08008205 	.word	0x08008205
 80081f0:	08008219 	.word	0x08008219
 80081f4:	4a79      	ldr	r2, [pc, #484]	; (80083dc <HAL_GPIO_Init+0x2b4>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80081fa:	e02c      	b.n	8008256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	623b      	str	r3, [r7, #32]
          break;
 8008202:	e029      	b.n	8008258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	3304      	adds	r3, #4
 800820a:	623b      	str	r3, [r7, #32]
          break;
 800820c:	e024      	b.n	8008258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	3308      	adds	r3, #8
 8008214:	623b      	str	r3, [r7, #32]
          break;
 8008216:	e01f      	b.n	8008258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	330c      	adds	r3, #12
 800821e:	623b      	str	r3, [r7, #32]
          break;
 8008220:	e01a      	b.n	8008258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800822a:	2304      	movs	r3, #4
 800822c:	623b      	str	r3, [r7, #32]
          break;
 800822e:	e013      	b.n	8008258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d105      	bne.n	8008244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008238:	2308      	movs	r3, #8
 800823a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	611a      	str	r2, [r3, #16]
          break;
 8008242:	e009      	b.n	8008258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008244:	2308      	movs	r3, #8
 8008246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	615a      	str	r2, [r3, #20]
          break;
 800824e:	e003      	b.n	8008258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008250:	2300      	movs	r3, #0
 8008252:	623b      	str	r3, [r7, #32]
          break;
 8008254:	e000      	b.n	8008258 <HAL_GPIO_Init+0x130>
          break;
 8008256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2bff      	cmp	r3, #255	; 0xff
 800825c:	d801      	bhi.n	8008262 <HAL_GPIO_Init+0x13a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	e001      	b.n	8008266 <HAL_GPIO_Init+0x13e>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3304      	adds	r3, #4
 8008266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	2bff      	cmp	r3, #255	; 0xff
 800826c:	d802      	bhi.n	8008274 <HAL_GPIO_Init+0x14c>
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	e002      	b.n	800827a <HAL_GPIO_Init+0x152>
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	3b08      	subs	r3, #8
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	210f      	movs	r1, #15
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	fa01 f303 	lsl.w	r3, r1, r3
 8008288:	43db      	mvns	r3, r3
 800828a:	401a      	ands	r2, r3
 800828c:	6a39      	ldr	r1, [r7, #32]
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	fa01 f303 	lsl.w	r3, r1, r3
 8008294:	431a      	orrs	r2, r3
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 80b1 	beq.w	800840a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80082a8:	4b4d      	ldr	r3, [pc, #308]	; (80083e0 <HAL_GPIO_Init+0x2b8>)
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	4a4c      	ldr	r2, [pc, #304]	; (80083e0 <HAL_GPIO_Init+0x2b8>)
 80082ae:	f043 0301 	orr.w	r3, r3, #1
 80082b2:	6193      	str	r3, [r2, #24]
 80082b4:	4b4a      	ldr	r3, [pc, #296]	; (80083e0 <HAL_GPIO_Init+0x2b8>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80082c0:	4a48      	ldr	r2, [pc, #288]	; (80083e4 <HAL_GPIO_Init+0x2bc>)
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	089b      	lsrs	r3, r3, #2
 80082c6:	3302      	adds	r3, #2
 80082c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	220f      	movs	r2, #15
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	43db      	mvns	r3, r3
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4013      	ands	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a40      	ldr	r2, [pc, #256]	; (80083e8 <HAL_GPIO_Init+0x2c0>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <HAL_GPIO_Init+0x1ec>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a3f      	ldr	r2, [pc, #252]	; (80083ec <HAL_GPIO_Init+0x2c4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00d      	beq.n	8008310 <HAL_GPIO_Init+0x1e8>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a3e      	ldr	r2, [pc, #248]	; (80083f0 <HAL_GPIO_Init+0x2c8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d007      	beq.n	800830c <HAL_GPIO_Init+0x1e4>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a3d      	ldr	r2, [pc, #244]	; (80083f4 <HAL_GPIO_Init+0x2cc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d101      	bne.n	8008308 <HAL_GPIO_Init+0x1e0>
 8008304:	2303      	movs	r3, #3
 8008306:	e006      	b.n	8008316 <HAL_GPIO_Init+0x1ee>
 8008308:	2304      	movs	r3, #4
 800830a:	e004      	b.n	8008316 <HAL_GPIO_Init+0x1ee>
 800830c:	2302      	movs	r3, #2
 800830e:	e002      	b.n	8008316 <HAL_GPIO_Init+0x1ee>
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <HAL_GPIO_Init+0x1ee>
 8008314:	2300      	movs	r3, #0
 8008316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008318:	f002 0203 	and.w	r2, r2, #3
 800831c:	0092      	lsls	r2, r2, #2
 800831e:	4093      	lsls	r3, r2
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008326:	492f      	ldr	r1, [pc, #188]	; (80083e4 <HAL_GPIO_Init+0x2bc>)
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	089b      	lsrs	r3, r3, #2
 800832c:	3302      	adds	r3, #2
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d006      	beq.n	800834e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008340:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	492c      	ldr	r1, [pc, #176]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	4313      	orrs	r3, r2
 800834a:	600b      	str	r3, [r1, #0]
 800834c:	e006      	b.n	800835c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800834e:	4b2a      	ldr	r3, [pc, #168]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	43db      	mvns	r3, r3
 8008356:	4928      	ldr	r1, [pc, #160]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 8008358:	4013      	ands	r3, r2
 800835a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d006      	beq.n	8008376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008368:	4b23      	ldr	r3, [pc, #140]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	4922      	ldr	r1, [pc, #136]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	4313      	orrs	r3, r2
 8008372:	604b      	str	r3, [r1, #4]
 8008374:	e006      	b.n	8008384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008376:	4b20      	ldr	r3, [pc, #128]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	43db      	mvns	r3, r3
 800837e:	491e      	ldr	r1, [pc, #120]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 8008380:	4013      	ands	r3, r2
 8008382:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d006      	beq.n	800839e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008390:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	4918      	ldr	r1, [pc, #96]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	4313      	orrs	r3, r2
 800839a:	608b      	str	r3, [r1, #8]
 800839c:	e006      	b.n	80083ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800839e:	4b16      	ldr	r3, [pc, #88]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	43db      	mvns	r3, r3
 80083a6:	4914      	ldr	r1, [pc, #80]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d021      	beq.n	80083fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80083b8:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	490e      	ldr	r1, [pc, #56]	; (80083f8 <HAL_GPIO_Init+0x2d0>)
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60cb      	str	r3, [r1, #12]
 80083c4:	e021      	b.n	800840a <HAL_GPIO_Init+0x2e2>
 80083c6:	bf00      	nop
 80083c8:	10320000 	.word	0x10320000
 80083cc:	10310000 	.word	0x10310000
 80083d0:	10220000 	.word	0x10220000
 80083d4:	10210000 	.word	0x10210000
 80083d8:	10120000 	.word	0x10120000
 80083dc:	10110000 	.word	0x10110000
 80083e0:	40021000 	.word	0x40021000
 80083e4:	40010000 	.word	0x40010000
 80083e8:	40010800 	.word	0x40010800
 80083ec:	40010c00 	.word	0x40010c00
 80083f0:	40011000 	.word	0x40011000
 80083f4:	40011400 	.word	0x40011400
 80083f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80083fc:	4b0b      	ldr	r3, [pc, #44]	; (800842c <HAL_GPIO_Init+0x304>)
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	43db      	mvns	r3, r3
 8008404:	4909      	ldr	r1, [pc, #36]	; (800842c <HAL_GPIO_Init+0x304>)
 8008406:	4013      	ands	r3, r2
 8008408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	3301      	adds	r3, #1
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	f47f ae8e 	bne.w	800813c <HAL_GPIO_Init+0x14>
  }
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	372c      	adds	r7, #44	; 0x2c
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr
 800842c:	40010400 	.word	0x40010400

08008430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	807b      	strh	r3, [r7, #2]
 800843c:	4613      	mov	r3, r2
 800843e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008440:	787b      	ldrb	r3, [r7, #1]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008446:	887a      	ldrh	r2, [r7, #2]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800844c:	e003      	b.n	8008456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800844e:	887b      	ldrh	r3, [r7, #2]
 8008450:	041a      	lsls	r2, r3, #16
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	611a      	str	r2, [r3, #16]
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800846a:	4b08      	ldr	r3, [pc, #32]	; (800848c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800846c:	695a      	ldr	r2, [r3, #20]
 800846e:	88fb      	ldrh	r3, [r7, #6]
 8008470:	4013      	ands	r3, r2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008476:	4a05      	ldr	r2, [pc, #20]	; (800848c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008478:	88fb      	ldrh	r3, [r7, #6]
 800847a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	4618      	mov	r0, r3
 8008480:	f7f8 fbc8 	bl	8000c14 <HAL_GPIO_EXTI_Callback>
  }
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	40010400 	.word	0x40010400

08008490 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008494:	4b03      	ldr	r3, [pc, #12]	; (80084a4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]
}
 800849a:	bf00      	nop
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	420e0020 	.word	0x420e0020

080084a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e26c      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8087 	beq.w	80085d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80084c8:	4b92      	ldr	r3, [pc, #584]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f003 030c 	and.w	r3, r3, #12
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d00c      	beq.n	80084ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80084d4:	4b8f      	ldr	r3, [pc, #572]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f003 030c 	and.w	r3, r3, #12
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d112      	bne.n	8008506 <HAL_RCC_OscConfig+0x5e>
 80084e0:	4b8c      	ldr	r3, [pc, #560]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ec:	d10b      	bne.n	8008506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084ee:	4b89      	ldr	r3, [pc, #548]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d06c      	beq.n	80085d4 <HAL_RCC_OscConfig+0x12c>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d168      	bne.n	80085d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e246      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800850e:	d106      	bne.n	800851e <HAL_RCC_OscConfig+0x76>
 8008510:	4b80      	ldr	r3, [pc, #512]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a7f      	ldr	r2, [pc, #508]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	e02e      	b.n	800857c <HAL_RCC_OscConfig+0xd4>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10c      	bne.n	8008540 <HAL_RCC_OscConfig+0x98>
 8008526:	4b7b      	ldr	r3, [pc, #492]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a7a      	ldr	r2, [pc, #488]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 800852c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	4b78      	ldr	r3, [pc, #480]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a77      	ldr	r2, [pc, #476]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	e01d      	b.n	800857c <HAL_RCC_OscConfig+0xd4>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008548:	d10c      	bne.n	8008564 <HAL_RCC_OscConfig+0xbc>
 800854a:	4b72      	ldr	r3, [pc, #456]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a71      	ldr	r2, [pc, #452]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	4b6f      	ldr	r3, [pc, #444]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a6e      	ldr	r2, [pc, #440]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 800855c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	e00b      	b.n	800857c <HAL_RCC_OscConfig+0xd4>
 8008564:	4b6b      	ldr	r3, [pc, #428]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a6a      	ldr	r2, [pc, #424]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 800856a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	4b68      	ldr	r3, [pc, #416]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a67      	ldr	r2, [pc, #412]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800857a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d013      	beq.n	80085ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008584:	f7ff f80e 	bl	80075a4 <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800858c:	f7ff f80a 	bl	80075a4 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b64      	cmp	r3, #100	; 0x64
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e1fa      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800859e:	4b5d      	ldr	r3, [pc, #372]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0f0      	beq.n	800858c <HAL_RCC_OscConfig+0xe4>
 80085aa:	e014      	b.n	80085d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ac:	f7fe fffa 	bl	80075a4 <HAL_GetTick>
 80085b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085b2:	e008      	b.n	80085c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085b4:	f7fe fff6 	bl	80075a4 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b64      	cmp	r3, #100	; 0x64
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e1e6      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085c6:	4b53      	ldr	r3, [pc, #332]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f0      	bne.n	80085b4 <HAL_RCC_OscConfig+0x10c>
 80085d2:	e000      	b.n	80085d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d063      	beq.n	80086aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80085e2:	4b4c      	ldr	r3, [pc, #304]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f003 030c 	and.w	r3, r3, #12
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80085ee:	4b49      	ldr	r3, [pc, #292]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f003 030c 	and.w	r3, r3, #12
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d11c      	bne.n	8008634 <HAL_RCC_OscConfig+0x18c>
 80085fa:	4b46      	ldr	r3, [pc, #280]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d116      	bne.n	8008634 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008606:	4b43      	ldr	r3, [pc, #268]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <HAL_RCC_OscConfig+0x176>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d001      	beq.n	800861e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e1ba      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800861e:	4b3d      	ldr	r3, [pc, #244]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4939      	ldr	r1, [pc, #228]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 800862e:	4313      	orrs	r3, r2
 8008630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008632:	e03a      	b.n	80086aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d020      	beq.n	800867e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800863c:	4b36      	ldr	r3, [pc, #216]	; (8008718 <HAL_RCC_OscConfig+0x270>)
 800863e:	2201      	movs	r2, #1
 8008640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008642:	f7fe ffaf 	bl	80075a4 <HAL_GetTick>
 8008646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008648:	e008      	b.n	800865c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800864a:	f7fe ffab 	bl	80075a4 <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	2b02      	cmp	r3, #2
 8008656:	d901      	bls.n	800865c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e19b      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865c:	4b2d      	ldr	r3, [pc, #180]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0f0      	beq.n	800864a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008668:	4b2a      	ldr	r3, [pc, #168]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	4927      	ldr	r1, [pc, #156]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 8008678:	4313      	orrs	r3, r2
 800867a:	600b      	str	r3, [r1, #0]
 800867c:	e015      	b.n	80086aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800867e:	4b26      	ldr	r3, [pc, #152]	; (8008718 <HAL_RCC_OscConfig+0x270>)
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008684:	f7fe ff8e 	bl	80075a4 <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800868c:	f7fe ff8a 	bl	80075a4 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e17a      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800869e:	4b1d      	ldr	r3, [pc, #116]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f0      	bne.n	800868c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d03a      	beq.n	800872c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d019      	beq.n	80086f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086be:	4b17      	ldr	r3, [pc, #92]	; (800871c <HAL_RCC_OscConfig+0x274>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086c4:	f7fe ff6e 	bl	80075a4 <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086cc:	f7fe ff6a 	bl	80075a4 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e15a      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <HAL_RCC_OscConfig+0x26c>)
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80086ea:	2001      	movs	r0, #1
 80086ec:	f000 fac4 	bl	8008c78 <RCC_Delay>
 80086f0:	e01c      	b.n	800872c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086f2:	4b0a      	ldr	r3, [pc, #40]	; (800871c <HAL_RCC_OscConfig+0x274>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086f8:	f7fe ff54 	bl	80075a4 <HAL_GetTick>
 80086fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086fe:	e00f      	b.n	8008720 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008700:	f7fe ff50 	bl	80075a4 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d908      	bls.n	8008720 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e140      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
 8008712:	bf00      	nop
 8008714:	40021000 	.word	0x40021000
 8008718:	42420000 	.word	0x42420000
 800871c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008720:	4b9e      	ldr	r3, [pc, #632]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e9      	bne.n	8008700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80a6 	beq.w	8008886 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800873a:	2300      	movs	r3, #0
 800873c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800873e:	4b97      	ldr	r3, [pc, #604]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10d      	bne.n	8008766 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800874a:	4b94      	ldr	r3, [pc, #592]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	4a93      	ldr	r2, [pc, #588]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008754:	61d3      	str	r3, [r2, #28]
 8008756:	4b91      	ldr	r3, [pc, #580]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800875e:	60bb      	str	r3, [r7, #8]
 8008760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008762:	2301      	movs	r3, #1
 8008764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008766:	4b8e      	ldr	r3, [pc, #568]	; (80089a0 <HAL_RCC_OscConfig+0x4f8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876e:	2b00      	cmp	r3, #0
 8008770:	d118      	bne.n	80087a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008772:	4b8b      	ldr	r3, [pc, #556]	; (80089a0 <HAL_RCC_OscConfig+0x4f8>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a8a      	ldr	r2, [pc, #552]	; (80089a0 <HAL_RCC_OscConfig+0x4f8>)
 8008778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800877c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800877e:	f7fe ff11 	bl	80075a4 <HAL_GetTick>
 8008782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008784:	e008      	b.n	8008798 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008786:	f7fe ff0d 	bl	80075a4 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b64      	cmp	r3, #100	; 0x64
 8008792:	d901      	bls.n	8008798 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e0fd      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008798:	4b81      	ldr	r3, [pc, #516]	; (80089a0 <HAL_RCC_OscConfig+0x4f8>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0f0      	beq.n	8008786 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d106      	bne.n	80087ba <HAL_RCC_OscConfig+0x312>
 80087ac:	4b7b      	ldr	r3, [pc, #492]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	4a7a      	ldr	r2, [pc, #488]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087b2:	f043 0301 	orr.w	r3, r3, #1
 80087b6:	6213      	str	r3, [r2, #32]
 80087b8:	e02d      	b.n	8008816 <HAL_RCC_OscConfig+0x36e>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10c      	bne.n	80087dc <HAL_RCC_OscConfig+0x334>
 80087c2:	4b76      	ldr	r3, [pc, #472]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	4a75      	ldr	r2, [pc, #468]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087c8:	f023 0301 	bic.w	r3, r3, #1
 80087cc:	6213      	str	r3, [r2, #32]
 80087ce:	4b73      	ldr	r3, [pc, #460]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	4a72      	ldr	r2, [pc, #456]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087d4:	f023 0304 	bic.w	r3, r3, #4
 80087d8:	6213      	str	r3, [r2, #32]
 80087da:	e01c      	b.n	8008816 <HAL_RCC_OscConfig+0x36e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b05      	cmp	r3, #5
 80087e2:	d10c      	bne.n	80087fe <HAL_RCC_OscConfig+0x356>
 80087e4:	4b6d      	ldr	r3, [pc, #436]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	4a6c      	ldr	r2, [pc, #432]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087ea:	f043 0304 	orr.w	r3, r3, #4
 80087ee:	6213      	str	r3, [r2, #32]
 80087f0:	4b6a      	ldr	r3, [pc, #424]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	4a69      	ldr	r2, [pc, #420]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80087f6:	f043 0301 	orr.w	r3, r3, #1
 80087fa:	6213      	str	r3, [r2, #32]
 80087fc:	e00b      	b.n	8008816 <HAL_RCC_OscConfig+0x36e>
 80087fe:	4b67      	ldr	r3, [pc, #412]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	4a66      	ldr	r2, [pc, #408]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	6213      	str	r3, [r2, #32]
 800880a:	4b64      	ldr	r3, [pc, #400]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	4a63      	ldr	r2, [pc, #396]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008810:	f023 0304 	bic.w	r3, r3, #4
 8008814:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d015      	beq.n	800884a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800881e:	f7fe fec1 	bl	80075a4 <HAL_GetTick>
 8008822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008824:	e00a      	b.n	800883c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008826:	f7fe febd 	bl	80075a4 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	f241 3288 	movw	r2, #5000	; 0x1388
 8008834:	4293      	cmp	r3, r2
 8008836:	d901      	bls.n	800883c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e0ab      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800883c:	4b57      	ldr	r3, [pc, #348]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0ee      	beq.n	8008826 <HAL_RCC_OscConfig+0x37e>
 8008848:	e014      	b.n	8008874 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800884a:	f7fe feab 	bl	80075a4 <HAL_GetTick>
 800884e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008850:	e00a      	b.n	8008868 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008852:	f7fe fea7 	bl	80075a4 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008860:	4293      	cmp	r3, r2
 8008862:	d901      	bls.n	8008868 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e095      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008868:	4b4c      	ldr	r3, [pc, #304]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1ee      	bne.n	8008852 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d105      	bne.n	8008886 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800887a:	4b48      	ldr	r3, [pc, #288]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	4a47      	ldr	r2, [pc, #284]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008884:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 8081 	beq.w	8008992 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008890:	4b42      	ldr	r3, [pc, #264]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f003 030c 	and.w	r3, r3, #12
 8008898:	2b08      	cmp	r3, #8
 800889a:	d061      	beq.n	8008960 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d146      	bne.n	8008932 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a4:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <HAL_RCC_OscConfig+0x4fc>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088aa:	f7fe fe7b 	bl	80075a4 <HAL_GetTick>
 80088ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b2:	f7fe fe77 	bl	80075a4 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e067      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088c4:	4b35      	ldr	r3, [pc, #212]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1f0      	bne.n	80088b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d8:	d108      	bne.n	80088ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80088da:	4b30      	ldr	r3, [pc, #192]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	492d      	ldr	r1, [pc, #180]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088ec:	4b2b      	ldr	r3, [pc, #172]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a19      	ldr	r1, [r3, #32]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	430b      	orrs	r3, r1
 80088fe:	4927      	ldr	r1, [pc, #156]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008900:	4313      	orrs	r3, r2
 8008902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008904:	4b27      	ldr	r3, [pc, #156]	; (80089a4 <HAL_RCC_OscConfig+0x4fc>)
 8008906:	2201      	movs	r2, #1
 8008908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800890a:	f7fe fe4b 	bl	80075a4 <HAL_GetTick>
 800890e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008910:	e008      	b.n	8008924 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008912:	f7fe fe47 	bl	80075a4 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d901      	bls.n	8008924 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e037      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008924:	4b1d      	ldr	r3, [pc, #116]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0f0      	beq.n	8008912 <HAL_RCC_OscConfig+0x46a>
 8008930:	e02f      	b.n	8008992 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008932:	4b1c      	ldr	r3, [pc, #112]	; (80089a4 <HAL_RCC_OscConfig+0x4fc>)
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008938:	f7fe fe34 	bl	80075a4 <HAL_GetTick>
 800893c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800893e:	e008      	b.n	8008952 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008940:	f7fe fe30 	bl	80075a4 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	2b02      	cmp	r3, #2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e020      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008952:	4b12      	ldr	r3, [pc, #72]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1f0      	bne.n	8008940 <HAL_RCC_OscConfig+0x498>
 800895e:	e018      	b.n	8008992 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e013      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800896c:	4b0b      	ldr	r3, [pc, #44]	; (800899c <HAL_RCC_OscConfig+0x4f4>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	429a      	cmp	r2, r3
 800897e:	d106      	bne.n	800898e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800898a:	429a      	cmp	r2, r3
 800898c:	d001      	beq.n	8008992 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40021000 	.word	0x40021000
 80089a0:	40007000 	.word	0x40007000
 80089a4:	42420060 	.word	0x42420060

080089a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e0d0      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089bc:	4b6a      	ldr	r3, [pc, #424]	; (8008b68 <HAL_RCC_ClockConfig+0x1c0>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d910      	bls.n	80089ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ca:	4b67      	ldr	r3, [pc, #412]	; (8008b68 <HAL_RCC_ClockConfig+0x1c0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f023 0207 	bic.w	r2, r3, #7
 80089d2:	4965      	ldr	r1, [pc, #404]	; (8008b68 <HAL_RCC_ClockConfig+0x1c0>)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089da:	4b63      	ldr	r3, [pc, #396]	; (8008b68 <HAL_RCC_ClockConfig+0x1c0>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d001      	beq.n	80089ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0b8      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d020      	beq.n	8008a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a04:	4b59      	ldr	r3, [pc, #356]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	4a58      	ldr	r2, [pc, #352]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a1c:	4b53      	ldr	r3, [pc, #332]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	4a52      	ldr	r2, [pc, #328]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a28:	4b50      	ldr	r3, [pc, #320]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	494d      	ldr	r1, [pc, #308]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d040      	beq.n	8008ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a4e:	4b47      	ldr	r3, [pc, #284]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d115      	bne.n	8008a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e07f      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d107      	bne.n	8008a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a66:	4b41      	ldr	r3, [pc, #260]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d109      	bne.n	8008a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e073      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a76:	4b3d      	ldr	r3, [pc, #244]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e06b      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a86:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f023 0203 	bic.w	r2, r3, #3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	4936      	ldr	r1, [pc, #216]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a98:	f7fe fd84 	bl	80075a4 <HAL_GetTick>
 8008a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a9e:	e00a      	b.n	8008ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aa0:	f7fe fd80 	bl	80075a4 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e053      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab6:	4b2d      	ldr	r3, [pc, #180]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f003 020c 	and.w	r2, r3, #12
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d1eb      	bne.n	8008aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ac8:	4b27      	ldr	r3, [pc, #156]	; (8008b68 <HAL_RCC_ClockConfig+0x1c0>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d210      	bcs.n	8008af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ad6:	4b24      	ldr	r3, [pc, #144]	; (8008b68 <HAL_RCC_ClockConfig+0x1c0>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f023 0207 	bic.w	r2, r3, #7
 8008ade:	4922      	ldr	r1, [pc, #136]	; (8008b68 <HAL_RCC_ClockConfig+0x1c0>)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ae6:	4b20      	ldr	r3, [pc, #128]	; (8008b68 <HAL_RCC_ClockConfig+0x1c0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d001      	beq.n	8008af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e032      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b04:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	4916      	ldr	r1, [pc, #88]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d009      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	00db      	lsls	r3, r3, #3
 8008b30:	490e      	ldr	r1, [pc, #56]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008b36:	f000 f821 	bl	8008b7c <HAL_RCC_GetSysClockFreq>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <HAL_RCC_ClockConfig+0x1c4>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	490a      	ldr	r1, [pc, #40]	; (8008b70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b48:	5ccb      	ldrb	r3, [r1, r3]
 8008b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4e:	4a09      	ldr	r2, [pc, #36]	; (8008b74 <HAL_RCC_ClockConfig+0x1cc>)
 8008b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <HAL_RCC_ClockConfig+0x1d0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fce2 	bl	8007520 <HAL_InitTick>

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	40022000 	.word	0x40022000
 8008b6c:	40021000 	.word	0x40021000
 8008b70:	0800e8a8 	.word	0x0800e8a8
 8008b74:	20000028 	.word	0x20000028
 8008b78:	2000002c 	.word	0x2000002c

08008b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b7c:	b490      	push	{r4, r7}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008b82:	4b2a      	ldr	r3, [pc, #168]	; (8008c2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8008b84:	1d3c      	adds	r4, r7, #4
 8008b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008b8c:	f240 2301 	movw	r3, #513	; 0x201
 8008b90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61fb      	str	r3, [r7, #28]
 8008b96:	2300      	movs	r3, #0
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008ba6:	4b22      	ldr	r3, [pc, #136]	; (8008c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	f003 030c 	and.w	r3, r3, #12
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	d002      	beq.n	8008bbc <HAL_RCC_GetSysClockFreq+0x40>
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d003      	beq.n	8008bc2 <HAL_RCC_GetSysClockFreq+0x46>
 8008bba:	e02d      	b.n	8008c18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008bbc:	4b1d      	ldr	r3, [pc, #116]	; (8008c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bbe:	623b      	str	r3, [r7, #32]
      break;
 8008bc0:	e02d      	b.n	8008c1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	0c9b      	lsrs	r3, r3, #18
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008bce:	4413      	add	r3, r2
 8008bd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008bd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d013      	beq.n	8008c08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	0c5b      	lsrs	r3, r3, #17
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008bee:	4413      	add	r3, r2
 8008bf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008bf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	4a0e      	ldr	r2, [pc, #56]	; (8008c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bfa:	fb02 f203 	mul.w	r2, r2, r3
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
 8008c06:	e004      	b.n	8008c12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	4a0b      	ldr	r2, [pc, #44]	; (8008c38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c0c:	fb02 f303 	mul.w	r3, r2, r3
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	623b      	str	r3, [r7, #32]
      break;
 8008c16:	e002      	b.n	8008c1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008c18:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c1a:	623b      	str	r3, [r7, #32]
      break;
 8008c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3728      	adds	r7, #40	; 0x28
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bc90      	pop	{r4, r7}
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	0800bffc 	.word	0x0800bffc
 8008c30:	40021000 	.word	0x40021000
 8008c34:	007a1200 	.word	0x007a1200
 8008c38:	003d0900 	.word	0x003d0900

08008c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c40:	4b02      	ldr	r3, [pc, #8]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8008c42:	681b      	ldr	r3, [r3, #0]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr
 8008c4c:	20000028 	.word	0x20000028

08008c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c54:	f7ff fff2 	bl	8008c3c <HAL_RCC_GetHCLKFreq>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	0adb      	lsrs	r3, r3, #11
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	4903      	ldr	r1, [pc, #12]	; (8008c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c66:	5ccb      	ldrb	r3, [r1, r3]
 8008c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	40021000 	.word	0x40021000
 8008c74:	0800e8b8 	.word	0x0800e8b8

08008c78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008c80:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <RCC_Delay+0x34>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a0a      	ldr	r2, [pc, #40]	; (8008cb0 <RCC_Delay+0x38>)
 8008c86:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8a:	0a5b      	lsrs	r3, r3, #9
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008c94:	bf00      	nop
  }
  while (Delay --);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	1e5a      	subs	r2, r3, #1
 8008c9a:	60fa      	str	r2, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1f9      	bne.n	8008c94 <RCC_Delay+0x1c>
}
 8008ca0:	bf00      	nop
 8008ca2:	bf00      	nop
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr
 8008cac:	20000028 	.word	0x20000028
 8008cb0:	10624dd3 	.word	0x10624dd3

08008cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d07d      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cd4:	4b4f      	ldr	r3, [pc, #316]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10d      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ce0:	4b4c      	ldr	r3, [pc, #304]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	4a4b      	ldr	r2, [pc, #300]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cea:	61d3      	str	r3, [r2, #28]
 8008cec:	4b49      	ldr	r3, [pc, #292]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cf4:	60bb      	str	r3, [r7, #8]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cfc:	4b46      	ldr	r3, [pc, #280]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d118      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d08:	4b43      	ldr	r3, [pc, #268]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a42      	ldr	r2, [pc, #264]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d14:	f7fe fc46 	bl	80075a4 <HAL_GetTick>
 8008d18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d1a:	e008      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d1c:	f7fe fc42 	bl	80075a4 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b64      	cmp	r3, #100	; 0x64
 8008d28:	d901      	bls.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e06d      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d2e:	4b3a      	ldr	r3, [pc, #232]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d0f0      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d3a:	4b36      	ldr	r3, [pc, #216]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d02e      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d027      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d58:	4b2e      	ldr	r3, [pc, #184]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d62:	4b2e      	ldr	r3, [pc, #184]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008d64:	2201      	movs	r2, #1
 8008d66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d68:	4b2c      	ldr	r3, [pc, #176]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008d6e:	4a29      	ldr	r2, [pc, #164]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d014      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d7e:	f7fe fc11 	bl	80075a4 <HAL_GetTick>
 8008d82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d84:	e00a      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d86:	f7fe fc0d 	bl	80075a4 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d901      	bls.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e036      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d9c:	4b1d      	ldr	r3, [pc, #116]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d0ee      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008da8:	4b1a      	ldr	r3, [pc, #104]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	4917      	ldr	r1, [pc, #92]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d105      	bne.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dc0:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	4a13      	ldr	r2, [pc, #76]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008dd8:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	490b      	ldr	r1, [pc, #44]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0310 	and.w	r3, r3, #16
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008df6:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	4904      	ldr	r1, [pc, #16]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40021000 	.word	0x40021000
 8008e18:	40007000 	.word	0x40007000
 8008e1c:	42420440 	.word	0x42420440

08008e20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b08d      	sub	sp, #52	; 0x34
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008e28:	4b5a      	ldr	r3, [pc, #360]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8008e2a:	f107 040c 	add.w	r4, r7, #12
 8008e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008e34:	f240 2301 	movw	r3, #513	; 0x201
 8008e38:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3e:	2300      	movs	r3, #0
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e42:	2300      	movs	r3, #0
 8008e44:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d00a      	beq.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b10      	cmp	r3, #16
 8008e58:	f200 8091 	bhi.w	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d04c      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d07c      	beq.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008e68:	e089      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8008e6a:	4b4b      	ldr	r3, [pc, #300]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008e70:	4b49      	ldr	r3, [pc, #292]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 8082 	beq.w	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	0c9b      	lsrs	r3, r3, #18
 8008e82:	f003 030f 	and.w	r3, r3, #15
 8008e86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008e90:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d018      	beq.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e9c:	4b3e      	ldr	r3, [pc, #248]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	0c5b      	lsrs	r3, r3, #17
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008eaa:	4413      	add	r3, r2
 8008eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00d      	beq.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008ebc:	4a37      	ldr	r2, [pc, #220]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	fb02 f303 	mul.w	r3, r2, r3
 8008eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ecc:	e004      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	4a33      	ldr	r2, [pc, #204]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8008ed2:	fb02 f303 	mul.w	r3, r2, r3
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008ed8:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ee4:	d102      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008eea:	e04a      	b.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	4a2c      	ldr	r2, [pc, #176]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8008ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef6:	085b      	lsrs	r3, r3, #1
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008efa:	e042      	b.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8008efc:	4b26      	ldr	r3, [pc, #152]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f0c:	d108      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8008f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f1e:	e01f      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f2a:	d109      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8008f38:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f3e:	e00f      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f4a:	d11c      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008f4c:	4b12      	ldr	r3, [pc, #72]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d016      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8008f58:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008f5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008f5e:	e012      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008f60:	e011      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008f62:	f7ff fe75 	bl	8008c50 <HAL_RCC_GetPCLK2Freq>
 8008f66:	4602      	mov	r2, r0
 8008f68:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	0b9b      	lsrs	r3, r3, #14
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	3301      	adds	r3, #1
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008f7c:	e004      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008f7e:	bf00      	nop
 8008f80:	e002      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008f82:	bf00      	nop
 8008f84:	e000      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008f86:	bf00      	nop
    }
  }
  return (frequency);
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3734      	adds	r7, #52	; 0x34
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd90      	pop	{r4, r7, pc}
 8008f92:	bf00      	nop
 8008f94:	0800c00c 	.word	0x0800c00c
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	007a1200 	.word	0x007a1200
 8008fa0:	003d0900 	.word	0x003d0900
 8008fa4:	aaaaaaab 	.word	0xaaaaaaab

08008fa8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e084      	b.n	80090c8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	7c5b      	ldrb	r3, [r3, #17]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d105      	bne.n	8008fd4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7fd fb7a 	bl	80066c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 faf4 	bl	80095c8 <HAL_RTC_WaitForSynchro>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d004      	beq.n	8008ff0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2204      	movs	r2, #4
 8008fea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e06b      	b.n	80090c8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fbad 	bl	8009750 <RTC_EnterInitMode>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d004      	beq.n	8009006 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2204      	movs	r2, #4
 8009000:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e060      	b.n	80090c8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0207 	bic.w	r2, r2, #7
 8009014:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800901e:	4b2c      	ldr	r3, [pc, #176]	; (80090d0 <HAL_RTC_Init+0x128>)
 8009020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009022:	4a2b      	ldr	r2, [pc, #172]	; (80090d0 <HAL_RTC_Init+0x128>)
 8009024:	f023 0301 	bic.w	r3, r3, #1
 8009028:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800902a:	4b29      	ldr	r3, [pc, #164]	; (80090d0 <HAL_RTC_Init+0x128>)
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	4926      	ldr	r1, [pc, #152]	; (80090d0 <HAL_RTC_Init+0x128>)
 8009038:	4313      	orrs	r3, r2
 800903a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009044:	d003      	beq.n	800904e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e00e      	b.n	800906c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800904e:	2001      	movs	r0, #1
 8009050:	f7ff fee6 	bl	8008e20 <HAL_RCCEx_GetPeriphCLKFreq>
 8009054:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d104      	bne.n	8009066 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2204      	movs	r2, #4
 8009060:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e030      	b.n	80090c8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3b01      	subs	r3, #1
 800906a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f023 010f 	bic.w	r1, r3, #15
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	0c1a      	lsrs	r2, r3, #16
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	0c1b      	lsrs	r3, r3, #16
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	b291      	uxth	r1, r2
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	6812      	ldr	r2, [r2, #0]
 8009094:	430b      	orrs	r3, r1
 8009096:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fb81 	bl	80097a0 <RTC_ExitInitMode>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d004      	beq.n	80090ae <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2204      	movs	r2, #4
 80090a8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e00c      	b.n	80090c8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80090c6:	2300      	movs	r3, #0
  }
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	40006c00 	.word	0x40006c00

080090d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80090d4:	b590      	push	{r4, r7, lr}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	2300      	movs	r3, #0
 80090e6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <HAL_RTC_SetTime+0x20>
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e080      	b.n	80091fa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	7c1b      	ldrb	r3, [r3, #16]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_RTC_SetTime+0x30>
 8009100:	2302      	movs	r3, #2
 8009102:	e07a      	b.n	80091fa <HAL_RTC_SetTime+0x126>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2202      	movs	r2, #2
 800910e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d113      	bne.n	800913e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009120:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	785b      	ldrb	r3, [r3, #1]
 8009128:	4619      	mov	r1, r3
 800912a:	460b      	mov	r3, r1
 800912c:	011b      	lsls	r3, r3, #4
 800912e:	1a5b      	subs	r3, r3, r1
 8009130:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009132:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009138:	4413      	add	r3, r2
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e01e      	b.n	800917c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fb71 	bl	800982a <RTC_Bcd2ToByte>
 8009148:	4603      	mov	r3, r0
 800914a:	461a      	mov	r2, r3
 800914c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009150:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	785b      	ldrb	r3, [r3, #1]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fb66 	bl	800982a <RTC_Bcd2ToByte>
 800915e:	4603      	mov	r3, r0
 8009160:	461a      	mov	r2, r3
 8009162:	4613      	mov	r3, r2
 8009164:	011b      	lsls	r3, r3, #4
 8009166:	1a9b      	subs	r3, r3, r2
 8009168:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800916a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	789b      	ldrb	r3, [r3, #2]
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fb5a 	bl	800982a <RTC_Bcd2ToByte>
 8009176:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009178:	4423      	add	r3, r4
 800917a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800917c:	6979      	ldr	r1, [r7, #20]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 fa7f 	bl	8009682 <RTC_WriteTimeCounter>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2204      	movs	r2, #4
 800918e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e02f      	b.n	80091fa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0205 	bic.w	r2, r2, #5
 80091a8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 fa90 	bl	80096d0 <RTC_ReadAlarmCounter>
 80091b0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b8:	d018      	beq.n	80091ec <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d214      	bcs.n	80091ec <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80091c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80091cc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80091ce:	6939      	ldr	r1, [r7, #16]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fa96 	bl	8009702 <RTC_WriteAlarmCounter>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2204      	movs	r2, #4
 80091e0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e006      	b.n	80091fa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80091f8:	2300      	movs	r3, #0
  }
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd90      	pop	{r4, r7, pc}
	...

08009204 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	61bb      	str	r3, [r7, #24]
 8009214:	2300      	movs	r3, #0
 8009216:	61fb      	str	r3, [r7, #28]
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	2300      	movs	r3, #0
 800921e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_RTC_GetTime+0x28>
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e0b5      	b.n	800939c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e0ac      	b.n	800939c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f9ed 	bl	8009622 <RTC_ReadTimeCounter>
 8009248:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	4a55      	ldr	r2, [pc, #340]	; (80093a4 <HAL_RTC_GetTime+0x1a0>)
 800924e:	fba2 2303 	umull	r2, r3, r2, r3
 8009252:	0adb      	lsrs	r3, r3, #11
 8009254:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	4b52      	ldr	r3, [pc, #328]	; (80093a4 <HAL_RTC_GetTime+0x1a0>)
 800925a:	fba3 1302 	umull	r1, r3, r3, r2
 800925e:	0adb      	lsrs	r3, r3, #11
 8009260:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009264:	fb01 f303 	mul.w	r3, r1, r3
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	4a4f      	ldr	r2, [pc, #316]	; (80093a8 <HAL_RTC_GetTime+0x1a4>)
 800926c:	fba2 2303 	umull	r2, r3, r2, r3
 8009270:	095b      	lsrs	r3, r3, #5
 8009272:	b2da      	uxtb	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	4a4a      	ldr	r2, [pc, #296]	; (80093a4 <HAL_RTC_GetTime+0x1a0>)
 800927c:	fba2 1203 	umull	r1, r2, r2, r3
 8009280:	0ad2      	lsrs	r2, r2, #11
 8009282:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009286:	fb01 f202 	mul.w	r2, r1, r2
 800928a:	1a9a      	subs	r2, r3, r2
 800928c:	4b46      	ldr	r3, [pc, #280]	; (80093a8 <HAL_RTC_GetTime+0x1a4>)
 800928e:	fba3 1302 	umull	r1, r3, r3, r2
 8009292:	0959      	lsrs	r1, r3, #5
 8009294:	460b      	mov	r3, r1
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	1a5b      	subs	r3, r3, r1
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	1ad1      	subs	r1, r2, r3
 800929e:	b2ca      	uxtb	r2, r1
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	2b17      	cmp	r3, #23
 80092a8:	d955      	bls.n	8009356 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	4a3f      	ldr	r2, [pc, #252]	; (80093ac <HAL_RTC_GetTime+0x1a8>)
 80092ae:	fba2 2303 	umull	r2, r3, r2, r3
 80092b2:	091b      	lsrs	r3, r3, #4
 80092b4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80092b6:	6939      	ldr	r1, [r7, #16]
 80092b8:	4b3c      	ldr	r3, [pc, #240]	; (80093ac <HAL_RTC_GetTime+0x1a8>)
 80092ba:	fba3 2301 	umull	r2, r3, r3, r1
 80092be:	091a      	lsrs	r2, r3, #4
 80092c0:	4613      	mov	r3, r2
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	4413      	add	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	1aca      	subs	r2, r1, r3
 80092ca:	b2d2      	uxtb	r2, r2
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 f9fd 	bl	80096d0 <RTC_ReadAlarmCounter>
 80092d6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d008      	beq.n	80092f2 <HAL_RTC_GetTime+0xee>
 80092e0:	69fa      	ldr	r2, [r7, #28]
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d904      	bls.n	80092f2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80092e8:	69fa      	ldr	r2, [r7, #28]
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	e002      	b.n	80092f8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80092f2:	f04f 33ff 	mov.w	r3, #4294967295
 80092f6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	4a2d      	ldr	r2, [pc, #180]	; (80093b0 <HAL_RTC_GetTime+0x1ac>)
 80092fc:	fb02 f303 	mul.w	r3, r2, r3
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f9ba 	bl	8009682 <RTC_WriteTimeCounter>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e041      	b.n	800939c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931e:	d00c      	beq.n	800933a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8009320:	69fa      	ldr	r2, [r7, #28]
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	4413      	add	r3, r2
 8009326:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009328:	69f9      	ldr	r1, [r7, #28]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 f9e9 	bl	8009702 <RTC_WriteAlarmCounter>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e030      	b.n	800939c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800933a:	69f9      	ldr	r1, [r7, #28]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f9e0 	bl	8009702 <RTC_WriteAlarmCounter>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e027      	b.n	800939c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800934c:	6979      	ldr	r1, [r7, #20]
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 fa88 	bl	8009864 <RTC_DateUpdate>
 8009354:	e003      	b.n	800935e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	b2da      	uxtb	r2, r3
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01a      	beq.n	800939a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f000 fa41 	bl	80097f0 <RTC_ByteToBcd2>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	785b      	ldrb	r3, [r3, #1]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fa38 	bl	80097f0 <RTC_ByteToBcd2>
 8009380:	4603      	mov	r3, r0
 8009382:	461a      	mov	r2, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	789b      	ldrb	r3, [r3, #2]
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fa2f 	bl	80097f0 <RTC_ByteToBcd2>
 8009392:	4603      	mov	r3, r0
 8009394:	461a      	mov	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3720      	adds	r7, #32
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	91a2b3c5 	.word	0x91a2b3c5
 80093a8:	88888889 	.word	0x88888889
 80093ac:	aaaaaaab 	.word	0xaaaaaaab
 80093b0:	00015180 	.word	0x00015180

080093b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	61fb      	str	r3, [r7, #28]
 80093c4:	2300      	movs	r3, #0
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	2300      	movs	r3, #0
 80093ca:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <HAL_RTC_SetDate+0x24>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e097      	b.n	800950c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	7c1b      	ldrb	r3, [r3, #16]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_RTC_SetDate+0x34>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e091      	b.n	800950c <HAL_RTC_SetDate+0x158>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2201      	movs	r2, #1
 80093ec:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2202      	movs	r2, #2
 80093f2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10c      	bne.n	8009414 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	78da      	ldrb	r2, [r3, #3]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	785a      	ldrb	r2, [r3, #1]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	789a      	ldrb	r2, [r3, #2]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	739a      	strb	r2, [r3, #14]
 8009412:	e01a      	b.n	800944a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	78db      	ldrb	r3, [r3, #3]
 8009418:	4618      	mov	r0, r3
 800941a:	f000 fa06 	bl	800982a <RTC_Bcd2ToByte>
 800941e:	4603      	mov	r3, r0
 8009420:	461a      	mov	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	785b      	ldrb	r3, [r3, #1]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f9fd 	bl	800982a <RTC_Bcd2ToByte>
 8009430:	4603      	mov	r3, r0
 8009432:	461a      	mov	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	789b      	ldrb	r3, [r3, #2]
 800943c:	4618      	mov	r0, r3
 800943e:	f000 f9f4 	bl	800982a <RTC_Bcd2ToByte>
 8009442:	4603      	mov	r3, r0
 8009444:	461a      	mov	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	7bdb      	ldrb	r3, [r3, #15]
 800944e:	4618      	mov	r0, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	7b59      	ldrb	r1, [r3, #13]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	7b9b      	ldrb	r3, [r3, #14]
 8009458:	461a      	mov	r2, r3
 800945a:	f000 fadf 	bl	8009a1c <RTC_WeekDayNum>
 800945e:	4603      	mov	r3, r0
 8009460:	461a      	mov	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	7b1a      	ldrb	r2, [r3, #12]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 f8d7 	bl	8009622 <RTC_ReadTimeCounter>
 8009474:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	4a26      	ldr	r2, [pc, #152]	; (8009514 <HAL_RTC_SetDate+0x160>)
 800947a:	fba2 2303 	umull	r2, r3, r2, r3
 800947e:	0adb      	lsrs	r3, r3, #11
 8009480:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b18      	cmp	r3, #24
 8009486:	d93a      	bls.n	80094fe <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	4a23      	ldr	r2, [pc, #140]	; (8009518 <HAL_RTC_SetDate+0x164>)
 800948c:	fba2 2303 	umull	r2, r3, r2, r3
 8009490:	091b      	lsrs	r3, r3, #4
 8009492:	4a22      	ldr	r2, [pc, #136]	; (800951c <HAL_RTC_SetDate+0x168>)
 8009494:	fb02 f303 	mul.w	r3, r2, r3
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800949e:	69f9      	ldr	r1, [r7, #28]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f8ee 	bl	8009682 <RTC_WriteTimeCounter>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d007      	beq.n	80094bc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2204      	movs	r2, #4
 80094b0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e027      	b.n	800950c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 f907 	bl	80096d0 <RTC_ReadAlarmCounter>
 80094c2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ca:	d018      	beq.n	80094fe <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80094cc:	69ba      	ldr	r2, [r7, #24]
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d214      	bcs.n	80094fe <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80094da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80094de:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80094e0:	69b9      	ldr	r1, [r7, #24]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 f90d 	bl	8009702 <RTC_WriteAlarmCounter>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d007      	beq.n	80094fe <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2204      	movs	r2, #4
 80094f2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e006      	b.n	800950c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3720      	adds	r7, #32
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	91a2b3c5 	.word	0x91a2b3c5
 8009518:	aaaaaaab 	.word	0xaaaaaaab
 800951c:	00015180 	.word	0x00015180

08009520 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800952c:	f107 0314 	add.w	r3, r7, #20
 8009530:	2100      	movs	r1, #0
 8009532:	460a      	mov	r2, r1
 8009534:	801a      	strh	r2, [r3, #0]
 8009536:	460a      	mov	r2, r1
 8009538:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <HAL_RTC_GetDate+0x26>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e03a      	b.n	80095c0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800954a:	f107 0314 	add.w	r3, r7, #20
 800954e:	2200      	movs	r2, #0
 8009550:	4619      	mov	r1, r3
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f7ff fe56 	bl	8009204 <HAL_RTC_GetTime>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e02e      	b.n	80095c0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	7b1a      	ldrb	r2, [r3, #12]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	7bda      	ldrb	r2, [r3, #15]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	7b5a      	ldrb	r2, [r3, #13]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	7b9a      	ldrb	r2, [r3, #14]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01a      	beq.n	80095be <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	78db      	ldrb	r3, [r3, #3]
 800958c:	4618      	mov	r0, r3
 800958e:	f000 f92f 	bl	80097f0 <RTC_ByteToBcd2>
 8009592:	4603      	mov	r3, r0
 8009594:	461a      	mov	r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	785b      	ldrb	r3, [r3, #1]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f926 	bl	80097f0 <RTC_ByteToBcd2>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	789b      	ldrb	r3, [r3, #2]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 f91d 	bl	80097f0 <RTC_ByteToBcd2>
 80095b6:	4603      	mov	r3, r0
 80095b8:	461a      	mov	r2, r3
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095d0:	2300      	movs	r3, #0
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e01d      	b.n	800961a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0208 	bic.w	r2, r2, #8
 80095ec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80095ee:	f7fd ffd9 	bl	80075a4 <HAL_GetTick>
 80095f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80095f4:	e009      	b.n	800960a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80095f6:	f7fd ffd5 	bl	80075a4 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009604:	d901      	bls.n	800960a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e007      	b.n	800961a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f003 0308 	and.w	r3, r3, #8
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0ee      	beq.n	80095f6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8009622:	b480      	push	{r7}
 8009624:	b087      	sub	sp, #28
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	827b      	strh	r3, [r7, #18]
 800962e:	2300      	movs	r3, #0
 8009630:	823b      	strh	r3, [r7, #16]
 8009632:	2300      	movs	r3, #0
 8009634:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8009652:	8a7a      	ldrh	r2, [r7, #18]
 8009654:	8a3b      	ldrh	r3, [r7, #16]
 8009656:	429a      	cmp	r2, r3
 8009658:	d008      	beq.n	800966c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800965a:	8a3b      	ldrh	r3, [r7, #16]
 800965c:	041a      	lsls	r2, r3, #16
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	b29b      	uxth	r3, r3
 8009666:	4313      	orrs	r3, r2
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	e004      	b.n	8009676 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800966c:	8a7b      	ldrh	r3, [r7, #18]
 800966e:	041a      	lsls	r2, r3, #16
 8009670:	89fb      	ldrh	r3, [r7, #14]
 8009672:	4313      	orrs	r3, r2
 8009674:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8009676:	697b      	ldr	r3, [r7, #20]
}
 8009678:	4618      	mov	r0, r3
 800967a:	371c      	adds	r7, #28
 800967c:	46bd      	mov	sp, r7
 800967e:	bc80      	pop	{r7}
 8009680:	4770      	bx	lr

08009682 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f85d 	bl	8009750 <RTC_EnterInitMode>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	73fb      	strb	r3, [r7, #15]
 80096a0:	e011      	b.n	80096c6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	0c12      	lsrs	r2, r2, #16
 80096aa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	b292      	uxth	r2, r2
 80096b4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f872 	bl	80097a0 <RTC_ExitInitMode>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	81fb      	strh	r3, [r7, #14]
 80096dc:	2300      	movs	r3, #0
 80096de:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	041a      	lsls	r2, r3, #16
 80096f4:	89bb      	ldrh	r3, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr

08009702 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f81d 	bl	8009750 <RTC_EnterInitMode>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	73fb      	strb	r3, [r7, #15]
 8009720:	e011      	b.n	8009746 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	0c12      	lsrs	r2, r2, #16
 800972a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	b292      	uxth	r2, r2
 8009734:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f832 	bl	80097a0 <RTC_ExitInitMode>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800975c:	f7fd ff22 	bl	80075a4 <HAL_GetTick>
 8009760:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009762:	e009      	b.n	8009778 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009764:	f7fd ff1e 	bl	80075a4 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009772:	d901      	bls.n	8009778 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e00f      	b.n	8009798 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f003 0320 	and.w	r3, r3, #32
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0ee      	beq.n	8009764 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0210 	orr.w	r2, r2, #16
 8009794:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0210 	bic.w	r2, r2, #16
 80097ba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80097bc:	f7fd fef2 	bl	80075a4 <HAL_GetTick>
 80097c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80097c2:	e009      	b.n	80097d8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80097c4:	f7fd feee 	bl	80075a4 <HAL_GetTick>
 80097c8:	4602      	mov	r2, r0
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097d2:	d901      	bls.n	80097d8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e007      	b.n	80097e8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f003 0320 	and.w	r3, r3, #32
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0ee      	beq.n	80097c4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80097fe:	e005      	b.n	800980c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3301      	adds	r3, #1
 8009804:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	3b0a      	subs	r3, #10
 800980a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	2b09      	cmp	r3, #9
 8009810:	d8f6      	bhi.n	8009800 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	b2db      	uxtb	r3, r3
 8009816:	011b      	lsls	r3, r3, #4
 8009818:	b2da      	uxtb	r2, r3
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	4313      	orrs	r3, r2
 800981e:	b2db      	uxtb	r3, r3
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	bc80      	pop	{r7}
 8009828:	4770      	bx	lr

0800982a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800982a:	b480      	push	{r7}
 800982c:	b085      	sub	sp, #20
 800982e:	af00      	add	r7, sp, #0
 8009830:	4603      	mov	r3, r0
 8009832:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	091b      	lsrs	r3, r3, #4
 800983c:	b2db      	uxtb	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	f003 030f 	and.w	r3, r3, #15
 8009850:	b2da      	uxtb	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	4413      	add	r3, r2
 8009858:	b2db      	uxtb	r3, r3
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	617b      	str	r3, [r7, #20]
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7bdb      	ldrb	r3, [r3, #15]
 8009882:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	7b5b      	ldrb	r3, [r3, #13]
 8009888:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	7b9b      	ldrb	r3, [r3, #14]
 800988e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8009890:	2300      	movs	r3, #0
 8009892:	60bb      	str	r3, [r7, #8]
 8009894:	e06f      	b.n	8009976 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d011      	beq.n	80098c0 <RTC_DateUpdate+0x5c>
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d00e      	beq.n	80098c0 <RTC_DateUpdate+0x5c>
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	2b05      	cmp	r3, #5
 80098a6:	d00b      	beq.n	80098c0 <RTC_DateUpdate+0x5c>
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	2b07      	cmp	r3, #7
 80098ac:	d008      	beq.n	80098c0 <RTC_DateUpdate+0x5c>
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2b08      	cmp	r3, #8
 80098b2:	d005      	beq.n	80098c0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	2b0a      	cmp	r3, #10
 80098b8:	d002      	beq.n	80098c0 <RTC_DateUpdate+0x5c>
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b0c      	cmp	r3, #12
 80098be:	d117      	bne.n	80098f0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b1e      	cmp	r3, #30
 80098c4:	d803      	bhi.n	80098ce <RTC_DateUpdate+0x6a>
      {
        day++;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80098cc:	e050      	b.n	8009970 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b0c      	cmp	r3, #12
 80098d2:	d005      	beq.n	80098e0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	3301      	adds	r3, #1
 80098d8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80098da:	2301      	movs	r3, #1
 80098dc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80098de:	e047      	b.n	8009970 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80098e0:	2301      	movs	r3, #1
 80098e2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80098e4:	2301      	movs	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
          year++;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	3301      	adds	r3, #1
 80098ec:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80098ee:	e03f      	b.n	8009970 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	d008      	beq.n	8009908 <RTC_DateUpdate+0xa4>
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	2b06      	cmp	r3, #6
 80098fa:	d005      	beq.n	8009908 <RTC_DateUpdate+0xa4>
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2b09      	cmp	r3, #9
 8009900:	d002      	beq.n	8009908 <RTC_DateUpdate+0xa4>
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b0b      	cmp	r3, #11
 8009906:	d10c      	bne.n	8009922 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b1d      	cmp	r3, #29
 800990c:	d803      	bhi.n	8009916 <RTC_DateUpdate+0xb2>
      {
        day++;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8009914:	e02c      	b.n	8009970 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	3301      	adds	r3, #1
 800991a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800991c:	2301      	movs	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8009920:	e026      	b.n	8009970 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b02      	cmp	r3, #2
 8009926:	d123      	bne.n	8009970 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b1b      	cmp	r3, #27
 800992c:	d803      	bhi.n	8009936 <RTC_DateUpdate+0xd2>
      {
        day++;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3301      	adds	r3, #1
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	e01c      	b.n	8009970 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b1c      	cmp	r3, #28
 800993a:	d111      	bne.n	8009960 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	b29b      	uxth	r3, r3
 8009940:	4618      	mov	r0, r3
 8009942:	f000 f839 	bl	80099b8 <RTC_IsLeapYear>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <RTC_DateUpdate+0xf0>
        {
          day++;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	e00d      	b.n	8009970 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3301      	adds	r3, #1
 8009958:	613b      	str	r3, [r7, #16]
          day = 1U;
 800995a:	2301      	movs	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	e007      	b.n	8009970 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b1d      	cmp	r3, #29
 8009964:	d104      	bne.n	8009970 <RTC_DateUpdate+0x10c>
      {
        month++;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	3301      	adds	r3, #1
 800996a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800996c:	2301      	movs	r3, #1
 800996e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	3301      	adds	r3, #1
 8009974:	60bb      	str	r3, [r7, #8]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	429a      	cmp	r2, r3
 800997c:	d38b      	bcc.n	8009896 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	b2da      	uxtb	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	b2da      	uxtb	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	b2db      	uxtb	r3, r3
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	b2d2      	uxtb	r2, r2
 800999e:	4619      	mov	r1, r3
 80099a0:	6978      	ldr	r0, [r7, #20]
 80099a2:	f000 f83b 	bl	8009a1c <RTC_WeekDayNum>
 80099a6:	4603      	mov	r3, r0
 80099a8:	461a      	mov	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	731a      	strb	r2, [r3, #12]
}
 80099ae:	bf00      	nop
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80099c2:	88fb      	ldrh	r3, [r7, #6]
 80099c4:	f003 0303 	and.w	r3, r3, #3
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e01d      	b.n	8009a0e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80099d2:	88fb      	ldrh	r3, [r7, #6]
 80099d4:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <RTC_IsLeapYear+0x60>)
 80099d6:	fba2 1203 	umull	r1, r2, r2, r3
 80099da:	0952      	lsrs	r2, r2, #5
 80099dc:	2164      	movs	r1, #100	; 0x64
 80099de:	fb01 f202 	mul.w	r2, r1, r2
 80099e2:	1a9b      	subs	r3, r3, r2
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e00f      	b.n	8009a0e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80099ee:	88fb      	ldrh	r3, [r7, #6]
 80099f0:	4a09      	ldr	r2, [pc, #36]	; (8009a18 <RTC_IsLeapYear+0x60>)
 80099f2:	fba2 1203 	umull	r1, r2, r2, r3
 80099f6:	09d2      	lsrs	r2, r2, #7
 80099f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80099fc:	fb01 f202 	mul.w	r2, r1, r2
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e000      	b.n	8009a0e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8009a0c:	2300      	movs	r3, #0
  }
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bc80      	pop	{r7}
 8009a16:	4770      	bx	lr
 8009a18:	51eb851f 	.word	0x51eb851f

08009a1c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60bb      	str	r3, [r7, #8]
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009a3a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d82d      	bhi.n	8009a9e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8009a42:	78fa      	ldrb	r2, [r7, #3]
 8009a44:	4613      	mov	r3, r2
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	1a9b      	subs	r3, r3, r2
 8009a4e:	4a2c      	ldr	r2, [pc, #176]	; (8009b00 <RTC_WeekDayNum+0xe4>)
 8009a50:	fba2 2303 	umull	r2, r3, r2, r3
 8009a54:	085a      	lsrs	r2, r3, #1
 8009a56:	78bb      	ldrb	r3, [r7, #2]
 8009a58:	441a      	add	r2, r3
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	441a      	add	r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	089b      	lsrs	r3, r3, #2
 8009a64:	441a      	add	r2, r3
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	4926      	ldr	r1, [pc, #152]	; (8009b04 <RTC_WeekDayNum+0xe8>)
 8009a6c:	fba1 1303 	umull	r1, r3, r1, r3
 8009a70:	095b      	lsrs	r3, r3, #5
 8009a72:	1ad2      	subs	r2, r2, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	4922      	ldr	r1, [pc, #136]	; (8009b04 <RTC_WeekDayNum+0xe8>)
 8009a7a:	fba1 1303 	umull	r1, r3, r1, r3
 8009a7e:	09db      	lsrs	r3, r3, #7
 8009a80:	4413      	add	r3, r2
 8009a82:	1d1a      	adds	r2, r3, #4
 8009a84:	4b20      	ldr	r3, [pc, #128]	; (8009b08 <RTC_WeekDayNum+0xec>)
 8009a86:	fba3 1302 	umull	r1, r3, r3, r2
 8009a8a:	1ad1      	subs	r1, r2, r3
 8009a8c:	0849      	lsrs	r1, r1, #1
 8009a8e:	440b      	add	r3, r1
 8009a90:	0899      	lsrs	r1, r3, #2
 8009a92:	460b      	mov	r3, r1
 8009a94:	00db      	lsls	r3, r3, #3
 8009a96:	1a5b      	subs	r3, r3, r1
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	e029      	b.n	8009af2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8009a9e:	78fa      	ldrb	r2, [r7, #3]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	005b      	lsls	r3, r3, #1
 8009aa4:	4413      	add	r3, r2
 8009aa6:	00db      	lsls	r3, r3, #3
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	4a15      	ldr	r2, [pc, #84]	; (8009b00 <RTC_WeekDayNum+0xe4>)
 8009aac:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab0:	085a      	lsrs	r2, r3, #1
 8009ab2:	78bb      	ldrb	r3, [r7, #2]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	441a      	add	r2, r3
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	089b      	lsrs	r3, r3, #2
 8009abe:	441a      	add	r2, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4910      	ldr	r1, [pc, #64]	; (8009b04 <RTC_WeekDayNum+0xe8>)
 8009ac4:	fba1 1303 	umull	r1, r3, r1, r3
 8009ac8:	095b      	lsrs	r3, r3, #5
 8009aca:	1ad2      	subs	r2, r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	490d      	ldr	r1, [pc, #52]	; (8009b04 <RTC_WeekDayNum+0xe8>)
 8009ad0:	fba1 1303 	umull	r1, r3, r1, r3
 8009ad4:	09db      	lsrs	r3, r3, #7
 8009ad6:	4413      	add	r3, r2
 8009ad8:	1c9a      	adds	r2, r3, #2
 8009ada:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <RTC_WeekDayNum+0xec>)
 8009adc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ae0:	1ad1      	subs	r1, r2, r3
 8009ae2:	0849      	lsrs	r1, r1, #1
 8009ae4:	440b      	add	r3, r1
 8009ae6:	0899      	lsrs	r1, r3, #2
 8009ae8:	460b      	mov	r3, r1
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	1a5b      	subs	r3, r3, r1
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	b2db      	uxtb	r3, r3
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bc80      	pop	{r7}
 8009afe:	4770      	bx	lr
 8009b00:	38e38e39 	.word	0x38e38e39
 8009b04:	51eb851f 	.word	0x51eb851f
 8009b08:	24924925 	.word	0x24924925

08009b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e076      	b.n	8009c0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d108      	bne.n	8009b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b2e:	d009      	beq.n	8009b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	61da      	str	r2, [r3, #28]
 8009b36:	e005      	b.n	8009b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d106      	bne.n	8009b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7fc fe42 	bl	80067e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2202      	movs	r2, #2
 8009b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009b8c:	431a      	orrs	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b96:	431a      	orrs	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc8:	ea42 0103 	orr.w	r1, r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	0c1a      	lsrs	r2, r3, #16
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f002 0204 	and.w	r2, r2, #4
 8009bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	69da      	ldr	r2, [r3, #28]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	4613      	mov	r3, r2
 8009c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_SPI_Transmit+0x22>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e126      	b.n	8009e84 <HAL_SPI_Transmit+0x270>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c3e:	f7fd fcb1 	bl	80075a4 <HAL_GetTick>
 8009c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d002      	beq.n	8009c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009c54:	2302      	movs	r3, #2
 8009c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c58:	e10b      	b.n	8009e72 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_SPI_Transmit+0x52>
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d102      	bne.n	8009c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c6a:	e102      	b.n	8009e72 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2203      	movs	r2, #3
 8009c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	88fa      	ldrh	r2, [r7, #6]
 8009c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	88fa      	ldrh	r2, [r7, #6]
 8009c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cb2:	d10f      	bne.n	8009cd4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cde:	2b40      	cmp	r3, #64	; 0x40
 8009ce0:	d007      	beq.n	8009cf2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cfa:	d14b      	bne.n	8009d94 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <HAL_SPI_Transmit+0xf6>
 8009d04:	8afb      	ldrh	r3, [r7, #22]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d13e      	bne.n	8009d88 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0e:	881a      	ldrh	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1a:	1c9a      	adds	r2, r3, #2
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d2e:	e02b      	b.n	8009d88 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f003 0302 	and.w	r3, r3, #2
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d112      	bne.n	8009d64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	881a      	ldrh	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4e:	1c9a      	adds	r2, r3, #2
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d62:	e011      	b.n	8009d88 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d64:	f7fd fc1e 	bl	80075a4 <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d803      	bhi.n	8009d7c <HAL_SPI_Transmit+0x168>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7a:	d102      	bne.n	8009d82 <HAL_SPI_Transmit+0x16e>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d102      	bne.n	8009d88 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d86:	e074      	b.n	8009e72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1ce      	bne.n	8009d30 <HAL_SPI_Transmit+0x11c>
 8009d92:	e04c      	b.n	8009e2e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <HAL_SPI_Transmit+0x18e>
 8009d9c:	8afb      	ldrh	r3, [r7, #22]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d140      	bne.n	8009e24 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	330c      	adds	r3, #12
 8009dac:	7812      	ldrb	r2, [r2, #0]
 8009dae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009dc8:	e02c      	b.n	8009e24 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	f003 0302 	and.w	r3, r3, #2
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d113      	bne.n	8009e00 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	330c      	adds	r3, #12
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8009dfe:	e011      	b.n	8009e24 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e00:	f7fd fbd0 	bl	80075a4 <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d803      	bhi.n	8009e18 <HAL_SPI_Transmit+0x204>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e16:	d102      	bne.n	8009e1e <HAL_SPI_Transmit+0x20a>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009e22:	e026      	b.n	8009e72 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1cd      	bne.n	8009dca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fb14 	bl	800a460 <SPI_EndRxTxTransaction>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2220      	movs	r2, #32
 8009e42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	613b      	str	r3, [r7, #16]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	613b      	str	r3, [r7, #16]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	77fb      	strb	r3, [r7, #31]
 8009e6e:	e000      	b.n	8009e72 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009e70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e82:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3720      	adds	r7, #32
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d101      	bne.n	8009eac <HAL_SPI_TransmitReceive_IT+0x20>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e075      	b.n	8009f98 <HAL_SPI_TransmitReceive_IT+0x10c>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009eba:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ec2:	7dbb      	ldrb	r3, [r7, #22]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d00d      	beq.n	8009ee4 <HAL_SPI_TransmitReceive_IT+0x58>
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ece:	d106      	bne.n	8009ede <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <HAL_SPI_TransmitReceive_IT+0x52>
 8009ed8:	7dbb      	ldrb	r3, [r7, #22]
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d002      	beq.n	8009ee4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009ede:	2302      	movs	r3, #2
 8009ee0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ee2:	e054      	b.n	8009f8e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009ef0:	887b      	ldrh	r3, [r7, #2]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d102      	bne.n	8009efc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009efa:	e048      	b.n	8009f8e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d003      	beq.n	8009f10 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2205      	movs	r2, #5
 8009f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	887a      	ldrh	r2, [r7, #2]
 8009f20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	887a      	ldrh	r2, [r7, #2]
 8009f26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	887a      	ldrh	r2, [r7, #2]
 8009f32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	887a      	ldrh	r2, [r7, #2]
 8009f38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d006      	beq.n	8009f50 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	4a17      	ldr	r2, [pc, #92]	; (8009fa4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8009f46:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4a17      	ldr	r2, [pc, #92]	; (8009fa8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8009f4c:	645a      	str	r2, [r3, #68]	; 0x44
 8009f4e:	e005      	b.n	8009f5c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4a16      	ldr	r2, [pc, #88]	; (8009fac <HAL_SPI_TransmitReceive_IT+0x120>)
 8009f54:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4a15      	ldr	r2, [pc, #84]	; (8009fb0 <HAL_SPI_TransmitReceive_IT+0x124>)
 8009f5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009f6a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f76:	2b40      	cmp	r3, #64	; 0x40
 8009f78:	d008      	beq.n	8009f8c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e000      	b.n	8009f8e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8009f8c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	371c      	adds	r7, #28
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	0800a291 	.word	0x0800a291
 8009fa8:	0800a2f1 	.word	0x0800a2f1
 8009fac:	0800a1cd 	.word	0x0800a1cd
 8009fb0:	0800a231 	.word	0x0800a231

08009fb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	099b      	lsrs	r3, r3, #6
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10f      	bne.n	8009ff8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	099b      	lsrs	r3, r3, #6
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d004      	beq.n	8009ff8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
    return;
 8009ff6:	e0be      	b.n	800a176 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	085b      	lsrs	r3, r3, #1
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00a      	beq.n	800a01a <HAL_SPI_IRQHandler+0x66>
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	09db      	lsrs	r3, r3, #7
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d004      	beq.n	800a01a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	4798      	blx	r3
    return;
 800a018:	e0ad      	b.n	800a176 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	095b      	lsrs	r3, r3, #5
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <HAL_SPI_IRQHandler+0x80>
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	099b      	lsrs	r3, r3, #6
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80a1 	beq.w	800a176 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	095b      	lsrs	r3, r3, #5
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 809a 	beq.w	800a176 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	099b      	lsrs	r3, r3, #6
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d023      	beq.n	800a096 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b03      	cmp	r3, #3
 800a058:	d011      	beq.n	800a07e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a05e:	f043 0204 	orr.w	r2, r3, #4
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a066:	2300      	movs	r3, #0
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	e00b      	b.n	800a096 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a07e:	2300      	movs	r3, #0
 800a080:	613b      	str	r3, [r7, #16]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	613b      	str	r3, [r7, #16]
 800a092:	693b      	ldr	r3, [r7, #16]
        return;
 800a094:	e06f      	b.n	800a176 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	095b      	lsrs	r3, r3, #5
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d014      	beq.n	800a0cc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a6:	f043 0201 	orr.w	r2, r3, #1
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d04f      	beq.n	800a174 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d104      	bne.n	800a100 <HAL_SPI_IRQHandler+0x14c>
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d034      	beq.n	800a16a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 0203 	bic.w	r2, r2, #3
 800a10e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d011      	beq.n	800a13c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11c:	4a17      	ldr	r2, [pc, #92]	; (800a17c <HAL_SPI_IRQHandler+0x1c8>)
 800a11e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a124:	4618      	mov	r0, r3
 800a126:	f7fd ff89 	bl	800803c <HAL_DMA_Abort_IT>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d005      	beq.n	800a13c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a134:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a140:	2b00      	cmp	r3, #0
 800a142:	d016      	beq.n	800a172 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a148:	4a0c      	ldr	r2, [pc, #48]	; (800a17c <HAL_SPI_IRQHandler+0x1c8>)
 800a14a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a150:	4618      	mov	r0, r3
 800a152:	f7fd ff73 	bl	800803c <HAL_DMA_Abort_IT>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00a      	beq.n	800a172 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a168:	e003      	b.n	800a172 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f811 	bl	800a192 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a170:	e000      	b.n	800a174 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800a172:	bf00      	nop
    return;
 800a174:	bf00      	nop
  }
}
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	0800a1a5 	.word	0x0800a1a5

0800a180 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a192:	b480      	push	{r7}
 800a194:	b083      	sub	sp, #12
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a19a:	bf00      	nop
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr

0800a1a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff ffe7 	bl	800a192 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a1c4:	bf00      	nop
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f103 020c 	add.w	r2, r3, #12
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e0:	7812      	ldrb	r2, [r2, #0]
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a202:	b29b      	uxth	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10f      	bne.n	800a228 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a216:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f93a 	bl	800a49c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	330c      	adds	r3, #12
 800a242:	7812      	ldrb	r2, [r2, #0]
 800a244:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24a:	1c5a      	adds	r2, r3, #1
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a254:	b29b      	uxth	r3, r3
 800a256:	3b01      	subs	r3, #1
 800a258:	b29a      	uxth	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a262:	b29b      	uxth	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10f      	bne.n	800a288 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a276:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d102      	bne.n	800a288 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f90a 	bl	800a49c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a2:	b292      	uxth	r2, r2
 800a2a4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	1c9a      	adds	r2, r3, #2
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10f      	bne.n	800a2e8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2d6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f8da 	bl	800a49c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a2e8:	bf00      	nop
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fc:	881a      	ldrh	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a308:	1c9a      	adds	r2, r3, #2
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a312:	b29b      	uxth	r3, r3
 800a314:	3b01      	subs	r3, #1
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a320:	b29b      	uxth	r3, r3
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10f      	bne.n	800a346 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a334:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f8ab 	bl	800a49c <SPI_CloseRxTx_ISR>
    }
  }
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
	...

0800a350 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	4613      	mov	r3, r2
 800a35e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a360:	f7fd f920 	bl	80075a4 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	1a9b      	subs	r3, r3, r2
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	4413      	add	r3, r2
 800a36e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a370:	f7fd f918 	bl	80075a4 <HAL_GetTick>
 800a374:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a376:	4b39      	ldr	r3, [pc, #228]	; (800a45c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	015b      	lsls	r3, r3, #5
 800a37c:	0d1b      	lsrs	r3, r3, #20
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	fb02 f303 	mul.w	r3, r2, r3
 800a384:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a386:	e054      	b.n	800a432 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38e:	d050      	beq.n	800a432 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a390:	f7fd f908 	bl	80075a4 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	69fa      	ldr	r2, [r7, #28]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d902      	bls.n	800a3a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d13d      	bne.n	800a422 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a3b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3be:	d111      	bne.n	800a3e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c8:	d004      	beq.n	800a3d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3d2:	d107      	bne.n	800a3e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ec:	d10f      	bne.n	800a40e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a40c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e017      	b.n	800a452 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	3b01      	subs	r3, #1
 800a430:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4013      	ands	r3, r2
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	429a      	cmp	r2, r3
 800a440:	bf0c      	ite	eq
 800a442:	2301      	moveq	r3, #1
 800a444:	2300      	movne	r3, #0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d19b      	bne.n	800a388 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3720      	adds	r7, #32
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20000028 	.word	0x20000028

0800a460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af02      	add	r7, sp, #8
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2200      	movs	r2, #0
 800a474:	2180      	movs	r1, #128	; 0x80
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f7ff ff6a 	bl	800a350 <SPI_WaitFlagStateUntilTimeout>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d007      	beq.n	800a492 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a486:	f043 0220 	orr.w	r2, r3, #32
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e000      	b.n	800a494 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a4a4:	4b35      	ldr	r3, [pc, #212]	; (800a57c <SPI_CloseRxTx_ISR+0xe0>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a35      	ldr	r2, [pc, #212]	; (800a580 <SPI_CloseRxTx_ISR+0xe4>)
 800a4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ae:	0a5b      	lsrs	r3, r3, #9
 800a4b0:	2264      	movs	r2, #100	; 0x64
 800a4b2:	fb02 f303 	mul.w	r3, r2, r3
 800a4b6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4b8:	f7fd f874 	bl	80075a4 <HAL_GetTick>
 800a4bc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 0220 	bic.w	r2, r2, #32
 800a4cc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d106      	bne.n	800a4e2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d8:	f043 0220 	orr.w	r2, r3, #32
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4e0:	e009      	b.n	800a4f6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0eb      	beq.n	800a4ce <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	2164      	movs	r1, #100	; 0x64
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7ff ffb0 	bl	800a460 <SPI_EndRxTxTransaction>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d005      	beq.n	800a512 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50a:	f043 0220 	orr.w	r2, r3, #32
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a51a:	2300      	movs	r3, #0
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a534:	2b00      	cmp	r3, #0
 800a536:	d115      	bne.n	800a564 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b04      	cmp	r3, #4
 800a542:	d107      	bne.n	800a554 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7ff fe17 	bl	800a180 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a552:	e00e      	b.n	800a572 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7f6 fc09 	bl	8000d74 <HAL_SPI_TxRxCpltCallback>
}
 800a562:	e006      	b.n	800a572 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7ff fe10 	bl	800a192 <HAL_SPI_ErrorCallback>
}
 800a572:	bf00      	nop
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000028 	.word	0x20000028
 800a580:	057619f1 	.word	0x057619f1

0800a584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e041      	b.n	800a61a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7fc ff0a 	bl	80073c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f000 fc20 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b01      	cmp	r3, #1
 800a636:	d001      	beq.n	800a63c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e03a      	b.n	800a6b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f042 0201 	orr.w	r2, r2, #1
 800a652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a18      	ldr	r2, [pc, #96]	; (800a6bc <HAL_TIM_Base_Start_IT+0x98>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d00e      	beq.n	800a67c <HAL_TIM_Base_Start_IT+0x58>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a666:	d009      	beq.n	800a67c <HAL_TIM_Base_Start_IT+0x58>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a14      	ldr	r2, [pc, #80]	; (800a6c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d004      	beq.n	800a67c <HAL_TIM_Base_Start_IT+0x58>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d111      	bne.n	800a6a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b06      	cmp	r3, #6
 800a68c:	d010      	beq.n	800a6b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0201 	orr.w	r2, r2, #1
 800a69c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a69e:	e007      	b.n	800a6b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0201 	orr.w	r2, r2, #1
 800a6ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bc80      	pop	{r7}
 800a6ba:	4770      	bx	lr
 800a6bc:	40012c00 	.word	0x40012c00
 800a6c0:	40000400 	.word	0x40000400
 800a6c4:	40000800 	.word	0x40000800

0800a6c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e041      	b.n	800a75e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d106      	bne.n	800a6f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7fc fe8e 	bl	8007410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3304      	adds	r3, #4
 800a704:	4619      	mov	r1, r3
 800a706:	4610      	mov	r0, r2
 800a708:	f000 fb7e 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d109      	bne.n	800a78c <HAL_TIM_PWM_Start+0x24>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b01      	cmp	r3, #1
 800a782:	bf14      	ite	ne
 800a784:	2301      	movne	r3, #1
 800a786:	2300      	moveq	r3, #0
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	e022      	b.n	800a7d2 <HAL_TIM_PWM_Start+0x6a>
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d109      	bne.n	800a7a6 <HAL_TIM_PWM_Start+0x3e>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	bf14      	ite	ne
 800a79e:	2301      	movne	r3, #1
 800a7a0:	2300      	moveq	r3, #0
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	e015      	b.n	800a7d2 <HAL_TIM_PWM_Start+0x6a>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b08      	cmp	r3, #8
 800a7aa:	d109      	bne.n	800a7c0 <HAL_TIM_PWM_Start+0x58>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	bf14      	ite	ne
 800a7b8:	2301      	movne	r3, #1
 800a7ba:	2300      	moveq	r3, #0
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	e008      	b.n	800a7d2 <HAL_TIM_PWM_Start+0x6a>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	bf14      	ite	ne
 800a7cc:	2301      	movne	r3, #1
 800a7ce:	2300      	moveq	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e05e      	b.n	800a898 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <HAL_TIM_PWM_Start+0x82>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7e8:	e013      	b.n	800a812 <HAL_TIM_PWM_Start+0xaa>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d104      	bne.n	800a7fa <HAL_TIM_PWM_Start+0x92>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7f8:	e00b      	b.n	800a812 <HAL_TIM_PWM_Start+0xaa>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d104      	bne.n	800a80a <HAL_TIM_PWM_Start+0xa2>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a808:	e003      	b.n	800a812 <HAL_TIM_PWM_Start+0xaa>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2202      	movs	r2, #2
 800a80e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2201      	movs	r2, #1
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 fd74 	bl	800b308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1e      	ldr	r2, [pc, #120]	; (800a8a0 <HAL_TIM_PWM_Start+0x138>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d107      	bne.n	800a83a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a838:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a18      	ldr	r2, [pc, #96]	; (800a8a0 <HAL_TIM_PWM_Start+0x138>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00e      	beq.n	800a862 <HAL_TIM_PWM_Start+0xfa>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84c:	d009      	beq.n	800a862 <HAL_TIM_PWM_Start+0xfa>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a14      	ldr	r2, [pc, #80]	; (800a8a4 <HAL_TIM_PWM_Start+0x13c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d004      	beq.n	800a862 <HAL_TIM_PWM_Start+0xfa>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a12      	ldr	r2, [pc, #72]	; (800a8a8 <HAL_TIM_PWM_Start+0x140>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d111      	bne.n	800a886 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f003 0307 	and.w	r3, r3, #7
 800a86c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2b06      	cmp	r3, #6
 800a872:	d010      	beq.n	800a896 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0201 	orr.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a884:	e007      	b.n	800a896 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f042 0201 	orr.w	r2, r2, #1
 800a894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	40012c00 	.word	0x40012c00
 800a8a4:	40000400 	.word	0x40000400
 800a8a8:	40000800 	.word	0x40000800

0800a8ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d122      	bne.n	800a908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f003 0302 	and.w	r3, r3, #2
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d11b      	bne.n	800a908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f06f 0202 	mvn.w	r2, #2
 800a8d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fa6f 	bl	800add2 <HAL_TIM_IC_CaptureCallback>
 800a8f4:	e005      	b.n	800a902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fa62 	bl	800adc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fa71 	bl	800ade4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	f003 0304 	and.w	r3, r3, #4
 800a912:	2b04      	cmp	r3, #4
 800a914:	d122      	bne.n	800a95c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b04      	cmp	r3, #4
 800a922:	d11b      	bne.n	800a95c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f06f 0204 	mvn.w	r2, #4
 800a92c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2202      	movs	r2, #2
 800a932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fa45 	bl	800add2 <HAL_TIM_IC_CaptureCallback>
 800a948:	e005      	b.n	800a956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fa38 	bl	800adc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fa47 	bl	800ade4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	f003 0308 	and.w	r3, r3, #8
 800a966:	2b08      	cmp	r3, #8
 800a968:	d122      	bne.n	800a9b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f003 0308 	and.w	r3, r3, #8
 800a974:	2b08      	cmp	r3, #8
 800a976:	d11b      	bne.n	800a9b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f06f 0208 	mvn.w	r2, #8
 800a980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2204      	movs	r2, #4
 800a986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	f003 0303 	and.w	r3, r3, #3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa1b 	bl	800add2 <HAL_TIM_IC_CaptureCallback>
 800a99c:	e005      	b.n	800a9aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fa0e 	bl	800adc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fa1d 	bl	800ade4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	f003 0310 	and.w	r3, r3, #16
 800a9ba:	2b10      	cmp	r3, #16
 800a9bc:	d122      	bne.n	800aa04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f003 0310 	and.w	r3, r3, #16
 800a9c8:	2b10      	cmp	r3, #16
 800a9ca:	d11b      	bne.n	800aa04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f06f 0210 	mvn.w	r2, #16
 800a9d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2208      	movs	r2, #8
 800a9da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f9f1 	bl	800add2 <HAL_TIM_IC_CaptureCallback>
 800a9f0:	e005      	b.n	800a9fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f9e4 	bl	800adc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f9f3 	bl	800ade4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d10e      	bne.n	800aa30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d107      	bne.n	800aa30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f06f 0201 	mvn.w	r2, #1
 800aa28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7f6 f95c 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa3a:	2b80      	cmp	r3, #128	; 0x80
 800aa3c:	d10e      	bne.n	800aa5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa48:	2b80      	cmp	r3, #128	; 0x80
 800aa4a:	d107      	bne.n	800aa5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fce1 	bl	800b41e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa66:	2b40      	cmp	r3, #64	; 0x40
 800aa68:	d10e      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa74:	2b40      	cmp	r3, #64	; 0x40
 800aa76:	d107      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f9b7 	bl	800adf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0320 	and.w	r3, r3, #32
 800aa92:	2b20      	cmp	r3, #32
 800aa94:	d10e      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	f003 0320 	and.w	r3, r3, #32
 800aaa0:	2b20      	cmp	r3, #32
 800aaa2:	d107      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f06f 0220 	mvn.w	r2, #32
 800aaac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fcac 	bl	800b40c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d101      	bne.n	800aad6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aad2:	2302      	movs	r3, #2
 800aad4:	e0ac      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x174>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b0c      	cmp	r3, #12
 800aae2:	f200 809f 	bhi.w	800ac24 <HAL_TIM_PWM_ConfigChannel+0x168>
 800aae6:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <HAL_TIM_PWM_ConfigChannel+0x30>)
 800aae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaec:	0800ab21 	.word	0x0800ab21
 800aaf0:	0800ac25 	.word	0x0800ac25
 800aaf4:	0800ac25 	.word	0x0800ac25
 800aaf8:	0800ac25 	.word	0x0800ac25
 800aafc:	0800ab61 	.word	0x0800ab61
 800ab00:	0800ac25 	.word	0x0800ac25
 800ab04:	0800ac25 	.word	0x0800ac25
 800ab08:	0800ac25 	.word	0x0800ac25
 800ab0c:	0800aba3 	.word	0x0800aba3
 800ab10:	0800ac25 	.word	0x0800ac25
 800ab14:	0800ac25 	.word	0x0800ac25
 800ab18:	0800ac25 	.word	0x0800ac25
 800ab1c:	0800abe3 	.word	0x0800abe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68b9      	ldr	r1, [r7, #8]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 f9d0 	bl	800aecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	699a      	ldr	r2, [r3, #24]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f042 0208 	orr.w	r2, r2, #8
 800ab3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	699a      	ldr	r2, [r3, #24]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0204 	bic.w	r2, r2, #4
 800ab4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6999      	ldr	r1, [r3, #24]
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	691a      	ldr	r2, [r3, #16]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	619a      	str	r2, [r3, #24]
      break;
 800ab5e:	e062      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fa16 	bl	800af98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	699a      	ldr	r2, [r3, #24]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6999      	ldr	r1, [r3, #24]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	021a      	lsls	r2, r3, #8
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	619a      	str	r2, [r3, #24]
      break;
 800aba0:	e041      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 fa5f 	bl	800b06c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69da      	ldr	r2, [r3, #28]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f042 0208 	orr.w	r2, r2, #8
 800abbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	69da      	ldr	r2, [r3, #28]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0204 	bic.w	r2, r2, #4
 800abcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	69d9      	ldr	r1, [r3, #28]
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	691a      	ldr	r2, [r3, #16]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	430a      	orrs	r2, r1
 800abde:	61da      	str	r2, [r3, #28]
      break;
 800abe0:	e021      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68b9      	ldr	r1, [r7, #8]
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 faa9 	bl	800b140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	69da      	ldr	r2, [r3, #28]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	69da      	ldr	r2, [r3, #28]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	69d9      	ldr	r1, [r3, #28]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	021a      	lsls	r2, r3, #8
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	61da      	str	r2, [r3, #28]
      break;
 800ac22:	e000      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800ac24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d101      	bne.n	800ac50 <HAL_TIM_ConfigClockSource+0x18>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e0b3      	b.n	800adb8 <HAL_TIM_ConfigClockSource+0x180>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac88:	d03e      	beq.n	800ad08 <HAL_TIM_ConfigClockSource+0xd0>
 800ac8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac8e:	f200 8087 	bhi.w	800ada0 <HAL_TIM_ConfigClockSource+0x168>
 800ac92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac96:	f000 8085 	beq.w	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800ac9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac9e:	d87f      	bhi.n	800ada0 <HAL_TIM_ConfigClockSource+0x168>
 800aca0:	2b70      	cmp	r3, #112	; 0x70
 800aca2:	d01a      	beq.n	800acda <HAL_TIM_ConfigClockSource+0xa2>
 800aca4:	2b70      	cmp	r3, #112	; 0x70
 800aca6:	d87b      	bhi.n	800ada0 <HAL_TIM_ConfigClockSource+0x168>
 800aca8:	2b60      	cmp	r3, #96	; 0x60
 800acaa:	d050      	beq.n	800ad4e <HAL_TIM_ConfigClockSource+0x116>
 800acac:	2b60      	cmp	r3, #96	; 0x60
 800acae:	d877      	bhi.n	800ada0 <HAL_TIM_ConfigClockSource+0x168>
 800acb0:	2b50      	cmp	r3, #80	; 0x50
 800acb2:	d03c      	beq.n	800ad2e <HAL_TIM_ConfigClockSource+0xf6>
 800acb4:	2b50      	cmp	r3, #80	; 0x50
 800acb6:	d873      	bhi.n	800ada0 <HAL_TIM_ConfigClockSource+0x168>
 800acb8:	2b40      	cmp	r3, #64	; 0x40
 800acba:	d058      	beq.n	800ad6e <HAL_TIM_ConfigClockSource+0x136>
 800acbc:	2b40      	cmp	r3, #64	; 0x40
 800acbe:	d86f      	bhi.n	800ada0 <HAL_TIM_ConfigClockSource+0x168>
 800acc0:	2b30      	cmp	r3, #48	; 0x30
 800acc2:	d064      	beq.n	800ad8e <HAL_TIM_ConfigClockSource+0x156>
 800acc4:	2b30      	cmp	r3, #48	; 0x30
 800acc6:	d86b      	bhi.n	800ada0 <HAL_TIM_ConfigClockSource+0x168>
 800acc8:	2b20      	cmp	r3, #32
 800acca:	d060      	beq.n	800ad8e <HAL_TIM_ConfigClockSource+0x156>
 800accc:	2b20      	cmp	r3, #32
 800acce:	d867      	bhi.n	800ada0 <HAL_TIM_ConfigClockSource+0x168>
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d05c      	beq.n	800ad8e <HAL_TIM_ConfigClockSource+0x156>
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	d05a      	beq.n	800ad8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800acd8:	e062      	b.n	800ada0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	6899      	ldr	r1, [r3, #8]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f000 faee 	bl	800b2ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800acfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	609a      	str	r2, [r3, #8]
      break;
 800ad06:	e04e      	b.n	800ada6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	6899      	ldr	r1, [r3, #8]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f000 fad7 	bl	800b2ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689a      	ldr	r2, [r3, #8]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad2a:	609a      	str	r2, [r3, #8]
      break;
 800ad2c:	e03b      	b.n	800ada6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	6859      	ldr	r1, [r3, #4]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	f000 fa4e 	bl	800b1dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2150      	movs	r1, #80	; 0x50
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 faa5 	bl	800b296 <TIM_ITRx_SetConfig>
      break;
 800ad4c:	e02b      	b.n	800ada6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	6859      	ldr	r1, [r3, #4]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	f000 fa6c 	bl	800b238 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2160      	movs	r1, #96	; 0x60
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fa95 	bl	800b296 <TIM_ITRx_SetConfig>
      break;
 800ad6c:	e01b      	b.n	800ada6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	6859      	ldr	r1, [r3, #4]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f000 fa2e 	bl	800b1dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2140      	movs	r1, #64	; 0x40
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 fa85 	bl	800b296 <TIM_ITRx_SetConfig>
      break;
 800ad8c:	e00b      	b.n	800ada6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f000 fa7c 	bl	800b296 <TIM_ITRx_SetConfig>
        break;
 800ad9e:	e002      	b.n	800ada6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ada0:	bf00      	nop
 800ada2:	e000      	b.n	800ada6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ada4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	bc80      	pop	{r7}
 800add0:	4770      	bx	lr

0800add2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adda:	bf00      	nop
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	bc80      	pop	{r7}
 800ade2:	4770      	bx	lr

0800ade4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bc80      	pop	{r7}
 800adf4:	4770      	bx	lr

0800adf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bc80      	pop	{r7}
 800ae06:	4770      	bx	lr

0800ae08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a29      	ldr	r2, [pc, #164]	; (800aec0 <TIM_Base_SetConfig+0xb8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d00b      	beq.n	800ae38 <TIM_Base_SetConfig+0x30>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae26:	d007      	beq.n	800ae38 <TIM_Base_SetConfig+0x30>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a26      	ldr	r2, [pc, #152]	; (800aec4 <TIM_Base_SetConfig+0xbc>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d003      	beq.n	800ae38 <TIM_Base_SetConfig+0x30>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a25      	ldr	r2, [pc, #148]	; (800aec8 <TIM_Base_SetConfig+0xc0>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d108      	bne.n	800ae4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a1c      	ldr	r2, [pc, #112]	; (800aec0 <TIM_Base_SetConfig+0xb8>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d00b      	beq.n	800ae6a <TIM_Base_SetConfig+0x62>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae58:	d007      	beq.n	800ae6a <TIM_Base_SetConfig+0x62>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a19      	ldr	r2, [pc, #100]	; (800aec4 <TIM_Base_SetConfig+0xbc>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d003      	beq.n	800ae6a <TIM_Base_SetConfig+0x62>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a18      	ldr	r2, [pc, #96]	; (800aec8 <TIM_Base_SetConfig+0xc0>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d108      	bne.n	800ae7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	689a      	ldr	r2, [r3, #8]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a07      	ldr	r2, [pc, #28]	; (800aec0 <TIM_Base_SetConfig+0xb8>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d103      	bne.n	800aeb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	691a      	ldr	r2, [r3, #16]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	615a      	str	r2, [r3, #20]
}
 800aeb6:	bf00      	nop
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr
 800aec0:	40012c00 	.word	0x40012c00
 800aec4:	40000400 	.word	0x40000400
 800aec8:	40000800 	.word	0x40000800

0800aecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aecc:	b480      	push	{r7}
 800aece:	b087      	sub	sp, #28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	f023 0201 	bic.w	r2, r3, #1
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aefa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0303 	bic.w	r3, r3, #3
 800af02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f023 0302 	bic.w	r3, r3, #2
 800af14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a1c      	ldr	r2, [pc, #112]	; (800af94 <TIM_OC1_SetConfig+0xc8>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d10c      	bne.n	800af42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f023 0308 	bic.w	r3, r3, #8
 800af2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	4313      	orrs	r3, r2
 800af38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f023 0304 	bic.w	r3, r3, #4
 800af40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a13      	ldr	r2, [pc, #76]	; (800af94 <TIM_OC1_SetConfig+0xc8>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d111      	bne.n	800af6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	4313      	orrs	r3, r2
 800af62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	621a      	str	r2, [r3, #32]
}
 800af88:	bf00      	nop
 800af8a:	371c      	adds	r7, #28
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bc80      	pop	{r7}
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	40012c00 	.word	0x40012c00

0800af98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af98:	b480      	push	{r7}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	f023 0210 	bic.w	r2, r3, #16
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	021b      	lsls	r3, r3, #8
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f023 0320 	bic.w	r3, r3, #32
 800afe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	011b      	lsls	r3, r3, #4
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	4313      	orrs	r3, r2
 800afee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a1d      	ldr	r2, [pc, #116]	; (800b068 <TIM_OC2_SetConfig+0xd0>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d10d      	bne.n	800b014 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800affe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	011b      	lsls	r3, r3, #4
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	4313      	orrs	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a14      	ldr	r2, [pc, #80]	; (800b068 <TIM_OC2_SetConfig+0xd0>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d113      	bne.n	800b044 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b02a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	695b      	ldr	r3, [r3, #20]
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	4313      	orrs	r3, r2
 800b036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	621a      	str	r2, [r3, #32]
}
 800b05e:	bf00      	nop
 800b060:	371c      	adds	r7, #28
 800b062:	46bd      	mov	sp, r7
 800b064:	bc80      	pop	{r7}
 800b066:	4770      	bx	lr
 800b068:	40012c00 	.word	0x40012c00

0800b06c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f023 0303 	bic.w	r3, r3, #3
 800b0a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	021b      	lsls	r3, r3, #8
 800b0bc:	697a      	ldr	r2, [r7, #20]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a1d      	ldr	r2, [pc, #116]	; (800b13c <TIM_OC3_SetConfig+0xd0>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d10d      	bne.n	800b0e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	021b      	lsls	r3, r3, #8
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a14      	ldr	r2, [pc, #80]	; (800b13c <TIM_OC3_SetConfig+0xd0>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d113      	bne.n	800b116 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	4313      	orrs	r3, r2
 800b108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	011b      	lsls	r3, r3, #4
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	4313      	orrs	r3, r2
 800b114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	621a      	str	r2, [r3, #32]
}
 800b130:	bf00      	nop
 800b132:	371c      	adds	r7, #28
 800b134:	46bd      	mov	sp, r7
 800b136:	bc80      	pop	{r7}
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	40012c00 	.word	0x40012c00

0800b140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b140:	b480      	push	{r7}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b18a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	031b      	lsls	r3, r3, #12
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	4313      	orrs	r3, r2
 800b196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a0f      	ldr	r2, [pc, #60]	; (800b1d8 <TIM_OC4_SetConfig+0x98>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d109      	bne.n	800b1b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	695b      	ldr	r3, [r3, #20]
 800b1ac:	019b      	lsls	r3, r3, #6
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	621a      	str	r2, [r3, #32]
}
 800b1ce:	bf00      	nop
 800b1d0:	371c      	adds	r7, #28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bc80      	pop	{r7}
 800b1d6:	4770      	bx	lr
 800b1d8:	40012c00 	.word	0x40012c00

0800b1dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	f023 0201 	bic.w	r2, r3, #1
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	011b      	lsls	r3, r3, #4
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	4313      	orrs	r3, r2
 800b210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f023 030a 	bic.w	r3, r3, #10
 800b218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	621a      	str	r2, [r3, #32]
}
 800b22e:	bf00      	nop
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	bc80      	pop	{r7}
 800b236:	4770      	bx	lr

0800b238 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6a1b      	ldr	r3, [r3, #32]
 800b248:	f023 0210 	bic.w	r2, r3, #16
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b262:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	031b      	lsls	r3, r3, #12
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b274:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	011b      	lsls	r3, r3, #4
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	621a      	str	r2, [r3, #32]
}
 800b28c:	bf00      	nop
 800b28e:	371c      	adds	r7, #28
 800b290:	46bd      	mov	sp, r7
 800b292:	bc80      	pop	{r7}
 800b294:	4770      	bx	lr

0800b296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b296:	b480      	push	{r7}
 800b298:	b085      	sub	sp, #20
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	f043 0307 	orr.w	r3, r3, #7
 800b2b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	609a      	str	r2, [r3, #8]
}
 800b2c0:	bf00      	nop
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bc80      	pop	{r7}
 800b2c8:	4770      	bx	lr

0800b2ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b087      	sub	sp, #28
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	607a      	str	r2, [r7, #4]
 800b2d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	021a      	lsls	r2, r3, #8
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	609a      	str	r2, [r3, #8]
}
 800b2fe:	bf00      	nop
 800b300:	371c      	adds	r7, #28
 800b302:	46bd      	mov	sp, r7
 800b304:	bc80      	pop	{r7}
 800b306:	4770      	bx	lr

0800b308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b308:	b480      	push	{r7}
 800b30a:	b087      	sub	sp, #28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	f003 031f 	and.w	r3, r3, #31
 800b31a:	2201      	movs	r2, #1
 800b31c:	fa02 f303 	lsl.w	r3, r2, r3
 800b320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6a1a      	ldr	r2, [r3, #32]
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	43db      	mvns	r3, r3
 800b32a:	401a      	ands	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6a1a      	ldr	r2, [r3, #32]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	f003 031f 	and.w	r3, r3, #31
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	fa01 f303 	lsl.w	r3, r1, r3
 800b340:	431a      	orrs	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	621a      	str	r2, [r3, #32]
}
 800b346:	bf00      	nop
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bc80      	pop	{r7}
 800b34e:	4770      	bx	lr

0800b350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b360:	2b01      	cmp	r3, #1
 800b362:	d101      	bne.n	800b368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b364:	2302      	movs	r3, #2
 800b366:	e046      	b.n	800b3f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2202      	movs	r2, #2
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a16      	ldr	r2, [pc, #88]	; (800b400 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d00e      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b4:	d009      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a12      	ldr	r2, [pc, #72]	; (800b404 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d004      	beq.n	800b3ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a10      	ldr	r2, [pc, #64]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d10c      	bne.n	800b3e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bc80      	pop	{r7}
 800b3fe:	4770      	bx	lr
 800b400:	40012c00 	.word	0x40012c00
 800b404:	40000400 	.word	0x40000400
 800b408:	40000800 	.word	0x40000800

0800b40c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	bc80      	pop	{r7}
 800b41c:	4770      	bx	lr

0800b41e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bc80      	pop	{r7}
 800b42e:	4770      	bx	lr

0800b430 <__errno>:
 800b430:	4b01      	ldr	r3, [pc, #4]	; (800b438 <__errno+0x8>)
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	20000034 	.word	0x20000034

0800b43c <__libc_init_array>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	2600      	movs	r6, #0
 800b440:	4d0c      	ldr	r5, [pc, #48]	; (800b474 <__libc_init_array+0x38>)
 800b442:	4c0d      	ldr	r4, [pc, #52]	; (800b478 <__libc_init_array+0x3c>)
 800b444:	1b64      	subs	r4, r4, r5
 800b446:	10a4      	asrs	r4, r4, #2
 800b448:	42a6      	cmp	r6, r4
 800b44a:	d109      	bne.n	800b460 <__libc_init_array+0x24>
 800b44c:	f000 fccc 	bl	800bde8 <_init>
 800b450:	2600      	movs	r6, #0
 800b452:	4d0a      	ldr	r5, [pc, #40]	; (800b47c <__libc_init_array+0x40>)
 800b454:	4c0a      	ldr	r4, [pc, #40]	; (800b480 <__libc_init_array+0x44>)
 800b456:	1b64      	subs	r4, r4, r5
 800b458:	10a4      	asrs	r4, r4, #2
 800b45a:	42a6      	cmp	r6, r4
 800b45c:	d105      	bne.n	800b46a <__libc_init_array+0x2e>
 800b45e:	bd70      	pop	{r4, r5, r6, pc}
 800b460:	f855 3b04 	ldr.w	r3, [r5], #4
 800b464:	4798      	blx	r3
 800b466:	3601      	adds	r6, #1
 800b468:	e7ee      	b.n	800b448 <__libc_init_array+0xc>
 800b46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b46e:	4798      	blx	r3
 800b470:	3601      	adds	r6, #1
 800b472:	e7f2      	b.n	800b45a <__libc_init_array+0x1e>
 800b474:	0800e918 	.word	0x0800e918
 800b478:	0800e918 	.word	0x0800e918
 800b47c:	0800e918 	.word	0x0800e918
 800b480:	0800e91c 	.word	0x0800e91c

0800b484 <__itoa>:
 800b484:	1e93      	subs	r3, r2, #2
 800b486:	2b22      	cmp	r3, #34	; 0x22
 800b488:	b510      	push	{r4, lr}
 800b48a:	460c      	mov	r4, r1
 800b48c:	d904      	bls.n	800b498 <__itoa+0x14>
 800b48e:	2300      	movs	r3, #0
 800b490:	461c      	mov	r4, r3
 800b492:	700b      	strb	r3, [r1, #0]
 800b494:	4620      	mov	r0, r4
 800b496:	bd10      	pop	{r4, pc}
 800b498:	2a0a      	cmp	r2, #10
 800b49a:	d109      	bne.n	800b4b0 <__itoa+0x2c>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	da07      	bge.n	800b4b0 <__itoa+0x2c>
 800b4a0:	232d      	movs	r3, #45	; 0x2d
 800b4a2:	700b      	strb	r3, [r1, #0]
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	4240      	negs	r0, r0
 800b4a8:	4421      	add	r1, r4
 800b4aa:	f000 f841 	bl	800b530 <__utoa>
 800b4ae:	e7f1      	b.n	800b494 <__itoa+0x10>
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	e7f9      	b.n	800b4a8 <__itoa+0x24>

0800b4b4 <itoa>:
 800b4b4:	f7ff bfe6 	b.w	800b484 <__itoa>

0800b4b8 <memset>:
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	4402      	add	r2, r0
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d100      	bne.n	800b4c2 <memset+0xa>
 800b4c0:	4770      	bx	lr
 800b4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c6:	e7f9      	b.n	800b4bc <memset+0x4>

0800b4c8 <sniprintf>:
 800b4c8:	b40c      	push	{r2, r3}
 800b4ca:	b530      	push	{r4, r5, lr}
 800b4cc:	4b17      	ldr	r3, [pc, #92]	; (800b52c <sniprintf+0x64>)
 800b4ce:	1e0c      	subs	r4, r1, #0
 800b4d0:	681d      	ldr	r5, [r3, #0]
 800b4d2:	b09d      	sub	sp, #116	; 0x74
 800b4d4:	da08      	bge.n	800b4e8 <sniprintf+0x20>
 800b4d6:	238b      	movs	r3, #139	; 0x8b
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	602b      	str	r3, [r5, #0]
 800b4de:	b01d      	add	sp, #116	; 0x74
 800b4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4e4:	b002      	add	sp, #8
 800b4e6:	4770      	bx	lr
 800b4e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b4ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4f0:	bf0c      	ite	eq
 800b4f2:	4623      	moveq	r3, r4
 800b4f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4f8:	9304      	str	r3, [sp, #16]
 800b4fa:	9307      	str	r3, [sp, #28]
 800b4fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b500:	9002      	str	r0, [sp, #8]
 800b502:	9006      	str	r0, [sp, #24]
 800b504:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b508:	4628      	mov	r0, r5
 800b50a:	ab21      	add	r3, sp, #132	; 0x84
 800b50c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b50e:	a902      	add	r1, sp, #8
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	f000 f8ab 	bl	800b66c <_svfiprintf_r>
 800b516:	1c43      	adds	r3, r0, #1
 800b518:	bfbc      	itt	lt
 800b51a:	238b      	movlt	r3, #139	; 0x8b
 800b51c:	602b      	strlt	r3, [r5, #0]
 800b51e:	2c00      	cmp	r4, #0
 800b520:	d0dd      	beq.n	800b4de <sniprintf+0x16>
 800b522:	2200      	movs	r2, #0
 800b524:	9b02      	ldr	r3, [sp, #8]
 800b526:	701a      	strb	r2, [r3, #0]
 800b528:	e7d9      	b.n	800b4de <sniprintf+0x16>
 800b52a:	bf00      	nop
 800b52c:	20000034 	.word	0x20000034

0800b530 <__utoa>:
 800b530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b532:	b08b      	sub	sp, #44	; 0x2c
 800b534:	4605      	mov	r5, r0
 800b536:	460b      	mov	r3, r1
 800b538:	466e      	mov	r6, sp
 800b53a:	4c1d      	ldr	r4, [pc, #116]	; (800b5b0 <__utoa+0x80>)
 800b53c:	f104 0c20 	add.w	ip, r4, #32
 800b540:	4637      	mov	r7, r6
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	6861      	ldr	r1, [r4, #4]
 800b546:	3408      	adds	r4, #8
 800b548:	c703      	stmia	r7!, {r0, r1}
 800b54a:	4564      	cmp	r4, ip
 800b54c:	463e      	mov	r6, r7
 800b54e:	d1f7      	bne.n	800b540 <__utoa+0x10>
 800b550:	7921      	ldrb	r1, [r4, #4]
 800b552:	6820      	ldr	r0, [r4, #0]
 800b554:	7139      	strb	r1, [r7, #4]
 800b556:	1e91      	subs	r1, r2, #2
 800b558:	2922      	cmp	r1, #34	; 0x22
 800b55a:	6038      	str	r0, [r7, #0]
 800b55c:	f04f 0100 	mov.w	r1, #0
 800b560:	d904      	bls.n	800b56c <__utoa+0x3c>
 800b562:	7019      	strb	r1, [r3, #0]
 800b564:	460b      	mov	r3, r1
 800b566:	4618      	mov	r0, r3
 800b568:	b00b      	add	sp, #44	; 0x2c
 800b56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b56c:	1e58      	subs	r0, r3, #1
 800b56e:	4684      	mov	ip, r0
 800b570:	fbb5 f7f2 	udiv	r7, r5, r2
 800b574:	fb02 5617 	mls	r6, r2, r7, r5
 800b578:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b57c:	4476      	add	r6, lr
 800b57e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b582:	460c      	mov	r4, r1
 800b584:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b588:	462e      	mov	r6, r5
 800b58a:	42b2      	cmp	r2, r6
 800b58c:	463d      	mov	r5, r7
 800b58e:	f101 0101 	add.w	r1, r1, #1
 800b592:	d9ed      	bls.n	800b570 <__utoa+0x40>
 800b594:	2200      	movs	r2, #0
 800b596:	545a      	strb	r2, [r3, r1]
 800b598:	1919      	adds	r1, r3, r4
 800b59a:	1aa5      	subs	r5, r4, r2
 800b59c:	42aa      	cmp	r2, r5
 800b59e:	dae2      	bge.n	800b566 <__utoa+0x36>
 800b5a0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b5a4:	780e      	ldrb	r6, [r1, #0]
 800b5a6:	3201      	adds	r2, #1
 800b5a8:	7006      	strb	r6, [r0, #0]
 800b5aa:	f801 5901 	strb.w	r5, [r1], #-1
 800b5ae:	e7f4      	b.n	800b59a <__utoa+0x6a>
 800b5b0:	0800e8c0 	.word	0x0800e8c0

0800b5b4 <__ssputs_r>:
 800b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b8:	688e      	ldr	r6, [r1, #8]
 800b5ba:	4682      	mov	sl, r0
 800b5bc:	429e      	cmp	r6, r3
 800b5be:	460c      	mov	r4, r1
 800b5c0:	4690      	mov	r8, r2
 800b5c2:	461f      	mov	r7, r3
 800b5c4:	d838      	bhi.n	800b638 <__ssputs_r+0x84>
 800b5c6:	898a      	ldrh	r2, [r1, #12]
 800b5c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5cc:	d032      	beq.n	800b634 <__ssputs_r+0x80>
 800b5ce:	6825      	ldr	r5, [r4, #0]
 800b5d0:	6909      	ldr	r1, [r1, #16]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	eba5 0901 	sub.w	r9, r5, r1
 800b5d8:	6965      	ldr	r5, [r4, #20]
 800b5da:	444b      	add	r3, r9
 800b5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5e4:	106d      	asrs	r5, r5, #1
 800b5e6:	429d      	cmp	r5, r3
 800b5e8:	bf38      	it	cc
 800b5ea:	461d      	movcc	r5, r3
 800b5ec:	0553      	lsls	r3, r2, #21
 800b5ee:	d531      	bpl.n	800b654 <__ssputs_r+0xa0>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	f000 fb53 	bl	800bc9c <_malloc_r>
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	b950      	cbnz	r0, 800b610 <__ssputs_r+0x5c>
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b600:	f8ca 3000 	str.w	r3, [sl]
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b610:	464a      	mov	r2, r9
 800b612:	6921      	ldr	r1, [r4, #16]
 800b614:	f000 face 	bl	800bbb4 <memcpy>
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b622:	81a3      	strh	r3, [r4, #12]
 800b624:	6126      	str	r6, [r4, #16]
 800b626:	444e      	add	r6, r9
 800b628:	6026      	str	r6, [r4, #0]
 800b62a:	463e      	mov	r6, r7
 800b62c:	6165      	str	r5, [r4, #20]
 800b62e:	eba5 0509 	sub.w	r5, r5, r9
 800b632:	60a5      	str	r5, [r4, #8]
 800b634:	42be      	cmp	r6, r7
 800b636:	d900      	bls.n	800b63a <__ssputs_r+0x86>
 800b638:	463e      	mov	r6, r7
 800b63a:	4632      	mov	r2, r6
 800b63c:	4641      	mov	r1, r8
 800b63e:	6820      	ldr	r0, [r4, #0]
 800b640:	f000 fac6 	bl	800bbd0 <memmove>
 800b644:	68a3      	ldr	r3, [r4, #8]
 800b646:	6822      	ldr	r2, [r4, #0]
 800b648:	1b9b      	subs	r3, r3, r6
 800b64a:	4432      	add	r2, r6
 800b64c:	2000      	movs	r0, #0
 800b64e:	60a3      	str	r3, [r4, #8]
 800b650:	6022      	str	r2, [r4, #0]
 800b652:	e7db      	b.n	800b60c <__ssputs_r+0x58>
 800b654:	462a      	mov	r2, r5
 800b656:	f000 fb7b 	bl	800bd50 <_realloc_r>
 800b65a:	4606      	mov	r6, r0
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d1e1      	bne.n	800b624 <__ssputs_r+0x70>
 800b660:	4650      	mov	r0, sl
 800b662:	6921      	ldr	r1, [r4, #16]
 800b664:	f000 face 	bl	800bc04 <_free_r>
 800b668:	e7c7      	b.n	800b5fa <__ssputs_r+0x46>
	...

0800b66c <_svfiprintf_r>:
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	4698      	mov	r8, r3
 800b672:	898b      	ldrh	r3, [r1, #12]
 800b674:	4607      	mov	r7, r0
 800b676:	061b      	lsls	r3, r3, #24
 800b678:	460d      	mov	r5, r1
 800b67a:	4614      	mov	r4, r2
 800b67c:	b09d      	sub	sp, #116	; 0x74
 800b67e:	d50e      	bpl.n	800b69e <_svfiprintf_r+0x32>
 800b680:	690b      	ldr	r3, [r1, #16]
 800b682:	b963      	cbnz	r3, 800b69e <_svfiprintf_r+0x32>
 800b684:	2140      	movs	r1, #64	; 0x40
 800b686:	f000 fb09 	bl	800bc9c <_malloc_r>
 800b68a:	6028      	str	r0, [r5, #0]
 800b68c:	6128      	str	r0, [r5, #16]
 800b68e:	b920      	cbnz	r0, 800b69a <_svfiprintf_r+0x2e>
 800b690:	230c      	movs	r3, #12
 800b692:	603b      	str	r3, [r7, #0]
 800b694:	f04f 30ff 	mov.w	r0, #4294967295
 800b698:	e0d1      	b.n	800b83e <_svfiprintf_r+0x1d2>
 800b69a:	2340      	movs	r3, #64	; 0x40
 800b69c:	616b      	str	r3, [r5, #20]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a2:	2320      	movs	r3, #32
 800b6a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6a8:	2330      	movs	r3, #48	; 0x30
 800b6aa:	f04f 0901 	mov.w	r9, #1
 800b6ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b858 <_svfiprintf_r+0x1ec>
 800b6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6ba:	4623      	mov	r3, r4
 800b6bc:	469a      	mov	sl, r3
 800b6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c2:	b10a      	cbz	r2, 800b6c8 <_svfiprintf_r+0x5c>
 800b6c4:	2a25      	cmp	r2, #37	; 0x25
 800b6c6:	d1f9      	bne.n	800b6bc <_svfiprintf_r+0x50>
 800b6c8:	ebba 0b04 	subs.w	fp, sl, r4
 800b6cc:	d00b      	beq.n	800b6e6 <_svfiprintf_r+0x7a>
 800b6ce:	465b      	mov	r3, fp
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f7ff ff6d 	bl	800b5b4 <__ssputs_r>
 800b6da:	3001      	adds	r0, #1
 800b6dc:	f000 80aa 	beq.w	800b834 <_svfiprintf_r+0x1c8>
 800b6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6e2:	445a      	add	r2, fp
 800b6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 80a2 	beq.w	800b834 <_svfiprintf_r+0x1c8>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6fa:	f10a 0a01 	add.w	sl, sl, #1
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	9307      	str	r3, [sp, #28]
 800b702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b706:	931a      	str	r3, [sp, #104]	; 0x68
 800b708:	4654      	mov	r4, sl
 800b70a:	2205      	movs	r2, #5
 800b70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b710:	4851      	ldr	r0, [pc, #324]	; (800b858 <_svfiprintf_r+0x1ec>)
 800b712:	f000 fa41 	bl	800bb98 <memchr>
 800b716:	9a04      	ldr	r2, [sp, #16]
 800b718:	b9d8      	cbnz	r0, 800b752 <_svfiprintf_r+0xe6>
 800b71a:	06d0      	lsls	r0, r2, #27
 800b71c:	bf44      	itt	mi
 800b71e:	2320      	movmi	r3, #32
 800b720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b724:	0711      	lsls	r1, r2, #28
 800b726:	bf44      	itt	mi
 800b728:	232b      	movmi	r3, #43	; 0x2b
 800b72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b72e:	f89a 3000 	ldrb.w	r3, [sl]
 800b732:	2b2a      	cmp	r3, #42	; 0x2a
 800b734:	d015      	beq.n	800b762 <_svfiprintf_r+0xf6>
 800b736:	4654      	mov	r4, sl
 800b738:	2000      	movs	r0, #0
 800b73a:	f04f 0c0a 	mov.w	ip, #10
 800b73e:	9a07      	ldr	r2, [sp, #28]
 800b740:	4621      	mov	r1, r4
 800b742:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b746:	3b30      	subs	r3, #48	; 0x30
 800b748:	2b09      	cmp	r3, #9
 800b74a:	d94e      	bls.n	800b7ea <_svfiprintf_r+0x17e>
 800b74c:	b1b0      	cbz	r0, 800b77c <_svfiprintf_r+0x110>
 800b74e:	9207      	str	r2, [sp, #28]
 800b750:	e014      	b.n	800b77c <_svfiprintf_r+0x110>
 800b752:	eba0 0308 	sub.w	r3, r0, r8
 800b756:	fa09 f303 	lsl.w	r3, r9, r3
 800b75a:	4313      	orrs	r3, r2
 800b75c:	46a2      	mov	sl, r4
 800b75e:	9304      	str	r3, [sp, #16]
 800b760:	e7d2      	b.n	800b708 <_svfiprintf_r+0x9c>
 800b762:	9b03      	ldr	r3, [sp, #12]
 800b764:	1d19      	adds	r1, r3, #4
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	9103      	str	r1, [sp, #12]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	bfbb      	ittet	lt
 800b76e:	425b      	neglt	r3, r3
 800b770:	f042 0202 	orrlt.w	r2, r2, #2
 800b774:	9307      	strge	r3, [sp, #28]
 800b776:	9307      	strlt	r3, [sp, #28]
 800b778:	bfb8      	it	lt
 800b77a:	9204      	strlt	r2, [sp, #16]
 800b77c:	7823      	ldrb	r3, [r4, #0]
 800b77e:	2b2e      	cmp	r3, #46	; 0x2e
 800b780:	d10c      	bne.n	800b79c <_svfiprintf_r+0x130>
 800b782:	7863      	ldrb	r3, [r4, #1]
 800b784:	2b2a      	cmp	r3, #42	; 0x2a
 800b786:	d135      	bne.n	800b7f4 <_svfiprintf_r+0x188>
 800b788:	9b03      	ldr	r3, [sp, #12]
 800b78a:	3402      	adds	r4, #2
 800b78c:	1d1a      	adds	r2, r3, #4
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	9203      	str	r2, [sp, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	bfb8      	it	lt
 800b796:	f04f 33ff 	movlt.w	r3, #4294967295
 800b79a:	9305      	str	r3, [sp, #20]
 800b79c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b868 <_svfiprintf_r+0x1fc>
 800b7a0:	2203      	movs	r2, #3
 800b7a2:	4650      	mov	r0, sl
 800b7a4:	7821      	ldrb	r1, [r4, #0]
 800b7a6:	f000 f9f7 	bl	800bb98 <memchr>
 800b7aa:	b140      	cbz	r0, 800b7be <_svfiprintf_r+0x152>
 800b7ac:	2340      	movs	r3, #64	; 0x40
 800b7ae:	eba0 000a 	sub.w	r0, r0, sl
 800b7b2:	fa03 f000 	lsl.w	r0, r3, r0
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	3401      	adds	r4, #1
 800b7ba:	4303      	orrs	r3, r0
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c2:	2206      	movs	r2, #6
 800b7c4:	4825      	ldr	r0, [pc, #148]	; (800b85c <_svfiprintf_r+0x1f0>)
 800b7c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7ca:	f000 f9e5 	bl	800bb98 <memchr>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d038      	beq.n	800b844 <_svfiprintf_r+0x1d8>
 800b7d2:	4b23      	ldr	r3, [pc, #140]	; (800b860 <_svfiprintf_r+0x1f4>)
 800b7d4:	bb1b      	cbnz	r3, 800b81e <_svfiprintf_r+0x1b2>
 800b7d6:	9b03      	ldr	r3, [sp, #12]
 800b7d8:	3307      	adds	r3, #7
 800b7da:	f023 0307 	bic.w	r3, r3, #7
 800b7de:	3308      	adds	r3, #8
 800b7e0:	9303      	str	r3, [sp, #12]
 800b7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e4:	4433      	add	r3, r6
 800b7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e8:	e767      	b.n	800b6ba <_svfiprintf_r+0x4e>
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	2001      	movs	r0, #1
 800b7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f2:	e7a5      	b.n	800b740 <_svfiprintf_r+0xd4>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f04f 0c0a 	mov.w	ip, #10
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	3401      	adds	r4, #1
 800b7fe:	9305      	str	r3, [sp, #20]
 800b800:	4620      	mov	r0, r4
 800b802:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b806:	3a30      	subs	r2, #48	; 0x30
 800b808:	2a09      	cmp	r2, #9
 800b80a:	d903      	bls.n	800b814 <_svfiprintf_r+0x1a8>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d0c5      	beq.n	800b79c <_svfiprintf_r+0x130>
 800b810:	9105      	str	r1, [sp, #20]
 800b812:	e7c3      	b.n	800b79c <_svfiprintf_r+0x130>
 800b814:	4604      	mov	r4, r0
 800b816:	2301      	movs	r3, #1
 800b818:	fb0c 2101 	mla	r1, ip, r1, r2
 800b81c:	e7f0      	b.n	800b800 <_svfiprintf_r+0x194>
 800b81e:	ab03      	add	r3, sp, #12
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	462a      	mov	r2, r5
 800b824:	4638      	mov	r0, r7
 800b826:	4b0f      	ldr	r3, [pc, #60]	; (800b864 <_svfiprintf_r+0x1f8>)
 800b828:	a904      	add	r1, sp, #16
 800b82a:	f3af 8000 	nop.w
 800b82e:	1c42      	adds	r2, r0, #1
 800b830:	4606      	mov	r6, r0
 800b832:	d1d6      	bne.n	800b7e2 <_svfiprintf_r+0x176>
 800b834:	89ab      	ldrh	r3, [r5, #12]
 800b836:	065b      	lsls	r3, r3, #25
 800b838:	f53f af2c 	bmi.w	800b694 <_svfiprintf_r+0x28>
 800b83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b83e:	b01d      	add	sp, #116	; 0x74
 800b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b844:	ab03      	add	r3, sp, #12
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	462a      	mov	r2, r5
 800b84a:	4638      	mov	r0, r7
 800b84c:	4b05      	ldr	r3, [pc, #20]	; (800b864 <_svfiprintf_r+0x1f8>)
 800b84e:	a904      	add	r1, sp, #16
 800b850:	f000 f87c 	bl	800b94c <_printf_i>
 800b854:	e7eb      	b.n	800b82e <_svfiprintf_r+0x1c2>
 800b856:	bf00      	nop
 800b858:	0800e8e5 	.word	0x0800e8e5
 800b85c:	0800e8ef 	.word	0x0800e8ef
 800b860:	00000000 	.word	0x00000000
 800b864:	0800b5b5 	.word	0x0800b5b5
 800b868:	0800e8eb 	.word	0x0800e8eb

0800b86c <_printf_common>:
 800b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	4616      	mov	r6, r2
 800b872:	4699      	mov	r9, r3
 800b874:	688a      	ldr	r2, [r1, #8]
 800b876:	690b      	ldr	r3, [r1, #16]
 800b878:	4607      	mov	r7, r0
 800b87a:	4293      	cmp	r3, r2
 800b87c:	bfb8      	it	lt
 800b87e:	4613      	movlt	r3, r2
 800b880:	6033      	str	r3, [r6, #0]
 800b882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b886:	460c      	mov	r4, r1
 800b888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b88c:	b10a      	cbz	r2, 800b892 <_printf_common+0x26>
 800b88e:	3301      	adds	r3, #1
 800b890:	6033      	str	r3, [r6, #0]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	0699      	lsls	r1, r3, #26
 800b896:	bf42      	ittt	mi
 800b898:	6833      	ldrmi	r3, [r6, #0]
 800b89a:	3302      	addmi	r3, #2
 800b89c:	6033      	strmi	r3, [r6, #0]
 800b89e:	6825      	ldr	r5, [r4, #0]
 800b8a0:	f015 0506 	ands.w	r5, r5, #6
 800b8a4:	d106      	bne.n	800b8b4 <_printf_common+0x48>
 800b8a6:	f104 0a19 	add.w	sl, r4, #25
 800b8aa:	68e3      	ldr	r3, [r4, #12]
 800b8ac:	6832      	ldr	r2, [r6, #0]
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	42ab      	cmp	r3, r5
 800b8b2:	dc28      	bgt.n	800b906 <_printf_common+0x9a>
 800b8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8b8:	1e13      	subs	r3, r2, #0
 800b8ba:	6822      	ldr	r2, [r4, #0]
 800b8bc:	bf18      	it	ne
 800b8be:	2301      	movne	r3, #1
 800b8c0:	0692      	lsls	r2, r2, #26
 800b8c2:	d42d      	bmi.n	800b920 <_printf_common+0xb4>
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8cc:	47c0      	blx	r8
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	d020      	beq.n	800b914 <_printf_common+0xa8>
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	68e5      	ldr	r5, [r4, #12]
 800b8d6:	f003 0306 	and.w	r3, r3, #6
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	bf18      	it	ne
 800b8de:	2500      	movne	r5, #0
 800b8e0:	6832      	ldr	r2, [r6, #0]
 800b8e2:	f04f 0600 	mov.w	r6, #0
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	bf08      	it	eq
 800b8ea:	1aad      	subeq	r5, r5, r2
 800b8ec:	6922      	ldr	r2, [r4, #16]
 800b8ee:	bf08      	it	eq
 800b8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	bfc4      	itt	gt
 800b8f8:	1a9b      	subgt	r3, r3, r2
 800b8fa:	18ed      	addgt	r5, r5, r3
 800b8fc:	341a      	adds	r4, #26
 800b8fe:	42b5      	cmp	r5, r6
 800b900:	d11a      	bne.n	800b938 <_printf_common+0xcc>
 800b902:	2000      	movs	r0, #0
 800b904:	e008      	b.n	800b918 <_printf_common+0xac>
 800b906:	2301      	movs	r3, #1
 800b908:	4652      	mov	r2, sl
 800b90a:	4649      	mov	r1, r9
 800b90c:	4638      	mov	r0, r7
 800b90e:	47c0      	blx	r8
 800b910:	3001      	adds	r0, #1
 800b912:	d103      	bne.n	800b91c <_printf_common+0xb0>
 800b914:	f04f 30ff 	mov.w	r0, #4294967295
 800b918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91c:	3501      	adds	r5, #1
 800b91e:	e7c4      	b.n	800b8aa <_printf_common+0x3e>
 800b920:	2030      	movs	r0, #48	; 0x30
 800b922:	18e1      	adds	r1, r4, r3
 800b924:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b92e:	4422      	add	r2, r4
 800b930:	3302      	adds	r3, #2
 800b932:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b936:	e7c5      	b.n	800b8c4 <_printf_common+0x58>
 800b938:	2301      	movs	r3, #1
 800b93a:	4622      	mov	r2, r4
 800b93c:	4649      	mov	r1, r9
 800b93e:	4638      	mov	r0, r7
 800b940:	47c0      	blx	r8
 800b942:	3001      	adds	r0, #1
 800b944:	d0e6      	beq.n	800b914 <_printf_common+0xa8>
 800b946:	3601      	adds	r6, #1
 800b948:	e7d9      	b.n	800b8fe <_printf_common+0x92>
	...

0800b94c <_printf_i>:
 800b94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	460c      	mov	r4, r1
 800b952:	7e27      	ldrb	r7, [r4, #24]
 800b954:	4691      	mov	r9, r2
 800b956:	2f78      	cmp	r7, #120	; 0x78
 800b958:	4680      	mov	r8, r0
 800b95a:	469a      	mov	sl, r3
 800b95c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b95e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b962:	d807      	bhi.n	800b974 <_printf_i+0x28>
 800b964:	2f62      	cmp	r7, #98	; 0x62
 800b966:	d80a      	bhi.n	800b97e <_printf_i+0x32>
 800b968:	2f00      	cmp	r7, #0
 800b96a:	f000 80d9 	beq.w	800bb20 <_printf_i+0x1d4>
 800b96e:	2f58      	cmp	r7, #88	; 0x58
 800b970:	f000 80a4 	beq.w	800babc <_printf_i+0x170>
 800b974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b97c:	e03a      	b.n	800b9f4 <_printf_i+0xa8>
 800b97e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b982:	2b15      	cmp	r3, #21
 800b984:	d8f6      	bhi.n	800b974 <_printf_i+0x28>
 800b986:	a001      	add	r0, pc, #4	; (adr r0, 800b98c <_printf_i+0x40>)
 800b988:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b98c:	0800b9e5 	.word	0x0800b9e5
 800b990:	0800b9f9 	.word	0x0800b9f9
 800b994:	0800b975 	.word	0x0800b975
 800b998:	0800b975 	.word	0x0800b975
 800b99c:	0800b975 	.word	0x0800b975
 800b9a0:	0800b975 	.word	0x0800b975
 800b9a4:	0800b9f9 	.word	0x0800b9f9
 800b9a8:	0800b975 	.word	0x0800b975
 800b9ac:	0800b975 	.word	0x0800b975
 800b9b0:	0800b975 	.word	0x0800b975
 800b9b4:	0800b975 	.word	0x0800b975
 800b9b8:	0800bb07 	.word	0x0800bb07
 800b9bc:	0800ba29 	.word	0x0800ba29
 800b9c0:	0800bae9 	.word	0x0800bae9
 800b9c4:	0800b975 	.word	0x0800b975
 800b9c8:	0800b975 	.word	0x0800b975
 800b9cc:	0800bb29 	.word	0x0800bb29
 800b9d0:	0800b975 	.word	0x0800b975
 800b9d4:	0800ba29 	.word	0x0800ba29
 800b9d8:	0800b975 	.word	0x0800b975
 800b9dc:	0800b975 	.word	0x0800b975
 800b9e0:	0800baf1 	.word	0x0800baf1
 800b9e4:	680b      	ldr	r3, [r1, #0]
 800b9e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9ea:	1d1a      	adds	r2, r3, #4
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	600a      	str	r2, [r1, #0]
 800b9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e0a4      	b.n	800bb42 <_printf_i+0x1f6>
 800b9f8:	6825      	ldr	r5, [r4, #0]
 800b9fa:	6808      	ldr	r0, [r1, #0]
 800b9fc:	062e      	lsls	r6, r5, #24
 800b9fe:	f100 0304 	add.w	r3, r0, #4
 800ba02:	d50a      	bpl.n	800ba1a <_printf_i+0xce>
 800ba04:	6805      	ldr	r5, [r0, #0]
 800ba06:	600b      	str	r3, [r1, #0]
 800ba08:	2d00      	cmp	r5, #0
 800ba0a:	da03      	bge.n	800ba14 <_printf_i+0xc8>
 800ba0c:	232d      	movs	r3, #45	; 0x2d
 800ba0e:	426d      	negs	r5, r5
 800ba10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba14:	230a      	movs	r3, #10
 800ba16:	485e      	ldr	r0, [pc, #376]	; (800bb90 <_printf_i+0x244>)
 800ba18:	e019      	b.n	800ba4e <_printf_i+0x102>
 800ba1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba1e:	6805      	ldr	r5, [r0, #0]
 800ba20:	600b      	str	r3, [r1, #0]
 800ba22:	bf18      	it	ne
 800ba24:	b22d      	sxthne	r5, r5
 800ba26:	e7ef      	b.n	800ba08 <_printf_i+0xbc>
 800ba28:	680b      	ldr	r3, [r1, #0]
 800ba2a:	6825      	ldr	r5, [r4, #0]
 800ba2c:	1d18      	adds	r0, r3, #4
 800ba2e:	6008      	str	r0, [r1, #0]
 800ba30:	0628      	lsls	r0, r5, #24
 800ba32:	d501      	bpl.n	800ba38 <_printf_i+0xec>
 800ba34:	681d      	ldr	r5, [r3, #0]
 800ba36:	e002      	b.n	800ba3e <_printf_i+0xf2>
 800ba38:	0669      	lsls	r1, r5, #25
 800ba3a:	d5fb      	bpl.n	800ba34 <_printf_i+0xe8>
 800ba3c:	881d      	ldrh	r5, [r3, #0]
 800ba3e:	2f6f      	cmp	r7, #111	; 0x6f
 800ba40:	bf0c      	ite	eq
 800ba42:	2308      	moveq	r3, #8
 800ba44:	230a      	movne	r3, #10
 800ba46:	4852      	ldr	r0, [pc, #328]	; (800bb90 <_printf_i+0x244>)
 800ba48:	2100      	movs	r1, #0
 800ba4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba4e:	6866      	ldr	r6, [r4, #4]
 800ba50:	2e00      	cmp	r6, #0
 800ba52:	bfa8      	it	ge
 800ba54:	6821      	ldrge	r1, [r4, #0]
 800ba56:	60a6      	str	r6, [r4, #8]
 800ba58:	bfa4      	itt	ge
 800ba5a:	f021 0104 	bicge.w	r1, r1, #4
 800ba5e:	6021      	strge	r1, [r4, #0]
 800ba60:	b90d      	cbnz	r5, 800ba66 <_printf_i+0x11a>
 800ba62:	2e00      	cmp	r6, #0
 800ba64:	d04d      	beq.n	800bb02 <_printf_i+0x1b6>
 800ba66:	4616      	mov	r6, r2
 800ba68:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba6c:	fb03 5711 	mls	r7, r3, r1, r5
 800ba70:	5dc7      	ldrb	r7, [r0, r7]
 800ba72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba76:	462f      	mov	r7, r5
 800ba78:	42bb      	cmp	r3, r7
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	d9f4      	bls.n	800ba68 <_printf_i+0x11c>
 800ba7e:	2b08      	cmp	r3, #8
 800ba80:	d10b      	bne.n	800ba9a <_printf_i+0x14e>
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	07df      	lsls	r7, r3, #31
 800ba86:	d508      	bpl.n	800ba9a <_printf_i+0x14e>
 800ba88:	6923      	ldr	r3, [r4, #16]
 800ba8a:	6861      	ldr	r1, [r4, #4]
 800ba8c:	4299      	cmp	r1, r3
 800ba8e:	bfde      	ittt	le
 800ba90:	2330      	movle	r3, #48	; 0x30
 800ba92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba9a:	1b92      	subs	r2, r2, r6
 800ba9c:	6122      	str	r2, [r4, #16]
 800ba9e:	464b      	mov	r3, r9
 800baa0:	4621      	mov	r1, r4
 800baa2:	4640      	mov	r0, r8
 800baa4:	f8cd a000 	str.w	sl, [sp]
 800baa8:	aa03      	add	r2, sp, #12
 800baaa:	f7ff fedf 	bl	800b86c <_printf_common>
 800baae:	3001      	adds	r0, #1
 800bab0:	d14c      	bne.n	800bb4c <_printf_i+0x200>
 800bab2:	f04f 30ff 	mov.w	r0, #4294967295
 800bab6:	b004      	add	sp, #16
 800bab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babc:	4834      	ldr	r0, [pc, #208]	; (800bb90 <_printf_i+0x244>)
 800babe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bac2:	680e      	ldr	r6, [r1, #0]
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	f856 5b04 	ldr.w	r5, [r6], #4
 800baca:	061f      	lsls	r7, r3, #24
 800bacc:	600e      	str	r6, [r1, #0]
 800bace:	d514      	bpl.n	800bafa <_printf_i+0x1ae>
 800bad0:	07d9      	lsls	r1, r3, #31
 800bad2:	bf44      	itt	mi
 800bad4:	f043 0320 	orrmi.w	r3, r3, #32
 800bad8:	6023      	strmi	r3, [r4, #0]
 800bada:	b91d      	cbnz	r5, 800bae4 <_printf_i+0x198>
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	f023 0320 	bic.w	r3, r3, #32
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	2310      	movs	r3, #16
 800bae6:	e7af      	b.n	800ba48 <_printf_i+0xfc>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	f043 0320 	orr.w	r3, r3, #32
 800baee:	6023      	str	r3, [r4, #0]
 800baf0:	2378      	movs	r3, #120	; 0x78
 800baf2:	4828      	ldr	r0, [pc, #160]	; (800bb94 <_printf_i+0x248>)
 800baf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800baf8:	e7e3      	b.n	800bac2 <_printf_i+0x176>
 800bafa:	065e      	lsls	r6, r3, #25
 800bafc:	bf48      	it	mi
 800bafe:	b2ad      	uxthmi	r5, r5
 800bb00:	e7e6      	b.n	800bad0 <_printf_i+0x184>
 800bb02:	4616      	mov	r6, r2
 800bb04:	e7bb      	b.n	800ba7e <_printf_i+0x132>
 800bb06:	680b      	ldr	r3, [r1, #0]
 800bb08:	6826      	ldr	r6, [r4, #0]
 800bb0a:	1d1d      	adds	r5, r3, #4
 800bb0c:	6960      	ldr	r0, [r4, #20]
 800bb0e:	600d      	str	r5, [r1, #0]
 800bb10:	0635      	lsls	r5, r6, #24
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	d501      	bpl.n	800bb1a <_printf_i+0x1ce>
 800bb16:	6018      	str	r0, [r3, #0]
 800bb18:	e002      	b.n	800bb20 <_printf_i+0x1d4>
 800bb1a:	0671      	lsls	r1, r6, #25
 800bb1c:	d5fb      	bpl.n	800bb16 <_printf_i+0x1ca>
 800bb1e:	8018      	strh	r0, [r3, #0]
 800bb20:	2300      	movs	r3, #0
 800bb22:	4616      	mov	r6, r2
 800bb24:	6123      	str	r3, [r4, #16]
 800bb26:	e7ba      	b.n	800ba9e <_printf_i+0x152>
 800bb28:	680b      	ldr	r3, [r1, #0]
 800bb2a:	1d1a      	adds	r2, r3, #4
 800bb2c:	600a      	str	r2, [r1, #0]
 800bb2e:	681e      	ldr	r6, [r3, #0]
 800bb30:	2100      	movs	r1, #0
 800bb32:	4630      	mov	r0, r6
 800bb34:	6862      	ldr	r2, [r4, #4]
 800bb36:	f000 f82f 	bl	800bb98 <memchr>
 800bb3a:	b108      	cbz	r0, 800bb40 <_printf_i+0x1f4>
 800bb3c:	1b80      	subs	r0, r0, r6
 800bb3e:	6060      	str	r0, [r4, #4]
 800bb40:	6863      	ldr	r3, [r4, #4]
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	2300      	movs	r3, #0
 800bb46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb4a:	e7a8      	b.n	800ba9e <_printf_i+0x152>
 800bb4c:	4632      	mov	r2, r6
 800bb4e:	4649      	mov	r1, r9
 800bb50:	4640      	mov	r0, r8
 800bb52:	6923      	ldr	r3, [r4, #16]
 800bb54:	47d0      	blx	sl
 800bb56:	3001      	adds	r0, #1
 800bb58:	d0ab      	beq.n	800bab2 <_printf_i+0x166>
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	079b      	lsls	r3, r3, #30
 800bb5e:	d413      	bmi.n	800bb88 <_printf_i+0x23c>
 800bb60:	68e0      	ldr	r0, [r4, #12]
 800bb62:	9b03      	ldr	r3, [sp, #12]
 800bb64:	4298      	cmp	r0, r3
 800bb66:	bfb8      	it	lt
 800bb68:	4618      	movlt	r0, r3
 800bb6a:	e7a4      	b.n	800bab6 <_printf_i+0x16a>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	4632      	mov	r2, r6
 800bb70:	4649      	mov	r1, r9
 800bb72:	4640      	mov	r0, r8
 800bb74:	47d0      	blx	sl
 800bb76:	3001      	adds	r0, #1
 800bb78:	d09b      	beq.n	800bab2 <_printf_i+0x166>
 800bb7a:	3501      	adds	r5, #1
 800bb7c:	68e3      	ldr	r3, [r4, #12]
 800bb7e:	9903      	ldr	r1, [sp, #12]
 800bb80:	1a5b      	subs	r3, r3, r1
 800bb82:	42ab      	cmp	r3, r5
 800bb84:	dcf2      	bgt.n	800bb6c <_printf_i+0x220>
 800bb86:	e7eb      	b.n	800bb60 <_printf_i+0x214>
 800bb88:	2500      	movs	r5, #0
 800bb8a:	f104 0619 	add.w	r6, r4, #25
 800bb8e:	e7f5      	b.n	800bb7c <_printf_i+0x230>
 800bb90:	0800e8f6 	.word	0x0800e8f6
 800bb94:	0800e907 	.word	0x0800e907

0800bb98 <memchr>:
 800bb98:	4603      	mov	r3, r0
 800bb9a:	b510      	push	{r4, lr}
 800bb9c:	b2c9      	uxtb	r1, r1
 800bb9e:	4402      	add	r2, r0
 800bba0:	4293      	cmp	r3, r2
 800bba2:	4618      	mov	r0, r3
 800bba4:	d101      	bne.n	800bbaa <memchr+0x12>
 800bba6:	2000      	movs	r0, #0
 800bba8:	e003      	b.n	800bbb2 <memchr+0x1a>
 800bbaa:	7804      	ldrb	r4, [r0, #0]
 800bbac:	3301      	adds	r3, #1
 800bbae:	428c      	cmp	r4, r1
 800bbb0:	d1f6      	bne.n	800bba0 <memchr+0x8>
 800bbb2:	bd10      	pop	{r4, pc}

0800bbb4 <memcpy>:
 800bbb4:	440a      	add	r2, r1
 800bbb6:	4291      	cmp	r1, r2
 800bbb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbbc:	d100      	bne.n	800bbc0 <memcpy+0xc>
 800bbbe:	4770      	bx	lr
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbc6:	4291      	cmp	r1, r2
 800bbc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbcc:	d1f9      	bne.n	800bbc2 <memcpy+0xe>
 800bbce:	bd10      	pop	{r4, pc}

0800bbd0 <memmove>:
 800bbd0:	4288      	cmp	r0, r1
 800bbd2:	b510      	push	{r4, lr}
 800bbd4:	eb01 0402 	add.w	r4, r1, r2
 800bbd8:	d902      	bls.n	800bbe0 <memmove+0x10>
 800bbda:	4284      	cmp	r4, r0
 800bbdc:	4623      	mov	r3, r4
 800bbde:	d807      	bhi.n	800bbf0 <memmove+0x20>
 800bbe0:	1e43      	subs	r3, r0, #1
 800bbe2:	42a1      	cmp	r1, r4
 800bbe4:	d008      	beq.n	800bbf8 <memmove+0x28>
 800bbe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbee:	e7f8      	b.n	800bbe2 <memmove+0x12>
 800bbf0:	4601      	mov	r1, r0
 800bbf2:	4402      	add	r2, r0
 800bbf4:	428a      	cmp	r2, r1
 800bbf6:	d100      	bne.n	800bbfa <memmove+0x2a>
 800bbf8:	bd10      	pop	{r4, pc}
 800bbfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc02:	e7f7      	b.n	800bbf4 <memmove+0x24>

0800bc04 <_free_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	4605      	mov	r5, r0
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	d043      	beq.n	800bc94 <_free_r+0x90>
 800bc0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc10:	1f0c      	subs	r4, r1, #4
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	bfb8      	it	lt
 800bc16:	18e4      	addlt	r4, r4, r3
 800bc18:	f000 f8d0 	bl	800bdbc <__malloc_lock>
 800bc1c:	4a1e      	ldr	r2, [pc, #120]	; (800bc98 <_free_r+0x94>)
 800bc1e:	6813      	ldr	r3, [r2, #0]
 800bc20:	4610      	mov	r0, r2
 800bc22:	b933      	cbnz	r3, 800bc32 <_free_r+0x2e>
 800bc24:	6063      	str	r3, [r4, #4]
 800bc26:	6014      	str	r4, [r2, #0]
 800bc28:	4628      	mov	r0, r5
 800bc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc2e:	f000 b8cb 	b.w	800bdc8 <__malloc_unlock>
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	d90a      	bls.n	800bc4c <_free_r+0x48>
 800bc36:	6821      	ldr	r1, [r4, #0]
 800bc38:	1862      	adds	r2, r4, r1
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	bf01      	itttt	eq
 800bc3e:	681a      	ldreq	r2, [r3, #0]
 800bc40:	685b      	ldreq	r3, [r3, #4]
 800bc42:	1852      	addeq	r2, r2, r1
 800bc44:	6022      	streq	r2, [r4, #0]
 800bc46:	6063      	str	r3, [r4, #4]
 800bc48:	6004      	str	r4, [r0, #0]
 800bc4a:	e7ed      	b.n	800bc28 <_free_r+0x24>
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	b10b      	cbz	r3, 800bc56 <_free_r+0x52>
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	d9fa      	bls.n	800bc4c <_free_r+0x48>
 800bc56:	6811      	ldr	r1, [r2, #0]
 800bc58:	1850      	adds	r0, r2, r1
 800bc5a:	42a0      	cmp	r0, r4
 800bc5c:	d10b      	bne.n	800bc76 <_free_r+0x72>
 800bc5e:	6820      	ldr	r0, [r4, #0]
 800bc60:	4401      	add	r1, r0
 800bc62:	1850      	adds	r0, r2, r1
 800bc64:	4283      	cmp	r3, r0
 800bc66:	6011      	str	r1, [r2, #0]
 800bc68:	d1de      	bne.n	800bc28 <_free_r+0x24>
 800bc6a:	6818      	ldr	r0, [r3, #0]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	4401      	add	r1, r0
 800bc70:	6011      	str	r1, [r2, #0]
 800bc72:	6053      	str	r3, [r2, #4]
 800bc74:	e7d8      	b.n	800bc28 <_free_r+0x24>
 800bc76:	d902      	bls.n	800bc7e <_free_r+0x7a>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	e7d4      	b.n	800bc28 <_free_r+0x24>
 800bc7e:	6820      	ldr	r0, [r4, #0]
 800bc80:	1821      	adds	r1, r4, r0
 800bc82:	428b      	cmp	r3, r1
 800bc84:	bf01      	itttt	eq
 800bc86:	6819      	ldreq	r1, [r3, #0]
 800bc88:	685b      	ldreq	r3, [r3, #4]
 800bc8a:	1809      	addeq	r1, r1, r0
 800bc8c:	6021      	streq	r1, [r4, #0]
 800bc8e:	6063      	str	r3, [r4, #4]
 800bc90:	6054      	str	r4, [r2, #4]
 800bc92:	e7c9      	b.n	800bc28 <_free_r+0x24>
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	bf00      	nop
 800bc98:	2000015c 	.word	0x2000015c

0800bc9c <_malloc_r>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	1ccd      	adds	r5, r1, #3
 800bca0:	f025 0503 	bic.w	r5, r5, #3
 800bca4:	3508      	adds	r5, #8
 800bca6:	2d0c      	cmp	r5, #12
 800bca8:	bf38      	it	cc
 800bcaa:	250c      	movcc	r5, #12
 800bcac:	2d00      	cmp	r5, #0
 800bcae:	4606      	mov	r6, r0
 800bcb0:	db01      	blt.n	800bcb6 <_malloc_r+0x1a>
 800bcb2:	42a9      	cmp	r1, r5
 800bcb4:	d903      	bls.n	800bcbe <_malloc_r+0x22>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	6033      	str	r3, [r6, #0]
 800bcba:	2000      	movs	r0, #0
 800bcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcbe:	f000 f87d 	bl	800bdbc <__malloc_lock>
 800bcc2:	4921      	ldr	r1, [pc, #132]	; (800bd48 <_malloc_r+0xac>)
 800bcc4:	680a      	ldr	r2, [r1, #0]
 800bcc6:	4614      	mov	r4, r2
 800bcc8:	b99c      	cbnz	r4, 800bcf2 <_malloc_r+0x56>
 800bcca:	4f20      	ldr	r7, [pc, #128]	; (800bd4c <_malloc_r+0xb0>)
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	b923      	cbnz	r3, 800bcda <_malloc_r+0x3e>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f000 f862 	bl	800bd9c <_sbrk_r>
 800bcd8:	6038      	str	r0, [r7, #0]
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f000 f85d 	bl	800bd9c <_sbrk_r>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	d123      	bne.n	800bd2e <_malloc_r+0x92>
 800bce6:	230c      	movs	r3, #12
 800bce8:	4630      	mov	r0, r6
 800bcea:	6033      	str	r3, [r6, #0]
 800bcec:	f000 f86c 	bl	800bdc8 <__malloc_unlock>
 800bcf0:	e7e3      	b.n	800bcba <_malloc_r+0x1e>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	1b5b      	subs	r3, r3, r5
 800bcf6:	d417      	bmi.n	800bd28 <_malloc_r+0x8c>
 800bcf8:	2b0b      	cmp	r3, #11
 800bcfa:	d903      	bls.n	800bd04 <_malloc_r+0x68>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	441c      	add	r4, r3
 800bd00:	6025      	str	r5, [r4, #0]
 800bd02:	e004      	b.n	800bd0e <_malloc_r+0x72>
 800bd04:	6863      	ldr	r3, [r4, #4]
 800bd06:	42a2      	cmp	r2, r4
 800bd08:	bf0c      	ite	eq
 800bd0a:	600b      	streq	r3, [r1, #0]
 800bd0c:	6053      	strne	r3, [r2, #4]
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f000 f85a 	bl	800bdc8 <__malloc_unlock>
 800bd14:	f104 000b 	add.w	r0, r4, #11
 800bd18:	1d23      	adds	r3, r4, #4
 800bd1a:	f020 0007 	bic.w	r0, r0, #7
 800bd1e:	1ac2      	subs	r2, r0, r3
 800bd20:	d0cc      	beq.n	800bcbc <_malloc_r+0x20>
 800bd22:	1a1b      	subs	r3, r3, r0
 800bd24:	50a3      	str	r3, [r4, r2]
 800bd26:	e7c9      	b.n	800bcbc <_malloc_r+0x20>
 800bd28:	4622      	mov	r2, r4
 800bd2a:	6864      	ldr	r4, [r4, #4]
 800bd2c:	e7cc      	b.n	800bcc8 <_malloc_r+0x2c>
 800bd2e:	1cc4      	adds	r4, r0, #3
 800bd30:	f024 0403 	bic.w	r4, r4, #3
 800bd34:	42a0      	cmp	r0, r4
 800bd36:	d0e3      	beq.n	800bd00 <_malloc_r+0x64>
 800bd38:	1a21      	subs	r1, r4, r0
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f000 f82e 	bl	800bd9c <_sbrk_r>
 800bd40:	3001      	adds	r0, #1
 800bd42:	d1dd      	bne.n	800bd00 <_malloc_r+0x64>
 800bd44:	e7cf      	b.n	800bce6 <_malloc_r+0x4a>
 800bd46:	bf00      	nop
 800bd48:	2000015c 	.word	0x2000015c
 800bd4c:	20000160 	.word	0x20000160

0800bd50 <_realloc_r>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	4607      	mov	r7, r0
 800bd54:	4614      	mov	r4, r2
 800bd56:	460e      	mov	r6, r1
 800bd58:	b921      	cbnz	r1, 800bd64 <_realloc_r+0x14>
 800bd5a:	4611      	mov	r1, r2
 800bd5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd60:	f7ff bf9c 	b.w	800bc9c <_malloc_r>
 800bd64:	b922      	cbnz	r2, 800bd70 <_realloc_r+0x20>
 800bd66:	f7ff ff4d 	bl	800bc04 <_free_r>
 800bd6a:	4625      	mov	r5, r4
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd70:	f000 f830 	bl	800bdd4 <_malloc_usable_size_r>
 800bd74:	42a0      	cmp	r0, r4
 800bd76:	d20f      	bcs.n	800bd98 <_realloc_r+0x48>
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4638      	mov	r0, r7
 800bd7c:	f7ff ff8e 	bl	800bc9c <_malloc_r>
 800bd80:	4605      	mov	r5, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d0f2      	beq.n	800bd6c <_realloc_r+0x1c>
 800bd86:	4631      	mov	r1, r6
 800bd88:	4622      	mov	r2, r4
 800bd8a:	f7ff ff13 	bl	800bbb4 <memcpy>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4638      	mov	r0, r7
 800bd92:	f7ff ff37 	bl	800bc04 <_free_r>
 800bd96:	e7e9      	b.n	800bd6c <_realloc_r+0x1c>
 800bd98:	4635      	mov	r5, r6
 800bd9a:	e7e7      	b.n	800bd6c <_realloc_r+0x1c>

0800bd9c <_sbrk_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	2300      	movs	r3, #0
 800bda0:	4d05      	ldr	r5, [pc, #20]	; (800bdb8 <_sbrk_r+0x1c>)
 800bda2:	4604      	mov	r4, r0
 800bda4:	4608      	mov	r0, r1
 800bda6:	602b      	str	r3, [r5, #0]
 800bda8:	f7fb fa24 	bl	80071f4 <_sbrk>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	d102      	bne.n	800bdb6 <_sbrk_r+0x1a>
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	b103      	cbz	r3, 800bdb6 <_sbrk_r+0x1a>
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	bd38      	pop	{r3, r4, r5, pc}
 800bdb8:	200002ec 	.word	0x200002ec

0800bdbc <__malloc_lock>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	; (800bdc4 <__malloc_lock+0x8>)
 800bdbe:	f000 b811 	b.w	800bde4 <__retarget_lock_acquire_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	200002f4 	.word	0x200002f4

0800bdc8 <__malloc_unlock>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <__malloc_unlock+0x8>)
 800bdca:	f000 b80c 	b.w	800bde6 <__retarget_lock_release_recursive>
 800bdce:	bf00      	nop
 800bdd0:	200002f4 	.word	0x200002f4

0800bdd4 <_malloc_usable_size_r>:
 800bdd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd8:	1f18      	subs	r0, r3, #4
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	bfbc      	itt	lt
 800bdde:	580b      	ldrlt	r3, [r1, r0]
 800bde0:	18c0      	addlt	r0, r0, r3
 800bde2:	4770      	bx	lr

0800bde4 <__retarget_lock_acquire_recursive>:
 800bde4:	4770      	bx	lr

0800bde6 <__retarget_lock_release_recursive>:
 800bde6:	4770      	bx	lr

0800bde8 <_init>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	bf00      	nop
 800bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdee:	bc08      	pop	{r3}
 800bdf0:	469e      	mov	lr, r3
 800bdf2:	4770      	bx	lr

0800bdf4 <_fini>:
 800bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf6:	bf00      	nop
 800bdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfa:	bc08      	pop	{r3}
 800bdfc:	469e      	mov	lr, r3
 800bdfe:	4770      	bx	lr
